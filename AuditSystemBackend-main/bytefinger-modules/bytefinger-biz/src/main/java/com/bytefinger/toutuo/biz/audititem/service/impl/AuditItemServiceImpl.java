package com.bytefinger.toutuo.biz.audititem.service.impl;import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;import com.baomidou.mybatisplus.core.toolkit.ObjectUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.biz.audit.domain.Audit;import com.bytefinger.toutuo.biz.audit.service.IAuditService;import com.bytefinger.toutuo.biz.audititem.domain.AuditItem;import com.bytefinger.toutuo.biz.audititem.domain.AuditItemCriteria;import com.bytefinger.toutuo.biz.audititem.mapper.AuditItemMapper;import com.bytefinger.toutuo.biz.audititem.service.IAuditItemCriteriaService;import com.bytefinger.toutuo.biz.audititem.service.IAuditItemService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.toutuo.biz.auditstep.domain.AuditStep;import com.bytefinger.toutuo.biz.auditteam.domain.AuditTeam;import com.bytefinger.toutuo.biz.auditteam.service.IAuditTeamService;import com.bytefinger.toutuo.biz.item.domain.Item;import com.bytefinger.toutuo.biz.item.domain.ItemCriteria;import com.bytefinger.toutuo.biz.item.domain.ItemTemplate;import com.bytefinger.toutuo.biz.item.domain.ItemTemplateRef;import com.bytefinger.toutuo.biz.item.service.IItemCriteriaService;import com.bytefinger.toutuo.biz.item.service.IItemService;import com.bytefinger.toutuo.biz.item.service.IItemTemplateRefService;import com.bytefinger.toutuo.biz.item.service.IItemTemplateService;import com.bytefinger.toutuo.common.enums.ModuleType;import com.bytefinger.toutuo.common.service.SendMessageService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.Objects;import java.util.stream.Collectors;/** * <p> * 审计项目关系表 服务实现类 * </p> * * @author Jone * @since 2025-08-05 */@Service@AllArgsConstructorpublic class AuditItemServiceImpl extends ServiceImpl<AuditItemMapper, AuditItem> implements IAuditItemService {    private final AuditItemMapper auditItemMapper;    private final IAuditItemCriteriaService auditItemCriteriaService;    private final IItemCriteriaService itemCriteriaService;    private final IItemTemplateService itemTemplateService;    private final IItemTemplateRefService itemTemplateRefService;    private final IItemService itemService;    private final SendMessageService sendMessageService;    private final IAuditTeamService auditTeamService;    @Override    public void add(AuditItem auditItem) {        List<AuditItem> auditItems = this.list(Wrappers.<AuditItem>lambdaQuery()                .eq(AuditItem::getItemCategory, auditItem.getItemCategory())                .eq(AuditItem::getAuditId, auditItem.getAuditId()));        if(ObjectUtils.isEmpty(auditItems)){            auditItem.setRefNo(1);        }else{            AuditItem auditItemMax = auditItems.stream().max(Comparator.comparing(AuditItem::getRefNo)).get();            auditItem.setRefNo(auditItemMax.getRefNo() + 1);        }        auditItemMapper.insert(auditItem);        List<ItemCriteria> list = itemCriteriaService.list(Wrappers.<ItemCriteria>lambdaQuery().eq(ItemCriteria::getItemId, auditItem.getItemId()));        if(CollectionUtils.isEmpty(list)){            return;        }        List<AuditItemCriteria> auditItemCriteriaList = new ArrayList<>();        list.forEach(itemCriteria -> {            AuditItemCriteria auditItemCriteria = new AuditItemCriteria()                    .setItemId(auditItem.getItemId())                    .setAuditItemId(auditItem.getId())                    .setAuditId(auditItem.getAuditId())                    .setCriteriaNo(itemCriteria.getCriteriaNo())                    .setGroupLevelOne(itemCriteria.getGroupLevelOne())                    .setGroupLevelTwo(itemCriteria.getGroupLevelTwo())                    .setCriteriaName(itemCriteria.getCriteriaName());            auditItemCriteriaList.add(auditItemCriteria);        });        auditItemCriteriaService.saveBatch(auditItemCriteriaList);    }    @Override    public void template(Long auditId, Long templateId) {        if(templateId == 0){            ItemTemplate template = itemTemplateService.getOne(Wrappers.<ItemTemplate>lambdaQuery().eq(ItemTemplate::getIsDefault, 1));            if(ObjectUtils.isEmpty(template)) return;            templateId = template.getId();;        }        List<ItemTemplateRef> list = itemTemplateRefService.list(Wrappers.<ItemTemplateRef>lambdaQuery().eq(ItemTemplateRef::getTemplateId, templateId));        if(CollectionUtils.isEmpty(list)){            return;        }        list.forEach(itemTemplateRef -> {            Item item = itemService.getOne(Wrappers.<Item>lambdaQuery().eq(Item::getId, itemTemplateRef.getItemId()));            if(ObjectUtils.isEmpty(item)) return;            AuditItem auditItem = new AuditItem()                    .setItemId(item.getId())                    .setAuditId(auditId)                    .setItemName(item.getItemName())                    .setItemType(item.getItemType())                    .setItemCategory(item.getItemCategory())                    .setItemCategoryShort(item.getItemCategoryShort());            add(auditItem);        });    }    @Override    public void delete(Integer id) {        AuditItem auditItem = this.getById(id);        List<AuditItem> auditItems = this.list(Wrappers.<AuditItem>lambdaQuery()                .eq(AuditItem::getItemCategory, auditItem.getItemCategory())                .eq(AuditItem::getAuditId, auditItem.getAuditId()));        if(!ObjectUtils.isEmpty(auditItems) && auditItems.size() > 1){            List<AuditItem> list = auditItems.stream().filter(item -> item.getRefNo() > auditItem.getRefNo()).collect(Collectors.toList());            list.forEach(item -> {                item.setRefNo(item.getRefNo() - 1);            });            this.updateBatchById(list);        }        this.removeById(id);    }    @Override    public boolean findingDetails(AuditItem auditItem) {        if(Objects.isNull(auditItem.getFindingNo())){            List<AuditItem> auditItems = this.list(Wrappers.<AuditItem>lambdaQuery()                    .eq(AuditItem::getAuditId, auditItem.getAuditId()));            AuditItem auditItemMax = auditItems.stream().max(Comparator.comparing(AuditItem::getFindingNo)).get();            if(ObjectUtils.isNotEmpty(auditItemMax) && auditItemMax.getFindingNo() != null){                auditItem.setFindingNo(auditItemMax.getFindingNo() + 1);            }else{                auditItem.setFindingNo(1L);            }        }        //记录一笔待办        sendMessageService.sendMessage(Long.valueOf(auditItem.getCreateUserId()), auditItem.getAuditId(), "", "",                ModuleType.AUDIT.getCode(), "XI_TONG_TONG_ZHI" + "," + "DAI_BAN_TONG_ZHI");        return this.updateById(auditItem);    }    @Override    public void response(AuditItem auditItem) {        this.updateById(auditItem);        Long userId = SecurityUtils.getUserId();        String username = SecurityUtils.getUsername();        //Audit audit = auditService.getById(auditItem.getAuditId());        //查询项目成员        List<AuditTeam> teams = auditTeamService.list(Wrappers.<AuditTeam>lambdaQuery()                .eq(AuditTeam::getAuditId, auditItem.getAuditId()));        teams.forEach(team -> {            if (team.getUserId().equals(userId)) {                return;            }            sendMessageService.sendMessage(team.getUserId(), auditItem.getAuditId(), "",                    "（" + username + "） submitted new response, please process it in time.",                    ModuleType.AUDIT.getCode(), "DAI_BAN_TONG_ZHI");        });    }    @Override    public List<AuditItem> list(Long auditId) {        return auditItemMapper.selectList(Wrappers.<AuditItem>lambdaQuery().eq(AuditItem::getAuditId, auditId)                .orderByDesc(AuditItem::getCreateTime));    }}