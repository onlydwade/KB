package com.bytefinger.toutuo.biz.performance.service.impl;import cn.hutool.core.collection.CollUtil;import com.alibaba.fastjson2.JSON;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.constant.CacheConstants;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.redis.service.RedisService;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.biz.performance.domain.*;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceBO;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceList;import com.bytefinger.toutuo.biz.performance.domain.dto.PerformanceDTO;import com.bytefinger.toutuo.biz.performance.domain.template.PerformanceTemplate;import com.bytefinger.toutuo.biz.performance.domain.vo.PerformanceVO;import com.bytefinger.toutuo.biz.performance.manager.PerformanceManager;import com.bytefinger.toutuo.biz.performance.mapper.*;import com.bytefinger.toutuo.biz.performance.service.IBudgetInService;import com.bytefinger.toutuo.biz.performance.service.IIndicatorDisplayLevelService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.*;import java.util.stream.Collectors;/** * <p> * 指标展示层级 * </p> * * @author patrick * @since 2022-11-24 */@Service@AllArgsConstructorpublic class IndicatorDisplayLevelImpl extends ServiceImpl<IndicatorDisplayLevelMapper, IndicatorDisplayLevel> implements IIndicatorDisplayLevelService {    private final BudgetIndicatorConfigMapper budgetIndicatorConfigMapper;    private final BudgetIndicatorDataMapper budgetIndicatorDataMapper;    private RedisService redisService;    @Override    public List<Long> getIndicatorDisplayLevelIds(String fieldKey){        QueryWrapper queryWrapper = new QueryWrapper();        queryWrapper.eq("deleted",0);        queryWrapper.eq("field_key",fieldKey);        List<IndicatorDisplayLevel> indicatorDisplayLevels = this.baseMapper.selectList(queryWrapper);        return indicatorDisplayLevels.stream().map(f->f.getDisplayLevelId()).collect(Collectors.toList());    }    @Override    public List<String> getFieldKeyByLevelId(Long id){        QueryWrapper queryWrapper = new QueryWrapper();        queryWrapper.eq("deleted",0);        queryWrapper.eq("display_level_id",id);        List<IndicatorDisplayLevel> indicatorDisplayLevels = this.baseMapper.selectList(queryWrapper);        return indicatorDisplayLevels.stream().map(f->f.getFieldKey()).collect(Collectors.toList());    }    @Override    public boolean setIndicatorDisplayLevelIds(String fieldKey,List<Long> ids){        QueryWrapper queryWrapper = new QueryWrapper();        queryWrapper.eq("deleted",0);        queryWrapper.eq("field_key",fieldKey);        List<IndicatorDisplayLevel> indicatorDisplayLevels = this.baseMapper.selectList(queryWrapper);        Long userId = SecurityUtils.getUserId();        indicatorDisplayLevels.forEach(f->{            f.setDeleted(1);            f.setUpdateUserId(userId);            f.setUpdateTime(new Date());            this.baseMapper.updateById(f);        });        //没勾选公司的，删除        QueryWrapper queryWrapperDataNotIn = new QueryWrapper();        queryWrapperDataNotIn.notIn("company_Id",ids);        queryWrapperDataNotIn.eq("field_key",fieldKey);        queryWrapperDataNotIn.eq("field_year",DateUtils.year(new Date()));        budgetIndicatorDataMapper.delete(queryWrapperDataNotIn);        //如果指标不存在，插入数据        List<BudgetIndicatorConfig> configList =budgetIndicatorConfigMapper.selectList(Wrappers.<BudgetIndicatorConfig>lambdaQuery().eq(BudgetIndicatorConfig::getFieldYear,DateUtils.year(new Date()))).stream().collect(Collectors.toList());        String jsonStr = redisService.getCacheObject(CacheConstants.SYS_CONFIG_KEY + "BIZ_BUDGET_IN");        List<PerformanceTemplate> templateList= JSON.parseArray(jsonStr,PerformanceTemplate.class);        List<PerformanceTemplate> templates= templateList.stream().filter(tem->tem.getFieldKey().equals(fieldKey)).collect(Collectors.toList());        String name="";        Integer sort=0;        if(CollUtil.isNotEmpty(templates)&& templates.size()>0 ){            name= Objects.isNull(templates.get(0)) ?"": templates.get(0).getFieldName();            sort= Objects.isNull(templates.get(0))?0:  templates.get(0).getSorts();        }        QueryWrapper queryWrapperIndicatorData = new QueryWrapper();        queryWrapperIndicatorData.in("company_Id",ids);        queryWrapperIndicatorData.eq("field_year",DateUtils.year(new Date()));        queryWrapperIndicatorData.eq("field_key",fieldKey);        List<BudgetIndicatorData> dataList=budgetIndicatorDataMapper.selectList(queryWrapperIndicatorData);        List<IndicatorDisplayLevel> addLevel = new ArrayList<>();        String finalName = name;        Integer finalSort = sort;        ids.forEach(f->{            IndicatorDisplayLevel level = new IndicatorDisplayLevel();            level.setCreateTime(new Date());            level.setCreateUserId(userId);            level.setDeleted(0);            level.setFieldKey(fieldKey);            level.setDisplayLevelId(f);            this.baseMapper.insert(level);            for(BudgetIndicatorConfig config : configList){                //已经设置过值，直接跳过不重新设置；如果没有新增一条                if(CollUtil.isNotEmpty(dataList) && dataList.stream().filter(t->t.getCompanyId().equals(f)&&t.getCode().equals(config.getCode())).count()>0){                    continue;                }                BudgetIndicatorData data=new BudgetIndicatorData();                data.setCreateUserId(SecurityUtils.getUserId());                data.setCreateTime(new Date());                data.setFieldYear(DateUtils.year(new Date()));                data.setCompanyId(f);                data.setFieldKey(fieldKey);                data.setFieldName(finalName);                data.setFieldSort(finalSort);                data.setCode(config.getCode());                data.setCodeSort(config.getSort());                data.setAmount(null);                budgetIndicatorDataMapper.insert(data);            }        });        return true;    }}