package com.bytefinger.toutuo.biz.auditproject.service.impl;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.toutuo.biz.audit.domain.Audit;import com.bytefinger.toutuo.biz.audit.enums.AuditStatus;import com.bytefinger.toutuo.biz.audit.mapper.AuditMapper;import com.bytefinger.toutuo.biz.auditproject.domain.AuditProject;import com.bytefinger.toutuo.biz.auditproject.domain.AuditProjectSchedule;import com.bytefinger.toutuo.biz.auditproject.mapper.AuditProjectMapper;import com.bytefinger.toutuo.biz.auditproject.service.IAuditProjectScheduleService;import com.bytefinger.toutuo.biz.auditproject.service.IAuditProjectService;import com.bytefinger.toutuo.biz.auditteam.domain.AuditTeam;import com.bytefinger.toutuo.biz.auditteam.service.IAuditTeamService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.function.Function;import java.util.stream.Collectors;/** * <p> * 项目管理 服务实现类 * </p> * * @author Jone * @since 2025-08-04 */@Service@AllArgsConstructorpublic class AuditProjectServiceImpl extends ServiceImpl<AuditProjectMapper, AuditProject> implements IAuditProjectService {    private final AuditProjectMapper auditProjectMapper;    private final AuditMapper auditMapper;    private final IAuditProjectScheduleService auditProjectScheduleService;    private final IAuditTeamService auditTeamService;    @Override    @DataFill    public IPage<AuditProject> page(QueryPage queryPage) {        IPage<AuditProject> page = auditProjectMapper.list(queryPage.toPage(), queryPage.getWrapper(), queryPage.getDbParams());        for (AuditProject project : page.getRecords()) {            List<Audit> list = auditMapper.selectList(Wrappers.<Audit>lambdaQuery().eq(Audit::getProjectId, project.getId()).orderByAsc(Audit::getCreateTime));            if(!CollectionUtils.isEmpty(list)){                project.setAudits(list);            }        }        return page;    }    @Override    public void add(AuditProject auditProject) {        this.save(auditProject);        AuditProjectSchedule auditProjectSchedule = new AuditProjectSchedule();        auditProjectSchedule.setProjectId(auditProject.getId());        auditProjectSchedule.setAuditScheduleName("First site vist schedule");        Date projectAwardDate = auditProject.getProjectAwardDate();        Calendar calendar = Calendar.getInstance();        calendar.setTime(projectAwardDate);        calendar.add(Calendar.MONTH, 6);        auditProjectSchedule.setStartDate(projectAwardDate);        auditProjectScheduleService.save(auditProjectSchedule);    }    @Override    @DataFill    public AuditProject findById(Long id) {        return getById(id);    }    @Override    public void update(AuditProject auditProject) {        AuditProject auditProjectDB = this.getById(auditProject.getId());        List<Long> userIds = new ArrayList<>();        userIds.add(auditProject.getMicUserId());        userIds.add(auditProject.getPicUserId());        userIds.add(auditProject.getDicUserId());        List<Long> userIdsDB = new ArrayList<>();        userIdsDB.add(auditProjectDB.getMicUserId());        userIdsDB.add(auditProjectDB.getPicUserId());        userIdsDB.add(auditProjectDB.getDicUserId());        //需要新增的        List<Long> collect = userIds.stream().filter(item -> !userIdsDB.contains(item)).collect(Collectors.toList());        //需要删除的        List<Long> collect1 = userIdsDB.stream().filter(item -> !userIds.contains(item)).collect(Collectors.toList());        this.updateById(auditProject);        List<Audit> list = auditMapper.selectList(Wrappers.<Audit>lambdaQuery()                .eq(Audit::getProjectId, auditProject.getId())                .eq(Audit::getServiceStatus, AuditStatus.IN_PROGRESS.getCode()).orderByAsc(Audit::getCreateTime));        if(CollectionUtils.isEmpty(list)) {            return;        }        for (Audit audit : list) {            auditTeamService.remove(Wrappers.<AuditTeam>lambdaQuery().in(AuditTeam::getUserId, collect1).eq(AuditTeam::getRoleKey, "LEADER_AUDITOR"));            List<AuditTeam> teams = collect.stream().map(item -> {                AuditTeam auditTeam = new AuditTeam();                auditTeam.setAuditId(audit.getId());                auditTeam.setUserId(item);                auditTeam.setRoleKey("LEADER_AUDITOR");                return auditTeam;            }).collect(Collectors.toList());            List<AuditTeam> uniqueOrders = new ArrayList<>(teams.stream()                    .collect(Collectors.toMap(                            AuditTeam::getUserId,                            Function.identity(),                            (existing, replacement) -> existing                    ))                    .values());            auditTeamService.saveBatch(uniqueOrders);        }    }}