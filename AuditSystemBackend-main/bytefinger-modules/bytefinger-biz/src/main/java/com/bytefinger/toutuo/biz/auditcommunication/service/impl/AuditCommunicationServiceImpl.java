package com.bytefinger.toutuo.biz.auditcommunication.service.impl;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.web.domain.vo.UserVO;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.api.biz.user.domain.SysUser;import com.bytefinger.toutuo.biz.audit.domain.Audit;import com.bytefinger.toutuo.biz.audit.service.IAuditService;import com.bytefinger.toutuo.biz.auditcommunication.domain.AuditCommunication;import com.bytefinger.toutuo.biz.auditcommunication.mapper.AuditCommunicationMapper;import com.bytefinger.toutuo.biz.auditcommunication.service.IAuditCommunicationService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.toutuo.biz.audititem.domain.AuditItem;import com.bytefinger.toutuo.biz.auditproject.domain.AuditProject;import com.bytefinger.toutuo.biz.auditteam.domain.AuditTeam;import com.bytefinger.toutuo.biz.auditteam.service.IAuditTeamService;import com.bytefinger.toutuo.biz.audittopic.domain.AuditTopic;import com.bytefinger.toutuo.biz.audittopic.service.IAuditTopicService;import com.bytefinger.toutuo.biz.user.service.ISysUserService;import com.bytefinger.toutuo.biz.user.service.UserService;import com.bytefinger.toutuo.common.enums.ModuleType;import com.bytefinger.toutuo.common.service.SendMessageService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.Arrays;import java.util.Collection;import java.util.List;import java.util.Map;import java.util.stream.Collectors;/** * <p> * 审计任务交流记录 服务实现类 * </p> * * @author Jone * @since 2025-08-04 */@Service@AllArgsConstructorpublic class AuditCommunicationServiceImpl extends ServiceImpl<AuditCommunicationMapper, AuditCommunication> implements IAuditCommunicationService {    private final SendMessageService sendMessageService;    private final IAuditService auditService;    private final IAuditTeamService auditTeamService;    private final UserService userService;    private final IAuditTopicService auditTopicService;    private final AuditCommunicationMapper auditCommunicationMapper;    @Override    public void add(AuditCommunication auditCommunication) {        this.save(auditCommunication);        String username = SecurityUtils.getUsername();        //查询审计任务        Audit audit = auditService.getById(auditCommunication.getAuditId());//        String[] auditItemIdArray = auditCommunication.getRelatedUser().split(",");//        long[] arrays = Arrays.stream(auditItemIdArray)//                .mapToLong(Long::parseLong)//                .toArray();//        Arrays.stream(arrays).forEach(v -> {//            //发送通知  DAI_BAN_TONG_ZHI:待办//            sendMessageService.sendMessage(Long.valueOf(v), auditCommunication.getAuditId(), "",//                    "（" + username + "） @you in （" + audit.getAuditJobName() + "） Communication",//                    ModuleType.AUDIT.getCode(), "XI_TONG_TONG_ZHI");//        });        auditCommunication.getRelatedUserIds().forEach(v -> {            //发送通知  DAI_BAN_TONG_ZHI:待办            sendMessageService.sendMessage(v.longValue(), auditCommunication.getAuditId(), "",                    "（" + username + "） @you in （" + audit.getAuditJobName() + "） Communication",                    ModuleType.AUDIT.getCode(), "XI_TONG_TONG_ZHI");        });        //查询项目成员        List<AuditTeam> teams = auditTeamService.list(Wrappers.<AuditTeam>lambdaQuery()                .eq(AuditTeam::getAuditId, audit.getId()));        teams.forEach(team -> {            if (team.getUserId().equals(auditCommunication.getCreateUserId())) {                return;            }            sendMessageService.sendMessage(team.getUserId(), audit.getId(), "",                    "（" + username + "） submitted comments in （" + audit.getAuditJobName() + "） Audit Implement",                    ModuleType.AUDIT.getCode(), "XI_TONG_TONG_ZHI");        });    }    @Override    public IPage<AuditCommunication> page(QueryPage queryPage) {        IPage<AuditCommunication> page = auditCommunicationMapper.selectPage(queryPage.toPage(), queryPage.getWrapper());        page.getRecords().forEach(auditCommunication -> {            List<Number> relatedUserIds = auditCommunication.getRelatedUserIds();            if(CollectionUtils.isNotEmpty(relatedUserIds)){            List<Long> relatedUserIdsLong = relatedUserIds.stream()                    .map(id -> id instanceof Long ? (Long) id : ((Integer) id).longValue()).collect(Collectors.toList());                List<UserVO> userVos = userService.listUserByIds(relatedUserIdsLong);                auditCommunication.setRelatedUserList(userVos);            }            List<Number> relatedTopicIds = auditCommunication.getRelatedTopicIds();            if(CollectionUtils.isNotEmpty(relatedTopicIds)){                List<Long> relatedTopicIdsLong = relatedTopicIds.stream()                        .map(id -> id instanceof Long ? (Long) id : ((Integer) id).longValue()).collect(Collectors.toList());                List<AuditTopic> auditTopics = auditTopicService.listByIds(relatedTopicIdsLong);                auditCommunication.setRelatedTopicList(auditTopics);            }        });        return page;    }}