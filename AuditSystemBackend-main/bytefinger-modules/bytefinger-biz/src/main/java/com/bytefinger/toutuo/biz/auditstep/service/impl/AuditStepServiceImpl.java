package com.bytefinger.toutuo.biz.auditstep.service.impl;import com.baomidou.mybatisplus.core.toolkit.ObjectUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.web.domain.vo.AjaxResult;import com.bytefinger.toutuo.biz.auditstep.constants.AuditStepConstant;import com.bytefinger.toutuo.biz.auditstep.domain.AuditStep;import com.bytefinger.toutuo.biz.auditstep.mapper.AuditStepMapper;import com.bytefinger.toutuo.biz.auditstep.service.IAuditStepService;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;import java.util.Date;import java.util.List;/** * <p> * 项目步骤完成状态 服务实现类 * </p> * <p> * * * * @author Jone * @since 2023-01-31 */@Service@RequiredArgsConstructor(onConstructor_ = {@Lazy}) //使用懒加载解决循环依赖的问题public class AuditStepServiceImpl extends ServiceImpl<AuditStepMapper, AuditStep> implements IAuditStepService {    private final AuditStepMapper auditStepMapper;    @Override    public List<AuditStep> listByAuditId(Long auditId) {        return auditStepMapper.selectList(Wrappers.<AuditStep>lambdaQuery()                .eq(AuditStep::getAuditId, auditId));    }    @Override    public boolean save(AuditStep entity) {        return super.save(entity);    }    @Override    public AjaxResult update(AuditStep auditStep) {        AuditStep auditStepDB = this.getOne(Wrappers.<AuditStep>lambdaQuery().eq(AuditStep::getAuditId, auditStep.getAuditId())                .eq(AuditStep::getStepMenuId, auditStep.getStepMenuId()));        if (ObjectUtils.isEmpty(auditStepDB)) {            this.save(auditStep);            if (null != auditStep.getStatus() && AuditStepConstant.AUDIT_STEP_DONE == auditStep.getStatus()) {               }        } else {            //如果当前节点已完成则直接返回            if (AuditStepConstant.AUDIT_STEP_DONE == auditStepDB.getStatus()) {                return AjaxResult.success();            }            auditStep.setId(auditStepDB.getId());            auditStep.setStatus(AuditStepConstant.AUDIT_STEP_DONE);            this.updateById(auditStep);        }        return AjaxResult.success();    }}