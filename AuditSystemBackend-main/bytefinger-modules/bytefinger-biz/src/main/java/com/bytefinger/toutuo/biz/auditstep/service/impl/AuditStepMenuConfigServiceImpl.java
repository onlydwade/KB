package com.bytefinger.toutuo.biz.auditstep.service.impl;import com.baomidou.mybatisplus.core.toolkit.ObjectUtils;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.toutuo.biz.audit.domain.Audit;import com.bytefinger.toutuo.biz.audit.service.IAuditService;import com.bytefinger.toutuo.biz.auditstep.constants.AuditStepConstant;import com.bytefinger.toutuo.biz.auditstep.domain.AuditStep;import com.bytefinger.toutuo.biz.auditstep.domain.AuditStepMenu;import com.bytefinger.toutuo.biz.auditstep.domain.AuditStepMenuConfig;import com.bytefinger.toutuo.biz.auditstep.mapper.AuditStepMenuConfigMapper;import com.bytefinger.toutuo.biz.auditstep.mapper.AuditStepMenuMapper;import com.bytefinger.toutuo.biz.auditstep.service.IAuditStepMenuConfigService;import com.bytefinger.toutuo.biz.auditstep.service.IAuditStepService;import lombok.AllArgsConstructor;import org.apache.commons.compress.utils.Lists;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import java.util.List;import java.util.Map;import java.util.function.Function;import java.util.stream.Collectors;/** * <p> * 项目步骤菜单配置表 服务实现类 * </p> * * @author Jone * @since 2023-01-31 */@Service@AllArgsConstructorpublic class AuditStepMenuConfigServiceImpl extends ServiceImpl<AuditStepMenuConfigMapper, AuditStepMenuConfig> implements IAuditStepMenuConfigService {    private final AuditStepMenuConfigMapper auditStepMenuConfigMapper;    private final AuditStepMenuMapper auditStepMenuMapper;    private final IAuditStepService auditStepService;    private final IAuditService auditService;    @Override    public List<AuditStepMenu> listByParentId(String auditType, Long parentId) {        return auditStepMenuConfigMapper.listByParentId(auditType, parentId);    }    @Override    public void deleteByAuditType(String auditType) {        auditStepMenuConfigMapper.deleteByAuditType(auditType);    }    @Override    @Transactional(rollbackFor = Exception.class)    public int update(AuditStepMenuConfig auditStepMenuConfig) {        this.deleteByAuditType(auditStepMenuConfig.getAuditType());        List<AuditStepMenuConfig> list = Lists.newArrayList();        for (Long stepMenuId : auditStepMenuConfig.getStepMenuIds()) {            AuditStepMenuConfig config = new AuditStepMenuConfig();            config.setAuditType(auditStepMenuConfig.getAuditType());            config.setStepMenuId(stepMenuId);            list.add(config);        }        return auditStepMenuConfigMapper.batchSave(list);    }    @Override    public List<AuditStepMenu> findAuditStepStatus(Long auditId) {        Audit audit = auditService.getById(auditId);        List<AuditStepMenu> list = auditStepMenuMapper.listbyAuditTypeOne(audit.getAuditType());        List<AuditStep> steps = auditStepService.listByAuditId(auditId);        Map<Long, AuditStep> stepMap = steps.stream().collect(Collectors.toMap(AuditStep::getStepMenuId, Function.identity(), (key1, key2) -> key2));        list = list.stream().map(v -> {            AuditStep auditStep = stepMap.get(v.getId());            v.setStatus(ObjectUtils.isEmpty(auditStep) ? AuditStepConstant.AUDIT_STEP_UNDONE : auditStep.getStatus());            return v;        }).collect(Collectors.toList());        return list;    }    @Override    public List<AuditStepMenu> findAuditStepMenuByAuditType(String auditType) {        List<AuditStepMenu> list = auditStepMenuMapper.listbyAuditType(auditType);        return list;    }    @Override    public List<AuditStepMenu> findAuditStepMenuByAuditId(Long auditId) {        Audit audit = auditService.getById(auditId);        List<AuditStepMenu> auditStepMenus = findAuditStepMenuByAuditType(audit.getAuditType());        Integer level = 1;        List<AuditStepMenu> oneStepList = auditStepMenus.stream().filter(o -> level.equals(o.getLevel())).collect(Collectors.toList());        List<Long> oneStepIdList = oneStepList.stream().map(AuditStepMenu::getId).collect(Collectors.toList());        List<AuditStepMenu> twoStepList = auditStepMenus.stream().filter(o -> oneStepIdList.contains(o.getParentId())).collect(Collectors.toList());        List<AuditStepMenu> showStepList = Lists.newArrayList();        if (!CollectionUtils.isEmpty(oneStepList))            showStepList.addAll(oneStepList);        if (!CollectionUtils.isEmpty(twoStepList))            showStepList.addAll(twoStepList);        return showStepList;    }}