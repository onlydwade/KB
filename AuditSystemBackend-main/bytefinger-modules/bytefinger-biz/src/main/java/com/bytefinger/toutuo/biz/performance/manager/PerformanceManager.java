package com.bytefinger.toutuo.biz.performance.manager;import cn.hutool.core.collection.CollUtil;import com.alibaba.fastjson2.JSON;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.constant.CacheConstants;import com.bytefinger.common.core.exception.ServiceException;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.core.utils.StringUtils;import com.bytefinger.common.core.utils.TreeUtils;import com.bytefinger.common.core.web.domain.vo.DeptVO;import com.bytefinger.common.core.web.domain.vo.UserVO;import com.bytefinger.common.redis.service.RedisService;import com.bytefinger.common.security.auth.AuthUtil;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.common.security.utils.SysConfigUtils;import com.bytefinger.toutuo.api.biz.user.domain.SysDept;import com.bytefinger.toutuo.api.system.config.api.RemoteConfigService;import com.bytefinger.toutuo.biz.operlog.service.IOperLogService;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceBO;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceList;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceMonth;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceYear;import com.bytefinger.toutuo.biz.performance.domain.template.PerformanceTemplate;import com.bytefinger.toutuo.biz.performance.domain.vo.PerformanceData;import com.bytefinger.toutuo.biz.performance.domain.vo.PerformanceVO;import com.bytefinger.toutuo.biz.performance.domain.vo.PerformanceValue;import com.bytefinger.toutuo.biz.performance.mapper.BudgetIndicatorDataMapper;import com.bytefinger.toutuo.biz.performance.service.IIndicatorDisplayLevelService;import com.bytefinger.toutuo.biz.user.mapper.SysDeptMapper;import com.bytefinger.toutuo.biz.user.mapper.UserMapper;import com.bytefinger.toutuo.common.constants.BizConstant;import com.bytefinger.toutuo.common.enums.DataRole;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.text.DecimalFormat;import java.util.*;import java.util.stream.Collectors;/** * <p> * 预算支出年数据表 服务类 * </p> * * @author patrick * @since 2022-11-24 */@Service@AllArgsConstructor@Slf4jpublic class PerformanceManager {    private final IOperLogService operLogService;    private final SysDeptMapper deptMapper;    private final UserMapper userMapper;    private RedisService redisService;    private RemoteConfigService remoteConfigService;    private final BudgetIndicatorDataMapper budgetIndicatorDataMapper;    /**     * 获取模板     * 获取财年的月份     * 把现有年，月数据获取出来     * 有一个标识确认是否要落库     * 是落库-创建数据：如果不存在新增，如果存在update数据     *     * @param budgetBO     * @return     */    @Transactional(rollbackFor = RuntimeException.class)    public PerformanceVO getOrUpdate(PerformanceBO budgetBO) {        boolean isUpdate = null != budgetBO.getBudgetDTO();        boolean setData;        StringBuffer operLog = new StringBuffer();        PerformanceVO budgetVO = new PerformanceVO();        budgetVO.setLevel(budgetBO.getLevel());        budgetVO.setCurrYear(budgetBO.getCurrYear());        SysDept dept = deptMapper.selectById(budgetBO.getRecordId());        budgetVO.setLabel(null == dept ? "" : dept.getDeptName());        //获取模板        List<PerformanceTemplate> budgetTemplates = this.getTemplate(budgetBO.getBudgetKey());        // 年数据        List<PerformanceYear> dataList = budgetBO.getYears();        Map<String, PerformanceYear> yearMap = dataList.stream().collect(Collectors.toMap(PerformanceYear::getFieldKey, item -> item, (o1, o2) -> o1));        setData = CollUtil.isNotEmpty(yearMap);        // 月数据        List<PerformanceMonth> monthDatas = budgetBO.getMonths();        Map<String, List<PerformanceMonth>> monthsMap = monthDatas.stream().collect(Collectors.groupingBy(PerformanceMonth::getFieldKey));        // 获取月份列表        List<Date> months = this.getMonths(budgetBO.getCurrYear());        budgetVO.setMonths(months.stream().map(item -> DateUtils.parseDateToStr(DateUtils.YYYY_MM, item)).collect(Collectors.toList()));        if (setData) {            for (PerformanceYear value : yearMap.values()) {                if (null != value.getLocked() && value.getLocked().equals(1)) {                    budgetVO.setLocked(true);                    break;                }            }        }        for (PerformanceTemplate budgetTemplate : budgetTemplates) {            PerformanceData budgetData = new PerformanceData();            budgetVO.getBudgetDatas().add(budgetData);            budgetData.setLabel(budgetTemplate.getFieldName()+ "(" +budgetTemplate.getFieldUnitName() + ")");            budgetData.setDesc(budgetTemplate.getDesc());            budgetData.setKey(budgetTemplate.getFieldKey());            PerformanceYear dbBudgetYear = yearMap.get(budgetTemplate.getFieldKey());            PerformanceData currBudgetData = null;            if (isUpdate) {                currBudgetData = budgetBO.getBudgetDTO().getBudgetDatas().stream().filter(item -> item.getKey().equals(budgetTemplate.getFieldKey())).findFirst().orElse(null);            }            BigDecimal value = null;            if (null != currBudgetData) {                value = currBudgetData.getValue();            }            else if(isUpdate){                //更新跳过没权限的部分                continue;            }            // 是否要新增，修改            if (isUpdate) {                if (!yearMap.containsKey(budgetTemplate.getFieldKey()) || null == dbBudgetYear) {                    try {                        dbBudgetYear = budgetBO.getBudgetYear().newInstance();                        dbBudgetYear.setFieldKey(budgetTemplate.getFieldKey());                        dbBudgetYear.setFieldName(budgetTemplate.getFieldName());                        dbBudgetYear.setFieldYear(budgetBO.getCurrYear());                        dbBudgetYear.setLevel(budgetBO.getLevel());                        dbBudgetYear.setRecordId(budgetBO.getRecordId());                        dbBudgetYear.setFieldValue(value);                        dbBudgetYear.setLocked(0);                        budgetBO.getYMapper().insert(dbBudgetYear);                        if (null != value) {                            operLog.append("<br>[全年][" + budgetTemplate.getFieldName() + "](" + BizConstant.BIZ_LOG_NULL + ") 变更为 (" + new DecimalFormat(".00").format(value) + ")");                        }                    } catch (InstantiationException | IllegalAccessException e) {                        log.error(e.getMessage());                    }                } else {                    if (null == dbBudgetYear.getFieldValue() && null == value) {                        continue;                    } else if (null == dbBudgetYear.getFieldValue() || null == value || dbBudgetYear.getFieldValue().compareTo(value) != 0) {                        operLog.append("<br>[全年][" + budgetTemplate.getFieldName() + "](" + dbBudgetYear.getFieldValue() + ") 变更为 (" + new DecimalFormat(".00").format(value) + ")");                        dbBudgetYear.setFieldValue(value);                        budgetBO.getYMapper().update(null,                                Wrappers.lambdaUpdate(budgetBO.getBudgetYear())                                        .set(PerformanceYear::getFieldValue, value)                                        .eq(PerformanceYear::getId, dbBudgetYear.getId()));                    }                }            }            // 设置值            if (setData && null != dbBudgetYear) {                budgetData.setId(dbBudgetYear.getId());                budgetData.setValue(dbBudgetYear.getFieldValue());            }            List<PerformanceMonth> budgetMonths = monthsMap.get(budgetTemplate.getFieldKey());            Map<String, PerformanceMonth> bimMap = Maps.newHashMap();            if (CollUtil.isNotEmpty(budgetMonths)) {                bimMap = budgetMonths.stream().collect(Collectors.toMap(PerformanceMonth::getFieldName, item -> item, (o1, o2) -> o1));            }            // 月份数据            for (int i = 0; i < months.size(); i++) {                Date d = months.get(i);                String ym = DateUtils.parseDateToStr(DateUtils.YYYY_MM, d);                PerformanceValue budgetValue = new PerformanceValue();                budgetData.getList().put(ym, budgetValue);                budgetValue.setKey(budgetTemplate.getFieldKey());                budgetValue.setName(ym);                budgetValue.setIndex(i);                PerformanceMonth dbBudgetMonth = bimMap.get(ym);                BigDecimal monthValue = null != dbBudgetMonth ? dbBudgetMonth.getFieldValue() : null;                if (null != currBudgetData && null != currBudgetData.getList()) {                    PerformanceValue currBudgetValue = currBudgetData.getList().get(ym);                    monthValue = null != currBudgetValue ? currBudgetValue.getValue() : null;                }                if (isUpdate) {                    // 新增                    if (!bimMap.containsKey(ym) || null == dbBudgetMonth) {                        try {                            dbBudgetMonth = budgetBO.getBudgetMonth().newInstance();                            dbBudgetMonth.setYearId(dbBudgetYear.getId());                            dbBudgetMonth.setFieldKey(budgetTemplate.getFieldKey());                            dbBudgetMonth.setFieldName(ym);                            dbBudgetMonth.setFieldYear(DateUtils.year(d));                            dbBudgetMonth.setFieldMonth(DateUtils.month(d));                            dbBudgetMonth.setLevel(budgetBO.getLevel());                            dbBudgetMonth.setRecordId(budgetBO.getRecordId());                            dbBudgetMonth.setDataIndex(i);                            dbBudgetMonth.setFieldValue(monthValue);                            budgetBO.getMMapper().insert(dbBudgetMonth);                            if (null != monthValue) {                                operLog.append("<br>[" + ym + "][" + budgetTemplate.getFieldName() + "](" + BizConstant.BIZ_LOG_NULL + ") 变更为 (" + new DecimalFormat(".00").format(monthValue) + ")");                            }                        } catch (InstantiationException | IllegalAccessException e) {                            log.error(e.getMessage());                        }                    }                    // 修改                    else {                        if (null == dbBudgetMonth.getFieldValue() && null == monthValue) {                            continue;                        } else if (null == dbBudgetMonth.getFieldValue() || null == monthValue || dbBudgetMonth.getFieldValue().compareTo(monthValue) != 0) {                            operLog.append("<br>[" + ym + "][" + budgetTemplate.getFieldName() + "](" + dbBudgetMonth.getFieldValue() + ") 变更为 (" + (null == monthValue ? BizConstant.BIZ_LOG_NULL : new DecimalFormat(".00").format(monthValue)) + ")");                            dbBudgetMonth.setFieldValue(monthValue);                            budgetBO.getMMapper().update(null,                                    Wrappers.lambdaUpdate(budgetBO.getBudgetMonth())                                            .set(PerformanceMonth::getFieldValue, monthValue)                                            .eq(PerformanceMonth::getRecordId, budgetBO.getRecordId())                                            .eq(PerformanceMonth::getFieldYear, budgetBO.getCurrYear())                                            .eq(PerformanceMonth::getFieldName, ym)                                            .eq(PerformanceMonth::getFieldKey, budgetTemplate.getFieldKey()));                        }                    }                }                if (null != dbBudgetMonth) {                    budgetValue.setId(dbBudgetMonth.getId());                }                budgetValue.setValue(monthValue);            }        }        if (isUpdate) {            if (operLog.length() != 0) {                String label = "变更层级：" + getLabel(budgetBO.getLevel(), budgetBO.getRecordId());                label += operLog.toString();                operLogService.changeLog(budgetBO.getModelName(), budgetBO.getRecordId(), label);            }        }        budgetVO.setId(budgetBO.getRecordId());        return budgetVO;    }    /**     * 获取模板     * 获取财年的月份     * 把现有年，月数据获取出来     * 有一个标识确认是否要落库     * 是落库-创建数据：如果不存在新增，如果存在update数据     *     * @param     * @return     */    public PerformanceVO groupData(Integer currYear, String budgetKey, List<PerformanceList> budgetInLists) {        boolean setData = CollUtil.isNotEmpty(budgetInLists);        Map<String, BigDecimal> yearMap = Maps.newHashMap();        Map<String, Map<String, PerformanceList>> monthMap = Maps.newHashMap();        if (setData) {            for (PerformanceList budgetInList : budgetInLists) {                if (!yearMap.containsKey(budgetInList.getFieldKey())) {                    yearMap.put(budgetInList.getFieldKey(), null == budgetInList.getYFieldValue() ? BigDecimal.ZERO : budgetInList.getYFieldValue());                }            }            monthMap = budgetInLists.stream().collect(Collectors.groupingBy(PerformanceList::getFieldKey, Collectors.toMap(PerformanceList::getFieldName, item -> item, (o1, o2) -> o1)));        }        List<PerformanceTemplate> budgetTemplates = getTemplate(budgetKey);        // 获取月份列表        List<Date> months = getMonths(currYear);        // 组装数据        PerformanceVO budgetVO = new PerformanceVO();        budgetVO.setMonths(months.stream().map(item -> DateUtils.parseDateToStr(DateUtils.YYYY_MM, item)).collect(Collectors.toList()));        for (PerformanceTemplate budgetTemplate : budgetTemplates) {            PerformanceData budgetData = new PerformanceData();            budgetVO.getBudgetDatas().add(budgetData);            budgetData.setLabel(budgetTemplate.getFieldName());            budgetData.setDesc(budgetTemplate.getDesc());            budgetData.setKey(budgetTemplate.getFieldKey());            BigDecimal value = yearMap.get(budgetTemplate.getFieldKey());            // 设置值            if (setData && null != value) {                budgetData.setValue(value);                budgetData.setDefaultValue(value);            }            Map<String, PerformanceList> bimMap = monthMap.get(budgetTemplate.getFieldKey());            // 月份数据            for (int i = 0; i < months.size(); i++) {                Date d = months.get(i);                String ym = DateUtils.parseDateToStr(DateUtils.YYYY_MM, d);                PerformanceValue budgetValue = new PerformanceValue();                budgetData.getList().put(ym, budgetValue);                budgetValue.setKey(budgetTemplate.getFieldKey());                budgetValue.setName(ym);                budgetValue.setIndex(i);                if (null != bimMap) {                    PerformanceList dbBudgetList = bimMap.get(ym);                    if (null != dbBudgetList) {                        budgetValue.setValue(null != dbBudgetList ? dbBudgetList.getMFieldValue() : null);                    }                }            }        }        return budgetVO;    }    /**     * 获取名称     *     * @param level     * @param recordId     * @return     */    public String getLabel(Integer level, Long recordId) {        // 回写名称        String label = "";        if (level == 1 || level == 2 || level == 3) {            DeptVO dept = userMapper.getDept(recordId);            if (null != dept) {                label = dept.getDeptName();            }        } else if (level == 4) {            UserVO userVO = userMapper.userById(recordId);            if (null != userVO) {                label = userVO.getRealname();            }        }        return label;    }    /**     * 获取财年设置     *     * @return     */    public int fiscalMonth() {        int fiscalMonth = 1;        String fiscalMonthStr = SysConfigUtils.getConfigCache(BizConstant.BIZ_FISCAL_YEAR);        if (StringUtils.isBlank(fiscalMonthStr)) {            fiscalMonth = Integer.valueOf(fiscalMonthStr);        }        return fiscalMonth;    }    /**     * 获取模板信息     *     * @return     */    public List<PerformanceTemplate> getTemplate(String budgetKey) {        // 创建年月数据不记录数据，返回前端渲染        String cacheKey = SysConfigUtils.getConfigCache(budgetKey);        if (StringUtils.isBlank(cacheKey)) {            throw new ServiceException("数据尚未初始化，请联系管理员");        }        List<PerformanceTemplate> budgetTemplates = JSON.parseArray(cacheKey, PerformanceTemplate.class);        Collections.sort(budgetTemplates, (o1, o2) -> o1.getSorts().compareTo(o1.getSorts()));        return budgetTemplates;    }    public void setTemplate(String budgetKey, List<PerformanceTemplate> templates){        remoteConfigService.set(budgetKey,JSON.toJSONString(templates));        redisService.setCacheObject(CacheConstants.SYS_CONFIG_KEY + budgetKey,JSON.toJSONString(templates));        //更新其他字段的名称和编号        if(CollUtil.isNotEmpty(templates)){            templates.forEach(t->{                budgetIndicatorDataMapper.update( t.getFieldName(),t.getFieldKey());            });        }    }    /**     * 获取月份     *     * @param year     * @return     */    public List<Date> getMonths(int year) {        int fiscalMonth = fiscalMonth();        List<Date> reList = Lists.newArrayList();        Date startDate = DateUtils.parseDate(year + "-" + StringUtils.leftPad(String.valueOf(fiscalMonth), 2) + "-01");        reList.add(startDate);        for (int i = 1; i < 12; i++) {            reList.add(DateUtils.addMonths(startDate, i));        }        return reList;    }    /**     * 数据查看权限     *     * @param recordId     * @param level     * @return     *///    public boolean dataRole(Long recordId, Integer level) {//        if (level < 4) {//            if (AuthUtil.hasDept(recordId)) {//                return true;//            }//        } else if (level == 4) {//            // 是不是当前登录人 || 是不是负责人//            if (recordId.equals(SecurityUtils.getUserId())//                    || recordId.equals(SecurityUtils.getLoginUser().getDeptId() * BizConstant.ENLARGE + SecurityUtils.getUserId())//                    || DataRole.currUserHasShowAllOrSub()) {//                return true;//            }//        }////        return false;//    }    public boolean dataRole(Long recordId) {        if(AuthUtil.hasPermi(DataRole.SHOW_ALL.getRoleKey())){            return true;        }else if(AuthUtil.hasPermi(DataRole.SHOW_SUB.getRoleKey())){            return SecurityUtils.getLoginUser().getSubDeptIds().contains(recordId);        }else {            return SecurityUtils.getLoginUser().getDeptId().equals(recordId);        }    }    public boolean dataRole(List<Long> recordIds) {        if(AuthUtil.hasPermi(DataRole.SHOW_ALL.getRoleKey())){            return true;        }else if(AuthUtil.hasPermi(DataRole.SHOW_SUB.getRoleKey())){            return SecurityUtils.getLoginUser().getSubDeptIds().containsAll(recordIds);        }else {            return SecurityUtils.getLoginUser().getDeptId().equals(recordIds.get(0));        }    }}