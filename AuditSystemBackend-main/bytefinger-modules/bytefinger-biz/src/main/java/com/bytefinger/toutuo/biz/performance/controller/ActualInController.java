package com.bytefinger.toutuo.biz.performance.controller;import cn.hutool.core.bean.BeanUtil;import cn.hutool.core.date.DateUtil;import cn.hutool.core.util.ObjectUtil;import com.baomidou.mybatisplus.core.metadata.IPage;import com.alibaba.excel.EasyExcel;import com.alibaba.excel.write.style.HorizontalCellStyleStrategy;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.bytefinger.common.core.exception.ServiceException;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.core.utils.bean.BeanUtils;import com.bytefinger.common.core.web.controller.BaseController;import com.bytefinger.common.core.web.domain.vo.AjaxResult;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.toutuo.biz.performance.domain.dto.ActualInDTO;import com.bytefinger.toutuo.biz.performance.domain.dto.ActualInSummaryDTO;import com.bytefinger.toutuo.biz.performance.domain.excel.ActualInDetailExcelVO;import com.bytefinger.toutuo.biz.performance.domain.excel.ActualInExcelVO;import com.bytefinger.toutuo.biz.performance.domain.excel.PerformanceExcelVO;import com.bytefinger.toutuo.biz.performance.domain.excel.StyleUtils;import com.bytefinger.toutuo.biz.performance.domain.excel.CustomMergeStrategy;import com.bytefinger.toutuo.biz.performance.domain.vo.*;import com.bytefinger.toutuo.biz.performance.manager.PerformanceExportManager;import com.bytefinger.toutuo.biz.performance.manager.PerformanceManager;import com.bytefinger.toutuo.biz.performance.mapper.BudgetPerformanceAllocationDataMapper;import com.bytefinger.toutuo.biz.performance.service.IActualInService;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectAchievement;import com.bytefinger.toutuo.biz.project.service.IProjectService;import com.bytefinger.toutuo.biz.user.service.UserService;import com.bytefinger.toutuo.common.enums.DataRole;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.commons.compress.utils.Lists;import org.springframework.util.CollectionUtils;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletResponse;import java.math.BigDecimal;import java.math.RoundingMode;import java.net.URLEncoder;import java.util.*;/** * <p> * 实际收入并表收入月数据表 前端控制器 * </p> * * @author patrick * @since 2022-11-27 */@Slf4j@Api(tags = "实际收入")@AllArgsConstructor@RestController@RequestMapping("/actualIn")public class ActualInController extends BaseController {    private final IActualInService actualInService;    private final UserService userService;    public final IProjectService projectService;    private final PerformanceManager performanceManager;    private final BudgetPerformanceAllocationDataMapper budgetPerformanceAllocationDataMapper;    /**     * 实际收入(实际合同中收入、实际合同当年收入、并表收入)     */    private final String[] BIZ_ACTUAL_IN_PROPORTION = {"SJHTZJE", "SJHTNDJE", "SJHTDNZHSR"};/*    @ApiOperation(value = "获取树数据")    @GetMapping("/tree")    public AjaxResult tree() {        if (DataRole.currUserHasShowAll()) {            return success(userService.deptTree());        }        return success(userService.currDeptTree());    }*/    @ApiOperation(value = "获取树数据不包含部门")    @GetMapping("/tree")    public AjaxResult treeTwo() {        if (DataRole.currUserHasShowAll()) {            return success(userService.deptTreeTwo());        }        return success(userService.currDeptTreeTwo());    }    @ApiOperation(value = "获取树数据不包含部门")    @GetMapping("/treeAll")    public AjaxResult treeAll() {        return success(userService.deptTreeTwo());    }    @ApiOperation(value = "实际签约汇总报表")    @PostMapping("/summary/page")    public AjaxResult summaryPage(@RequestBody ActualInSummaryDTO dto ) {         QueryPage queryPageProject=new QueryPage();        IPage<Project> page = actualInService.summaryPage(dto,queryPageProject);        return success(page);    }    @ApiOperation(value = "实际签约汇总报表-导出")    @PostMapping("/summary/export")    public void summaryExport(@RequestBody ActualInSummaryDTO dto,HttpServletResponse response) {        dto.setPageSize(Integer.MAX_VALUE);        dto.setPageNo(1);        QueryPage queryPageProject=new QueryPage();        IPage<Project> page = actualInService.summaryPage(dto,queryPageProject);        List<ProjectAchievement> projectAchievementAllList= budgetPerformanceAllocationDataMapper.getProjectAchievementList() ;        if(page.getTotal()>0){            PerformanceExportManager.exportActualSummary(response,page.getRecords(),projectAchievementAllList);            return;        }        PerformanceExportManager.exportActualSummary(response,null,null);    }    @ApiOperation(value = "业绩动态表")    @PostMapping("/achievementListThree")    public AjaxResult achievementListThree(@RequestBody ActualInDTO actualInDTO) {        //目标        List<ActualCountThreeVO>  mbMap = actualInService.achievementListThree(actualInDTO);        //实际        List<ActualCountThreeVO>  sjMap = actualInService.totalThree(actualInDTO);        //合并        return success(this.mergeLists(mbMap,sjMap));    }    public List<ActualCountThreeVO> mergeLists(List<ActualCountThreeVO> listA, List<ActualCountThreeVO> listB) {        List<ActualCountThreeVO> mergedList = new ArrayList<>();        // 遍历较短的那个列表的长度        listA.forEach(a-> {            mergedList.add(a);            listB.forEach(b-> {                if(a.getKey().equals(b.getKey())){                    if(b.getValue() != null && a.getValue() != null){                        if(                                new BigDecimal(b.getValue()).compareTo(BigDecimal.ZERO) == 0 ||                                        new BigDecimal(a.getValue()).compareTo(BigDecimal.ZERO) == 0                        ){                            a.setRate(null);                        }else {                            BigDecimal mb = new BigDecimal(a.getValue());                            BigDecimal sj = new BigDecimal(b.getValue());                            sj = sj.multiply(new BigDecimal(100));                            BigDecimal rate = sj.divide( mb ,2, RoundingMode.HALF_UP );                            a.setRate(rate.toString());                        }                    }                    mergedList.add(b);                }            });        });        listB.forEach(b-> {            if(("HTDNZHSR").equals(b.getKey())){                mergedList.add(b);            }        });        return mergedList;    }    @ApiOperation(value = "业绩动态表-导出")    @PostMapping("/exportAchievementListThree")    public void exportAchievementListThree(HttpServletResponse response, @RequestBody ActualInDTO actualInDTO) {        try {            //目标            List<ActualCountThreeVO>  mbMap = actualInService.achievementListThree(actualInDTO);            //实际            List<ActualCountThreeVO>  sjMap = actualInService.totalThree(actualInDTO);            //合并            List<ActualCountThreeVO> res = this.mergeLists(mbMap,sjMap);            res.forEach(data->{                data.setRate(data.getRate() == null ? "业绩达成率 - %" : "业绩达成率 "+data.getRate()+" %" );                if("HTDNZHSR".equals(data.getKey())){                    data.setRate(data.getLabel());                }                data.setValue(data.getValue() == null ? "-" : data.getValue());            });            String fileName = URLEncoder.encode("业绩动态表-"+System.currentTimeMillis(), "UTF-8");            response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");            response.setCharacterEncoding("utf-8");            response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");            HorizontalCellStyleStrategy horizontalCellStyleStrategy = new HorizontalCellStyleStrategy(StyleUtils.getHeadStyle(), StyleUtils.getContentStyle());            List<ActualCountThreeExcelVO> resData = new ArrayList<>();            res.forEach(r->{                ActualCountThreeExcelVO d = new ActualCountThreeExcelVO();                BeanUtil.copyProperties(r, d);                resData.add(d);            });            EasyExcel.write(response.getOutputStream(), ActualCountThreeExcelVO.class)                    .sheet("业绩动态表")                    .registerWriteHandler(new CustomMergeStrategy())                    .registerWriteHandler(horizontalCellStyleStrategy)                    .doWrite(resData);        } catch (Exception e) {            e.printStackTrace();            throw new ServiceException("导出失败");        }    }    @ApiOperation(value = "锁定")    @GetMapping("/locked/{ids}")    public AjaxResult locked(@PathVariable("ids") String ids) {        actualInService.lockedOrUn(Arrays.asList(ids.split(",")), 1);        return AjaxResult.success();    }    @ApiOperation(value = "解锁")    @GetMapping("/unLocked/{ids}")    public AjaxResult unLocked(@PathVariable("ids") String ids) {        actualInService.lockedOrUn(Arrays.asList(ids.split(",")), 0);        return AjaxResult.success();    }}