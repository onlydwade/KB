package com.bytefinger.toutuo.biz.companyoperate.service.impl;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.service.ThisService;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.toutuo.biz.companydocument.domain.ProjectCompanyDocumentTemplate;import com.bytefinger.toutuo.biz.companyfinance.domain.ProjectCompanyPayment;import com.bytefinger.toutuo.biz.companyoperate.domain.ProjectCompanyOperateReport;import com.bytefinger.toutuo.biz.companyoperate.domain.ProjectCompanyOperateReportExecutives;import com.bytefinger.toutuo.biz.companyoperate.domain.ProjectCompanyOperateReportItem;import com.bytefinger.toutuo.biz.companyoperate.mapper.ProjectCompanyOperateReportMapper;import com.bytefinger.toutuo.biz.companyoperate.service.IProjectCompanyOperateReportExecutivesService;import com.bytefinger.toutuo.biz.companyoperate.service.IProjectCompanyOperateReportItemService;import com.bytefinger.toutuo.biz.companyoperate.service.IProjectCompanyOperateReportService;import com.bytefinger.toutuo.biz.project.service.impl.ProjectServiceImpl;import com.bytefinger.toutuo.common.service.BizService;import lombok.AllArgsConstructor;import org.apache.poi.util.StringUtil;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import org.springframework.util.ObjectUtils;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * <p> * 经营报告 服务实现类 * </p> * * @author Jone * @since 2023-03-17 */@Service@AllArgsConstructorpublic class ProjectCompanyOperateReportServiceImpl extends BizService<ProjectCompanyOperateReportMapper, ProjectCompanyOperateReport> implements IProjectCompanyOperateReportService, ThisService<ProjectCompanyOperateReportServiceImpl> {    private final IProjectCompanyOperateReportExecutivesService executivesService;    private final IProjectCompanyOperateReportItemService itemService;    private final ProjectCompanyOperateReportMapper companyOperateReportMapper;    @Override    @DataFill    public Page<ProjectCompanyOperateReport> page(QueryPage queryPage) {        return companyOperateReportMapper.list(queryPage.toPage(), queryPage.getWrapper(), queryPage.getDbParams());    }    @Override    @DataFill    public Page<ProjectCompanyOperateReport> page(Long stepMenuId, QueryPage queryPage) {        Page<ProjectCompanyOperateReport> page = companyOperateReportMapper.list(queryPage.toPage(), queryPage.getWrapper(), queryPage.getDbParams());        if(CollectionUtils.isEmpty(page.getRecords())){            return page;        }        super.dataFillDcoument(stepMenuId, page);        List<ProjectCompanyOperateReport> records = page.getRecords();        for (ProjectCompanyOperateReport record : records) {            String reportMethod = record.getReportMethod();            List<String> documentTypeOneList = new ArrayList<>();            documentTypeOneList.add("BAOGAO_SHANGCHUAN");            List<String> documentTypeTwoList = new ArrayList<>();            documentTypeTwoList.add("CAIWU_FENXI");            documentTypeTwoList.add("CHENGUO_FUJIAN");            if (StringUtils.isNotBlank(reportMethod)){                List<ProjectCompanyDocumentTemplate> documentTemplateList = record.getDocumentTemplateList();                if (CollectionUtils.isEmpty(documentTemplateList)){                    continue;                }                Iterator<ProjectCompanyDocumentTemplate> iterator = documentTemplateList.iterator();                while (iterator.hasNext()){                    String type = iterator.next().getType();                    if ("SHANG_CHAUNG_BAO_GAO".equals(reportMethod) && documentTypeTwoList.contains(type)){                        iterator.remove();                    }                    //&& documentTypeOneList.contains(type)                    if ("XIAN_SHANG_JI_LU".equals(reportMethod) ){                        iterator.remove();                    }                }            }        }        return page;    }    @Override    @Transactional(rollbackFor = Exception.class)    public boolean save(ProjectCompanyOperateReport report) {        boolean result = super.save(report);        if(!CollectionUtils.isEmpty(report.getExecutivesList())){            List<ProjectCompanyOperateReportExecutives> executivesList = report.getExecutivesList();            executivesList.forEach(v -> {                v.setReportId(report.getId());                v.setCompanyId(report.getCompanyId());            });            executivesService.saveBatch(report.getExecutivesList());        }        if(!CollectionUtils.isEmpty(report.getItemList())){            List<ProjectCompanyOperateReportItem> itemList = report.getItemList();            itemList.forEach(v -> {                v.setReportId(report.getId());                v.setCompanyId(report.getCompanyId());            });            itemService.saveBatch(report.getItemList());        }        return result;    }    @Override    @DataFill    public ProjectCompanyOperateReport getByReportId(Long id) {        ProjectCompanyOperateReport report = super.getById(id);        if(ObjectUtils.isEmpty(report)){            return report;        }        List<ProjectCompanyOperateReportExecutives> executivesList = executivesService.list(Wrappers.<ProjectCompanyOperateReportExecutives>lambdaQuery()                .eq(ProjectCompanyOperateReportExecutives::getCompanyId, report.getCompanyId()).eq(ProjectCompanyOperateReportExecutives::getReportId, id));        report.setExecutivesList(executivesList);        List<ProjectCompanyOperateReportItem> itemList = itemService.list(Wrappers.<ProjectCompanyOperateReportItem>lambdaQuery()                .eq(ProjectCompanyOperateReportItem::getCompanyId, report.getCompanyId()).eq(ProjectCompanyOperateReportItem::getReportId, id));        report.setItemList(itemList);        return report;    }}