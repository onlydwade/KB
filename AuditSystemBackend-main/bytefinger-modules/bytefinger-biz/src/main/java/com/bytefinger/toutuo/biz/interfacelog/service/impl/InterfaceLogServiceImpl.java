package com.bytefinger.toutuo.biz.interfacelog.service.impl;import cn.hutool.http.HttpUtil;import com.alibaba.fastjson2.JSON;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.toutuo.api.biz.user.domain.IntMainDept;import com.bytefinger.toutuo.api.biz.user.domain.SysDept;import com.bytefinger.toutuo.biz.external.mapper.IntMainDeptMapper;import com.bytefinger.toutuo.biz.interfacelog.domain.InterfaceLog;import com.bytefinger.toutuo.biz.interfacelog.enums.InterfaceStatusEnums;import com.bytefinger.toutuo.biz.interfacelog.mapper.InterfaceLogMapper;import com.bytefinger.toutuo.biz.interfacelog.service.IInterfaceLogService;import com.bytefinger.toutuo.biz.oa.domain.dto.ReimbursementApplicationDTO;import com.bytefinger.toutuo.biz.oa.domain.dto.ReimbursementApplicationRespone;import com.bytefinger.toutuo.biz.performance.domain.BudgetInYear;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectExpand;import com.bytefinger.toutuo.biz.project.mapper.ProjectExpandMapper;import com.bytefinger.toutuo.biz.project.mapper.ProjectMapper;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStep;import com.bytefinger.toutuo.biz.projectstep.mapper.ProjectStepMapper;import com.bytefinger.toutuo.biz.user.mapper.SysDeptMapper;import lombok.AllArgsConstructor;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.beans.factory.annotation.Value;import org.springframework.util.CollectionUtils;import java.util.ArrayList;import java.util.List;import java.util.Objects;import java.util.stream.Collectors;/** * <p> * 接口日志 服务实现类 * </p> * * @author chengwei * @since 2023-12-12 */@Service@Slf4j@RequiredArgsConstructorpublic class InterfaceLogServiceImpl extends ServiceImpl<InterfaceLogMapper, InterfaceLog> implements IInterfaceLogService {    private final IntMainDeptMapper intMainDeptMapper;    private final ProjectStepMapper projectStepMapper;    private final SysDeptMapper sysDeptMapper;    private final ProjectExpandMapper projectExpandMapper;    private final ProjectMapper projectMapper;    private final String BusinessType="ReimbursementApplication";//    @Value("${reimbursementApplication.url}")//    public  String reimbursementApplicationUrl;    /**     *发送到报销系统(立项节点/作废)     * @return     */    @Override    public Integer sentReimbursementApplicationInit( ){        Integer count=0;        String type="YES";        //单一投标项目，发起立项中审批        List<Long> projectIds =projectStepMapper.selectList(Wrappers.<ProjectStep> lambdaQuery()                        .eq(ProjectStep::getStatus, 1)                        .eq(ProjectStep::getStepMenuId, 13)).stream().map(ProjectStep::getProjectId).collect(Collectors.toList());        //查询所有为发送报销的数据        List<Project> projectList = projectMapper.getNotReimbursementProjectList(projectIds);        for(Project project :  projectList){            String projectId=project.getId().toString();            ReimbursementApplicationDTO dto=new ReimbursementApplicationDTO();            dto.setTtCode(project.getProjectNo());            dto.setTtName(project.getProjectName());            //所属大区            if(Objects.nonNull( project.getRegionId())){                SysDept sysDept = sysDeptMapper.selectById(project.getRegionId());                dto.setSsdq( Objects.nonNull(sysDept)? sysDept.getDeptName():null);            }            //所属单位-从组织表找HrOrg--todo            if(Objects.nonNull(project.getCompanyId())){                SysDept sysDept = sysDeptMapper.selectById(project.getCompanyId());                String ssgs=Objects.nonNull(sysDept )?sysDept.getHrOrg():null;                dto.setSsgs(ssgs);                dto.setGsdw( Objects.nonNull(sysDept)? sysDept.getDeptName():null);//归属单位名称            }            dto.setSfyx(type);            dto.setZt(project.getServiceStatus());//根据投拓项目的状态进行传参            //参标单位 从扩展表获取参标主体   --todo            QueryWrapper<ProjectExpand> queryDataWrapper = new QueryWrapper<>();            queryDataWrapper.in("project_id", projectId);            List<ProjectExpand> projectExpandList = projectExpandMapper.selectList(queryDataWrapper);            if (!CollectionUtils.isEmpty(projectExpandList) && projectExpandList.size()>0) {                dto.setCbdw(projectExpandList.get(0).getHrOrg());            }            dto.setCbdwtext(project.getBidPartInCompany());//参标单位名称            dto.setZbbh(project.getBidingNo() );            dto.setTbjzsj(Objects.nonNull(project.getBidingEndtime())? DateUtils.dateTime( project.getBidingEndtime()) :null );            dto.setKbsj(Objects.nonNull(project.getBidingOpentime())? DateUtils.dateTime(project.getBidingOpentime()):null );            dto.setZbdw(project.getBidingCompany()  );            dto.setZbdwlx(project.getBidingCompanyPhone() );            dto.setZbdljg(project.getBidingAgency());            dto.setDljglx(project.getBidingAgencyPhone());            dto.setLyxt("04");            //调用报销系统接口            List<ReimbursementApplicationDTO> list=new ArrayList<>();            list.add(dto);        }        log.info("发起报销系统请求-初始化数量：{}条", count);        return  count;    }    /**     *发送到报销系统(立项节点/作废)     * @param projectId     * @param type     * @return     */    @Override    public ReimbursementApplicationRespone sentReimbursementApplication( String projectId ,String type){        Project project = projectMapper.selectById(projectId);        ReimbursementApplicationDTO dto=new ReimbursementApplicationDTO();        dto.setTtCode(project.getProjectNo());        dto.setTtName(project.getProjectName());        //所属大区        if(Objects.nonNull( project.getRegionId())){            SysDept sysDept = sysDeptMapper.selectById(project.getRegionId());            dto.setSsdq( Objects.nonNull(sysDept)? sysDept.getDeptName():null);        }        //所属单位-从组织表找HrOrg--todo        if(Objects.nonNull(project.getCompanyId())){            SysDept sysDept = sysDeptMapper.selectById(project.getCompanyId());            String ssgs=Objects.nonNull(sysDept )?sysDept.getHrOrg():null;            dto.setSsgs(ssgs);            dto.setGsdw( Objects.nonNull(sysDept)? sysDept.getDeptName():null);//归属单位名称        }        dto.setSfyx(type);        dto.setZt(project.getServiceStatus());//根据投拓项目的状态进行传参        //参标单位 从扩展表获取参标主体   --todo        QueryWrapper<ProjectExpand> queryDataWrapper = new QueryWrapper<>();        queryDataWrapper.in("project_id", projectId);        List<ProjectExpand> projectExpandList = projectExpandMapper.selectList(queryDataWrapper);        if (!CollectionUtils.isEmpty(projectExpandList) && projectExpandList.size()>0) {            dto.setCbdw(projectExpandList.get(0).getHrOrg());        }        dto.setCbdwtext(project.getBidPartInCompany());//参标单位名称        dto.setZbbh(project.getBidingNo() );        dto.setTbjzsj(Objects.nonNull(project.getBidingEndtime())? DateUtils.dateTime( project.getBidingEndtime()) :null );        dto.setKbsj(Objects.nonNull(project.getBidingOpentime())? DateUtils.dateTime(project.getBidingOpentime()):null );        dto.setZbdw(project.getBidingCompany()  );        dto.setZbdwlx(project.getBidingCompanyPhone() );        dto.setZbdljg(project.getBidingAgency());        dto.setDljglx(project.getBidingAgencyPhone());        dto.setLyxt("04");        //调用报销系统接口        List<ReimbursementApplicationDTO> list=new ArrayList<>();        list.add(dto);        //日志        String typeStr="YES".equals(type)?"申请":"作废";        InterfaceLog interfaceLog=new InterfaceLog();//        interfaceLog.setUrl(reimbursementApplicationUrl);        interfaceLog.setBusinessType(BusinessType);        interfaceLog.setBusinessId(projectId);        interfaceLog.setName("报销系统接口-发起"+typeStr);        interfaceLog.setParam(JSON.toJSONString(list));        interfaceLog.setRequestMethod("POST");        try{//            log.info("发起报销系统请求：{}，{}",reimbursementApplicationUrl,JSON.toJSONString(list));//            String bodys = HttpUtil.createPost(reimbursementApplicationUrl).contentType("application/json").body(JSON.toJSONString(list)).execute().body();//            log.info("发起报销系统请求-返回：{}", bodys);//            ReimbursementApplicationRespone respone= JSON.parseObject(bodys,ReimbursementApplicationRespone.class);//            if(respone.isSuccess()){//                interfaceLog.setStatus(InterfaceStatusEnums.Success.getCode());//                //如果成功，把项目表报销状态更新为SHI//                project.setReimbursement("SHI");//                projectMapper.updateById(project);//            }else{//                interfaceLog.setStatus(InterfaceStatusEnums.Failure.getCode());//            }//            interfaceLog.setJsonResult(bodys);            baseMapper.insert(interfaceLog);            return new ReimbursementApplicationRespone();        }catch (Exception e) {            interfaceLog.setErrorMsg(e.getMessage());            interfaceLog.setStatus(InterfaceStatusEnums.Error.getCode());            interfaceLog.setCount(0);            baseMapper.insert(interfaceLog);            return null;        }    }    /**     *报销接口失败重调(立项节点/作废)     */    @Override    public void ResentReimbursementApplication(){        List<InterfaceLog> logList=baseMapper.selectList(Wrappers.<InterfaceLog>lambdaQuery()                .eq(InterfaceLog::getBusinessType, "ReimbursementApplication")                .ne(InterfaceLog::getStatus, InterfaceStatusEnums.Doing.getCode())                .ne(InterfaceLog::getStatus, InterfaceStatusEnums.Success.getCode())                .lt(InterfaceLog::getCount, 3));//最多调用三次        log.info("发起报销系统请求-重发开始");        for (InterfaceLog interfaceLog : logList) {            Integer count=  interfaceLog.getCount()+1;            try{                log.info("发起报销系统请求-重发：{}",interfaceLog.getId());                interfaceLog.setStatus(InterfaceStatusEnums.Doing.getCode());                baseMapper.updateById(interfaceLog);                String bodys = HttpUtil.createPost(interfaceLog.getUrl()).contentType("application/json").body(interfaceLog.getParam()).execute().body();                log.info("发起报销系统请求-重发：{}，{}",interfaceLog.getId(),bodys);                ReimbursementApplicationRespone respone= JSON.parseObject(bodys,ReimbursementApplicationRespone.class);                if(respone.isSuccess()){                    interfaceLog.setStatus(InterfaceStatusEnums.Success.getCode());                    //如果成功，把项目表报销状态更新为SHI                    Project project = projectMapper.selectById(interfaceLog.getBusinessId());                    project.setReimbursement("SHI");                    projectMapper.updateById(project);                }else{                    interfaceLog.setStatus(InterfaceStatusEnums.Failure.getCode());                }                interfaceLog.setJsonResult(bodys);                interfaceLog.setCount(count);                baseMapper.updateById(interfaceLog);            }catch (Exception e) {                interfaceLog.setErrorMsg(e.getMessage());                interfaceLog.setStatus(InterfaceStatusEnums.Error.getCode());                interfaceLog.setCount(count);                baseMapper.updateById(interfaceLog);                log.error("发起报销系统请求-重发异常：{}",interfaceLog.getId());            }        }        log.info("发起报销系统请求-重发结束");    }}