package com.bytefinger.toutuo.biz.performance.controller;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.collection.CollectionUtil;import cn.hutool.core.date.DateUtil;import com.alibaba.fastjson2.JSON;import com.baomidou.mybatisplus.annotation.TableName;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.constant.CacheConstants;import com.bytefinger.common.core.utils.TreeUtils;import com.bytefinger.common.core.web.controller.BaseController;import com.bytefinger.common.core.web.domain.vo.*;import com.bytefinger.common.redis.service.RedisService;import com.bytefinger.common.security.annotation.InnerAuth;import com.bytefinger.common.security.auth.AuthUtil;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.api.system.core.domain.SysConfig;import com.bytefinger.toutuo.biz.operlog.service.IOperLogService;import com.bytefinger.toutuo.biz.performance.domain.*;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceList;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceYear;import com.bytefinger.toutuo.biz.performance.domain.dto.BudgetIndicatorDTO;import com.bytefinger.toutuo.biz.performance.domain.dto.BudgetStatisticalMethodConfigDTO;import com.bytefinger.toutuo.biz.performance.domain.dto.PerformanceDTO;import com.bytefinger.toutuo.biz.performance.domain.template.PerformanceTemplate;import com.bytefinger.toutuo.biz.performance.domain.vo.*;import com.bytefinger.toutuo.biz.performance.manager.PerformanceManager;import com.bytefinger.toutuo.biz.performance.mapper.*;import com.bytefinger.toutuo.biz.performance.service.IBudgetInService;import com.bytefinger.toutuo.biz.performance.service.IIndicatorDisplayLevelService;import com.bytefinger.toutuo.biz.user.mapper.UserMapper;import com.bytefinger.toutuo.biz.user.service.UserService;import com.bytefinger.toutuo.common.constants.BizConstant;import com.bytefinger.toutuo.common.enums.DataRole;import com.google.common.collect.Maps;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.commons.compress.utils.Lists;import org.springframework.web.bind.annotation.*;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;/** * <p> * 预算收入月数据表 前端控制器 * </p> * * @author patrick * @since 2022-11-24 */@Slf4j@Api(tags = "预算收入")@AllArgsConstructor@RestController@RequestMapping("/budgetIn")public class BudgetInController extends BaseController {    private final IBudgetInService budgetInYearService;    private final PerformanceMapper performanceMapper;    private final BudgetStatisticalMethodConfigMapper budgetStatisticalMethodConfigMapper;    private final BudgetIndicatorConfigMapper budgetIndicatorConfigMapper;    private final BudgetIndicatorDataMapper budgetIndicatorDataMapper;    private final PerformanceManager performanceManager;    private final UserService userService;    private final UserMapper userMapper;    private final IOperLogService operLogService;    private final IIndicatorDisplayLevelService indicatorDisplayLevelService;    private final BudgetPerformanceAllocationDataMapper budgetPerformanceAllocationDataMapper;    private RedisService redisService;/*    @ApiOperation(value = "获取树数据")    @GetMapping("/tree")    public AjaxResult tree() {        if (DataRole.currUserHasShowAll()) {            return success(userService.deptTree());        }        return success(userService.currDeptTree());    }*/    @ApiOperation(value = "获取树数据")    @GetMapping("/tree")    public AjaxResult treeTwo() {        if (DataRole.currUserHasShowAll()) {            return success(userService.deptTreeTwo());        }        return success(userService.currDeptTreeTwo());    }    @ApiOperation(value = "指标项计算方式自定义列表")    @GetMapping("/getConfigList/{currYear}")    public AjaxResult getConfigList(@PathVariable("currYear") Integer currYear) {        List<BudgetStatisticalMethodConfig> list =budgetStatisticalMethodConfigMapper.selectList(Wrappers.<BudgetStatisticalMethodConfig>lambdaQuery().eq(BudgetStatisticalMethodConfig::getFieldYear, currYear));        return success(list);    }    @ApiOperation(value = "保存指标项计算方式自定义")    @PostMapping("/saveConfigList")    public AjaxResult saveConfigList(@RequestBody BudgetStatisticalMethodConfigDTO data) {        List<BudgetStatisticalMethodConfig> configs=data.getConfigs();        if(CollectionUtil.isNotEmpty(configs) && configs.size()>0){            configs.forEach(t->{                t.setUpdateTime(new Date());                t.setUpdateUserId(SecurityUtils.getUserId());                if( t.getId()>0){                    t.setCreateUserId(SecurityUtils.getUserId());                    t.setCreateTime(new Date());                    budgetStatisticalMethodConfigMapper.updateById(t);                }else{                    budgetStatisticalMethodConfigMapper.insert(t);                }            });        }        return success();    }    @ApiOperation(value = "计算业绩分配")    @GetMapping("/calcPerformanceAllocationDataAll/{currYear}")    public AjaxResult calcPerformanceAllocationDataAll(@PathVariable("currYear") Integer currYear) {        return success(budgetInYearService.calcPerformanceAllocationDataAllFromYear(currYear));    }    @ApiOperation(value = "计算业绩分配:单个项目")    @GetMapping("/calcPerformanceAllocationData/{currYear}/{projectId}")    public AjaxResult calcPerformanceAllocationData(@PathVariable("currYear") Integer currYear,@PathVariable("projectId") Long projectId) {        return success(budgetInYearService.calcPerformanceAllocationData( projectId));    }    @ApiOperation(value = "项目批量刷新转化金额")    @GetMapping("/calcConversionAllocationDataAll/{currYear}")    public AjaxResult calcConversionAllocationDataAll(@PathVariable("currYear") Integer currYear) {        return success(budgetInYearService.calcConversionAllocationDataAll(currYear));    }    @ApiOperation(value = "项目刷新转化金额:单个项目")    @GetMapping("/calcConversionAllocationData/{currYear}/{projectId}")    public AjaxResult calcConversionAllocationData(@PathVariable("currYear") Integer currYear,@PathVariable("projectId") Long projectId) {        return success(budgetInYearService.calcConversionAllocationData(projectId));    }    @ApiOperation(value = "目标指标项配置列表")    @GetMapping("/getTargetIndicatorConfig/{currYear}")    public AjaxResult getTargetIndicatorConfig(@PathVariable("currYear") Integer currYear) {        List<BudgetIndicatorConfig> list =budgetIndicatorConfigMapper.selectList(Wrappers.<BudgetIndicatorConfig>lambdaQuery().eq(BudgetIndicatorConfig::getFieldYear,currYear).orderByAsc(BudgetIndicatorConfig::getSort));        return success(list);    }    @InnerAuth    @ApiOperation(value = "保存目标指标项配置")    @PostMapping("/saveTargetIndicatorConfig")    public AjaxResult saveTargetIndicatorConfig(@RequestBody BudgetIndicatorConfig config) {        if( config.getId()>0){            config.setUpdateTime(new Date());            config.setUpdateUserId(SecurityUtils.getUserId());            config.setCreateUserId(SecurityUtils.getUserId());            config.setCreateTime(new Date());            return success(budgetIndicatorConfigMapper.updateById(config));        }else{            config.setUpdateTime(new Date());            config.setUpdateUserId(SecurityUtils.getUserId());            return success(budgetIndicatorConfigMapper.insert(config));        }    }    @ApiOperation(value = "指标项目标数据列表")    @GetMapping("/getTargetIndicatorDataList/{currYear}/{recordId}")    public AjaxResult getTargetIndicatorDataList(@PathVariable("currYear") Integer currYear,@PathVariable("recordId") Long recordId) {        List<String> fieldKeys = indicatorDisplayLevelService.getFieldKeyByLevelId(recordId);        //读取指标        List<BudgetIndicatorData> list =budgetIndicatorDataMapper.selectList(Wrappers.<BudgetIndicatorData>lambdaQuery().eq(BudgetIndicatorData::getCompanyId,recordId).eq(BudgetIndicatorData::getFieldYear,currYear).orderByAsc(BudgetIndicatorData::getFieldSort).orderByAsc(BudgetIndicatorData::getCodeSort));        //如果指标不存在，插入数据        List<BudgetIndicatorConfig> configList =budgetIndicatorConfigMapper.selectList(Wrappers.<BudgetIndicatorConfig>lambdaQuery().eq(BudgetIndicatorConfig::getFieldYear,currYear)).stream().collect(Collectors.toList());        String jsonStr = redisService.getCacheObject(CacheConstants.SYS_CONFIG_KEY + "BIZ_BUDGET_IN");        List<PerformanceTemplate> templateList= JSON.parseArray(jsonStr,PerformanceTemplate.class);        List<BudgetIndicatorDataVO> voList=new ArrayList<>();        if(CollUtil.isEmpty(fieldKeys)|| fieldKeys.size()==0 ){            return success(voList);        }        //处理指标项-行排序；改为跟考核指标配置排序一致        List<String>  keyLists= templateList.stream().filter(tem->fieldKeys.contains(tem.getFieldKey())).sorted(Comparator.comparing(PerformanceTemplate::getSorts)).map(PerformanceTemplate::getFieldKey).collect(Collectors.toList());        for(String t : keyLists){            List<PerformanceTemplate> templates= templateList.stream().filter(tem->tem.getFieldKey().equals(t)).collect(Collectors.toList());            String name="";            Integer sort=0;            if(CollUtil.isNotEmpty(templates)&& templates.size()>0 &&CollUtil.isNotEmpty(configList)&& configList.size()>0){                name= Objects.isNull(templates.get(0)) ?"": templates.get(0).getFieldName();                sort= Objects.isNull(templates.get(0))?0:  templates.get(0).getSorts();            }else{                continue;            }            for(BudgetIndicatorConfig config : configList){                //已经设置过值，直接跳过不重新设置；如果没有新增一条                if(CollUtil.isNotEmpty(list)&&list.stream().filter(f->f.getFieldKey().equals(t)&&f.getCode().equals(config.getCode()) ).count()>0){                    continue;                }                BudgetIndicatorData data=new BudgetIndicatorData();                data.setCreateUserId(SecurityUtils.getUserId());                data.setCreateTime(new Date());                data.setFieldYear(currYear);                data.setCompanyId(recordId);                data.setFieldKey(t);                data.setFieldName(name);                data.setFieldSort(sort);                data.setCode(config.getCode());                data.setCodeSort(config.getSort());                data.setAmount(null);                budgetIndicatorDataMapper.insert(data);                list.add(data);            }            List<BudgetIndicatorData> indicatorData = list.stream().filter(f->f.getFieldKey().equals(t)).collect(Collectors.toList());            BudgetIndicatorDataVO vo=new BudgetIndicatorDataVO();            vo.setDataList(indicatorData);            vo.setCurrYear(currYear);            vo.setFieldKey(t);            vo.setReadonly(false);            vo.setLabel("");            vo.setLocked(false);            if(Objects.nonNull(indicatorData)&&indicatorData.size()>=0){                vo.setLocked(Objects.nonNull( indicatorData.get(0))&&Objects.nonNull( indicatorData.get(0).getLocked())&&  indicatorData.get(0).getLocked() >0?true:false);                name=Objects.nonNull( indicatorData.get(0))?indicatorData.get(0).getFieldName():"";                vo.setLabel(name+"("+(Objects.isNull(templates.get(0)) ?"": templates.get(0).getFieldUnitName())+")" );            }            voList.add(vo);        }        return success(voList);    }    @ApiOperation(value = "指标项目标数据列表")    @GetMapping("/getTargetIndicatorData/{currYear}")    public AjaxResult getTargetIndicatorData(@PathVariable("currYear") Integer currYear) {        //读取指标        List<BudgetIndicatorData> list =budgetIndicatorDataMapper.selectList(Wrappers.<BudgetIndicatorData>lambdaQuery().eq(BudgetIndicatorData::getFieldYear,currYear));        return success(list);    }    @ApiOperation(value = "保存指标项目标数据")    @PostMapping("/saveTargetIndicatorDataList")    public AjaxResult saveTargetIndicatorDataList(@RequestBody List<BudgetIndicatorDataVO> volist) {        if(CollectionUtil.isNotEmpty(volist) && volist.size()>0){            volist.forEach(vo->{                if(CollectionUtil.isEmpty( vo.getDataList())||vo.getDataList().size()==0){                    return;                }                vo.getDataList().forEach(t->{                    t.setUpdateTime(new Date());                    t.setUpdateUserId(SecurityUtils.getUserId());                    if( t.getId()>0){                        t.setCreateUserId(SecurityUtils.getUserId());                        t.setCreateTime(new Date());                        budgetIndicatorDataMapper.updateById(t);                    }else{                        budgetIndicatorDataMapper.insert(t);                    }                });            });        }        return success();    }    @ApiOperation(value = "保存指标项目标数据")    @PostMapping("/saveTargetIndicator")    public AjaxResult saveTargetIndicator(@RequestBody BudgetIndicatorDTO dto) {        List<BudgetIndicatorConfig> configList =dto.getConfigList();        List<BudgetIndicatorDataVO> volist =dto.getDataVoList();        List<BudgetIndicatorConfig> oldConfigList= budgetIndicatorConfigMapper.selectList(new LambdaQueryWrapper<BudgetIndicatorConfig>().eq(BudgetIndicatorConfig::getFieldYear,dto.getFieldYear()));        Map<String,BudgetIndicatorConfig> oldConfigMap=oldConfigList.stream().collect(Collectors.toMap(BudgetIndicatorConfig::getCode, item -> item, (o1, o2) -> o1));        if(CollUtil.isNotEmpty(configList)){           List<String> operLogConfigs = new ArrayList<>();            configList.forEach(t->{                t.setUpdateTime(new Date());                t.setUpdateUserId(SecurityUtils.getUserId());                if(Objects.nonNull(t.getId()) ){                    budgetIndicatorConfigMapper.updateById(t);                    BudgetIndicatorConfig oldConfig= oldConfigMap.get(t.getCode());                    if(Objects.nonNull(oldConfig)&&  !t.getName().equals(oldConfig.getName())){                        operLogConfigs.add("修改列：【"+oldConfig.getName()+"】变更为【" +t.getName()+"】");                    }                }else{                    t.setCreateUserId(SecurityUtils.getUserId());                    t.setCreateTime(new Date());                    t.setFieldYear(dto.getFieldYear());                    t.setIsTarget(0);                    operLogConfigs.add("新增列："+t.getName());                    budgetIndicatorConfigMapper.insert(t);                }            });            //更新            if(CollUtil.isNotEmpty(operLogConfigs)&&operLogConfigs.size()>0){                String  operLogConfig=String.join("<br/>", operLogConfigs);                operLogService.changeLog("BudgetIn", dto.getCompanyId(), operLogConfig);            }        }        if(CollUtil.isNotEmpty(volist)){            List<String> operLogDatas = new ArrayList<>();            Map<String,BudgetIndicatorConfig> newConfigMap=configList.stream().collect(Collectors.toMap(BudgetIndicatorConfig::getCode, item -> item, (o1, o2) -> o1));            volist.forEach(vo->{                if(CollectionUtil.isEmpty( vo.getDataList())||vo.getDataList().size()==0){                    return;                }                List<String>  logList=new ArrayList<>();                vo.getDataList().forEach(t->{                    BudgetIndicatorConfig newConfig= newConfigMap.get(t.getCode());                    t.setUpdateTime(new Date());                    t.setUpdateUserId(SecurityUtils.getUserId());                    if(Objects.nonNull(t.getId())&& t.getId()>0 ){                        BudgetIndicatorData oldData= budgetIndicatorDataMapper.selectById(t.getId());                        budgetIndicatorDataMapper.updateById(t);                        if( Objects.nonNull(oldData) &&  Objects.nonNull(newConfig)&&Objects.isNull(oldData.getAmount())&&Objects.nonNull(t.getAmount()) ){                            logList.add(newConfig.getName()+":[空值]变更为:["+t.getAmount()+"]");                        }                        if(Objects.nonNull(oldData) && Objects.nonNull(newConfig)&&Objects.isNull(t.getAmount())&&Objects.nonNull(oldData.getAmount()) ){                            logList.add(newConfig.getName()+":["+ oldData.getAmount()+"]变更为:[空值]");                        }                        if(Objects.nonNull(oldData) && Objects.nonNull(newConfig)&&Objects.nonNull(oldData.getAmount())  &&Objects.nonNull(t.getAmount()) && t.getAmount().compareTo(oldData.getAmount())!=0){                            logList.add(newConfig.getName()+":["+ oldData.getAmount()+"]变更为:["+t.getAmount()+"]");                        }                    }else{                        t.setCreateUserId(SecurityUtils.getUserId());                        t.setCreateTime(new Date());                        t.setFieldName(vo.getLabel());                        t.setFieldKey(vo.getFieldKey());                        t.setFieldYear(vo.getCurrYear());                        t.setCompanyId(dto.getCompanyId());                        budgetIndicatorDataMapper.insert(t);                        if(Objects.nonNull(newConfig)&&Objects.nonNull(t.getAmount()) ){                            logList.add(newConfig.getName()+":值为:["+t.getAmount()+"]");                        }//                        if(Objects.nonNull(newConfig)&&Objects.isNull(t.getAmount())){//                            logList.add(newConfig.getName()+":新添加为:[空值]");//                        }                    }                });                if(CollUtil.isNotEmpty(logList)&&logList.size()>0){                    operLogDatas.add("【"+vo.getLabel()+"】：<br/>"+String.join("<br/>",logList));                }            });            //更新            if(CollUtil.isNotEmpty(operLogDatas)&&operLogDatas.size()>0){                String  operLogData=String.join("<br/><br/>", operLogDatas);                operLogService.changeLog("BudgetIn", dto.getCompanyId(), operLogData);            }        }        return success();    }    @ApiOperation(value = "数据解锁")    @GetMapping("/unlockedIndicator/{recordId}/{currYear}")    public AjaxResult unlockedIndicator(@PathVariable("recordId") Long recordId, @PathVariable("currYear") Integer currYear) {        performanceMapper.lockedIndicator(BudgetIndicatorData.class.getAnnotation(TableName.class).value(), recordId, currYear, 0);        String operLog = "数据解锁";        operLogService.changeLog("BudgetIn", recordId, operLog);        return success();    }    @ApiOperation(value = "数据锁定")    @GetMapping("/lockedIndicator/{recordId}/{currYear}")    public AjaxResult lockedIndicator(@PathVariable("recordId") Long recordId, @PathVariable("currYear") Integer currYear) {        performanceMapper.lockedIndicator(BudgetIndicatorData.class.getAnnotation(TableName.class).value(), recordId, currYear, 1);        String operLog = "数据锁定";        operLogService.changeLog("BudgetIn", recordId, operLog);        return success();    }    @ApiOperation(value = "数据锁定")    @GetMapping("/locked/{recordId}/{currYear}")    public AjaxResult locked(@PathVariable("recordId") Long recordId, @PathVariable("currYear") Integer currYear) {        performanceMapper.locked(BudgetInYear.class.getAnnotation(TableName.class).value(), recordId, currYear, 1);        String operLog = "数据锁定";        operLogService.changeLog("BudgetIn", recordId, operLog);        return success();    }    @ApiOperation(value = "数据解锁")    @GetMapping("/unlocked/{recordId}/{currYear}")    public AjaxResult unlocked(@PathVariable("recordId") Long recordId, @PathVariable("currYear") Integer currYear) {        performanceMapper.locked(BudgetInYear.class.getAnnotation(TableName.class).value(), recordId, currYear, 0);        String operLog = "数据解锁";        operLogService.changeLog("BudgetIn", recordId, operLog);        return success();    }    @ApiOperation(value = "获取指定预算")    @GetMapping("/get/{level}/{recordId}/{currYear}")    public AjaxResult getByEdit(@PathVariable("level") Integer level, @PathVariable("recordId") Long recordId, @PathVariable("currYear") Integer currYear) {//        if (!performanceManager.dataRole(recordId)) {//            return AjaxResult.error("您没有查看权限");//        }        PerformanceVO budgetVO = budgetInYearService.getOrUpdate(level, recordId, currYear, null);        List<String> fieldKeys = indicatorDisplayLevelService.getFieldKeyByLevelId(recordId);        List<PerformanceData> performanceData = budgetVO.getBudgetDatas();        performanceData = performanceData.stream().filter(f->fieldKeys.contains(f.getKey())).collect(Collectors.toList());        budgetVO.setBudgetDatas(performanceData);        budgetVO.setLabel(performanceManager.getLabel(level, recordId));        return success(budgetVO);    }    @ApiOperation(value = "获取指定预算 + 下级")    @GetMapping("/getBySub/{level}/{recordId}/{currYear}")    public AjaxResult getBySub(@PathVariable("level") Integer level, @PathVariable("recordId") Long recordId, @PathVariable("currYear") Integer currYear) {//        if (!performanceManager.dataRole(recordId)) {//            return AjaxResult.error("您没有查看权限");//        }        PerformanceVO budget = budgetInYearService.getOrUpdate(level, recordId, currYear, null);        List<String> fieldKeys = indicatorDisplayLevelService.getFieldKeyByLevelId(recordId);        List<PerformanceData> performanceData = budget.getBudgetDatas();        performanceData = performanceData.stream().filter(f->fieldKeys.contains(f.getKey())).collect(Collectors.toList());        budget.setBudgetDatas(performanceData);        //子集 第三层级公司不显示下级        if (DataRole.currUserHasShowAllOrSub() && 3!=level) {            List<DeptVO> depts = userMapper.getChildDeptIds(recordId);            //递归组装            recursion(depts, recordId, currYear,budget,fieldKeys);        }        return success(budget);    }    @ApiOperation(value = "修改预算收入")    @PutMapping("/update/{level}/{recordId}/{currYear}")    public AjaxResult update(@PathVariable("level") Integer level, @PathVariable("recordId") Long recordId, @PathVariable("currYear") Integer currYear, @RequestBody PerformanceDTO budgetDTO) {//        if (!performanceManager.dataRole(recordId)) {//            return AjaxResult.error("您没有权限编辑此数据");//        }        return success(budgetInYearService.getOrUpdate(level, recordId, currYear, budgetDTO));    }    private void recursion(List<DeptVO> depts, Long parentId, Integer currYear, PerformanceVO performanceVO,List<String> fieldKeys){        if(null == parentId){            return;        }        List<DeptVO> entitys = depts.stream().filter(v -> v.getParentId().equals(parentId)).collect(Collectors.toList());        List<PerformanceVO> list = new ArrayList<>();        for(DeptVO entity : entitys){            PerformanceVO budgetVO = budgetInYearService.getOrUpdate(entity.getLevel(), entity.getDeptId(), currYear, null);            List<PerformanceData> performanceData = budgetVO.getBudgetDatas();            performanceData = performanceData.stream().filter(f->fieldKeys.contains(f.getKey())).collect(Collectors.toList());            budgetVO.setBudgetDatas(performanceData);            recursion(depts, entity.getDeptId(), currYear, budgetVO,fieldKeys);            list.add(budgetVO);        }        performanceVO.setChildBuudgets(list);    }    @ApiOperation(value = "修改考核指标配置")    @PostMapping("/SetItemConfig")    public AjaxResult SetItemConfig(@RequestBody List<PerformanceTemplate> template) {        /**         * 考核指标配置         */        String BIZ_BUDGET_IN = "BIZ_BUDGET_IN";        performanceManager.setTemplate(BIZ_BUDGET_IN,template);        return success();    }    @ApiOperation(value = "获取考核指标配置")    @GetMapping("/GetItemConfig")    public AjaxResult GetItemConfig() {        /**         * 考核指标配置         */        String BIZ_BUDGET_IN = "BIZ_BUDGET_IN";        return success(performanceManager.getTemplate(BIZ_BUDGET_IN));    }//    @ApiOperation(value = "获取层级树")//    @GetMapping("/GetIndicatorDisplayLevelTree")//    public AjaxResult GetIndicatorDisplayLevelTree() {//        /**//         * 考核指标配置//         *///        String BIZ_BUDGET_IN = "BIZ_BUDGET_IN";//        return success(performanceManager.getTemplate(BIZ_BUDGET_IN));//    }    @ApiOperation(value = "获取指标展示层级数据")    @GetMapping("/GetIndicatorDisplayLevel/{fieldKey}")    public AjaxResult GetIndicatorDisplayLevel(@PathVariable("fieldKey") String fieldKey) {        return success(indicatorDisplayLevelService.getIndicatorDisplayLevelIds(fieldKey));    }    @ApiOperation(value = "更新指标展示层级数据")    @PostMapping("/SetIndicatorDisplayLevel/{fieldKey}")    public AjaxResult SetIndicatorDisplayLevel(@PathVariable("fieldKey") String fieldKey,@RequestBody List<Long> ids) {        if(fieldKey != null && ids != null){            ids = ids.stream().filter(f->f >= 0).collect(Collectors.toList());            indicatorDisplayLevelService.setIndicatorDisplayLevelIds(fieldKey,ids);        }        return success();    }    @ApiOperation(value = "获取指标层级树数据")    @GetMapping("/IndicatorDisplayLevelTree")    public AjaxResult IndicatorDisplayLevelTree() {        return success(userService.getSelectDeptTree());    }    @ApiOperation(value = "是否可删除指标")    @GetMapping("/ifCanDelIndicator/{fieldKey}")    public AjaxResult ifCanDelIndicator(@PathVariable("fieldKey") String fieldKey) {        return success(budgetInYearService.ifCanDelIndicator(fieldKey));    }}