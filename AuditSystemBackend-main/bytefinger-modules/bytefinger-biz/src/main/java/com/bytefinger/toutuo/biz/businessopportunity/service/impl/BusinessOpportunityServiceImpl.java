package com.bytefinger.toutuo.biz.businessopportunity.service.impl;import cn.hutool.core.codec.Base64;import cn.hutool.core.date.DateTime;import cn.hutool.core.util.CharsetUtil;import cn.hutool.core.util.StrUtil;import cn.hutool.crypto.asymmetric.KeyType;import cn.hutool.crypto.asymmetric.RSA;import cn.hutool.http.HttpUtil;import com.alibaba.fastjson2.JSON;import com.alibaba.fastjson2.JSONObject;import com.baomidou.mybatisplus.annotation.TableField;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.constant.Constants;import com.bytefinger.common.core.exception.ServiceException;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.core.utils.StringUtils;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.api.biz.user.domain.dto.LoginUser;import com.bytefinger.toutuo.biz.businessopportunity.config.QlmProperties;import com.bytefinger.toutuo.biz.businessopportunity.domain.BusinessOpportunity;import com.bytefinger.toutuo.biz.businessopportunity.domain.BusinessOpportunityArea;import com.bytefinger.toutuo.biz.businessopportunity.domain.BusinessOpportunityUnlock;import com.bytefinger.toutuo.biz.businessopportunity.domain.BusinessOpportunityUnlockCompany;import com.bytefinger.toutuo.biz.businessopportunity.domain.vo.*;import com.bytefinger.toutuo.biz.businessopportunity.mapper.BusinessOpportunityMapper;import com.bytefinger.toutuo.biz.businessopportunity.mapper.BusinessOpportunityUnlockCompanyMapper;import com.bytefinger.toutuo.biz.businessopportunity.mapper.BusinessOpportunityUnlockMapper;import com.bytefinger.toutuo.biz.businessopportunity.service.IBusinessOpportunityService;import com.bytefinger.toutuo.biz.customer.domain.Customer;import com.bytefinger.toutuo.biz.customer.mapper.CustomerMapper;import com.bytefinger.toutuo.biz.customer.service.ICustomerService;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectExpand;import com.bytefinger.toutuo.biz.project.mapper.ProjectExpandMapper;import com.bytefinger.toutuo.biz.user.domain.SysPost;import com.bytefinger.toutuo.biz.user.mapper.SysPostMapper;import io.swagger.annotations.ApiModelProperty;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;/** * <p> * 商机 服务实现类 * </p> * * @author chengwei * @since 2023-12-17 */@Slf4j@Service@AllArgsConstructorpublic class BusinessOpportunityServiceImpl extends ServiceImpl<BusinessOpportunityMapper, BusinessOpportunity> implements IBusinessOpportunityService {    private final ProjectExpandMapper projectExpandMapper;    private final CustomerMapper customerMapper;    private final QlmProperties qlmProperties;    private final BusinessOpportunityUnlockMapper businessOpportunityUnlockMapper;    private final BusinessOpportunityUnlockCompanyMapper businessOpportunityUnlockCompanyMapper;    private final SysPostMapper postMapper;    private final ICustomerService customerService;    //调千里马接口获取实时数据    @Override    public BusinessOpportunityResponeData getQlmRealTimeList( BusinessOpportunityRequestParam param) {        String url=qlmProperties.getRealTimeListUrl();        String system=qlmProperties.getSystem() ;        //TODO 获取千里马数据        //业务json        JSONObject requestParam = new JSONObject();        requestParam.put("pageSize", param.getPageSize());        requestParam.put("pageNo", param.getPageNo());        if (Objects.nonNull(param.getKeyWord()) ){            requestParam.put("keyWord", param.getKeyWord());        }        if (!CollectionUtils.isEmpty(param.getUpdateTime()) && param.getUpdateTime().size() > 0){            requestParam.put("updateTime", param.getUpdateTime());        }        if (!CollectionUtils.isEmpty(param.getAmount()) && param.getAmount().size() > 0){            requestParam.put("amount", param.getAmount());        }        if (!CollectionUtils.isEmpty(param.getCity()) && param.getCity().size() > 0){            param.setProvince(null);            requestParam.put("city", param.getCity());        }        if (!CollectionUtils.isEmpty(param.getProvince()) && param.getProvince().size() > 0){            requestParam.put("province", param.getProvince());        }        if (!CollectionUtils.isEmpty(param.getNoticeSegmentType()) && param.getNoticeSegmentType().size() > 0){            requestParam.put("noticeSegmentType", param.getNoticeSegmentType());        }        if (!CollectionUtils.isEmpty(param.getIndustryClass()) && param.getIndustryClass().size() > 0){            requestParam.put("industryClass", param.getIndustryClass());        }        if (!CollectionUtils.isEmpty(param.getPropertyType()) && param.getPropertyType().size() > 0){            requestParam.put("propertyType", param.getPropertyType());        }        if (!CollectionUtils.isEmpty(param.getTagType()) && param.getTagType().size() > 0){            requestParam.put("tagType", param.getTagType());        }        if (!CollectionUtils.isEmpty(param.getProGid()) && param.getProGid().size() > 0){            List<Integer>  noticeTypeList = param.getProGid().stream().filter(num -> num > 5).collect(Collectors.toList());            List<Integer>  proGidList = param.getProGid().stream().filter(num -> num <= 5).collect(Collectors.toList());            param.setNoticeSegmentType(noticeTypeList);            requestParam.put("proGid",proGidList);        }        if (!CollectionUtils.isEmpty(param.getNoticeSegmentType()) && param.getNoticeSegmentType().size() > 0){            requestParam.put("noticeSegmentType", param.getNoticeSegmentType());        }        if (!CollectionUtils.isEmpty(param.getTenderFirstCategoryList()) && param.getTenderFirstCategoryList().size() > 0){            requestParam.put("tenderFirstCategoryList", param.getTenderFirstCategoryList());        }        if (!CollectionUtils.isEmpty(param.getTenderSecondCategoryList()) && param.getTenderSecondCategoryList().size() > 0){            requestParam.put("tenderSecondCategoryList", param.getTenderSecondCategoryList());        }        //签名json 包含timeStamp，secretKey        String resultJson= qlmEncrypt(requestParam);        String bodys = HttpUtil.createPost(url).contentType("application/json").header("secretUser",system).header("secretContent",resultJson).execute().body();        log.info("千里马"+url+"接口-返回"+  bodys);        BusinessOpportunityResponeData data=new BusinessOpportunityResponeData();        BusinessOpportunityRespone respone= JSON.parseObject(bodys,BusinessOpportunityRespone.class);        if(200==respone.getCode() && Objects.nonNull(respone.getData()) ){            data= respone.getData() ;            if (!CollectionUtils.isEmpty(data.getList()) && data.getList().size() > 0) {                data.getList().forEach(t->{                    //是否创建项目                    int count= projectExpandMapper.selectCount(Wrappers.<ProjectExpand>lambdaQuery().eq(ProjectExpand::getOpportunityId, t.getOpportunityId()));                    t.setIsCreated(count> 0?"SHI":"FOU" );                    t.setLockStatusStr("1".equals(t.getLockStatus())?"已解锁":"未解锁" );                    //如果已经添加过客户，返回标志，列表就不显示添加客户按钮                    int countCust= customerMapper.selectCount(Wrappers.<Customer>lambdaQuery().eq(Customer::getCustomerName, t.getTenderUnit()));                    t.setHasCustomer(countCust> 0);                });            }        }else{            //返回失败时：            // {            //    "code": 410104,            //    "msg": "【物业商机库】剩余可用额度为: *条, 您当前选中的未解锁商机已超出可用额度, 请您调整选中商机后重新操作",            //    "data" null            //}            log.info("商机千里马-失败实时商机返回："+ bodys);        }        return data;    }    //调千里马接口获取存量数据    @Override    public  BusinessOpportunityResponeData getQlmStockList( BusinessOpportunityRequestParam param) {        String url=qlmProperties.getStockListUrl();        String system=qlmProperties.getSystem() ;         //业务json        JSONObject requestParam = new JSONObject();        requestParam.put("pageSize", param.getPageSize());        requestParam.put("pageNo", param.getPageNo());        if (Objects.nonNull(param.getKeyWord()) ){            requestParam.put("keyWord", param.getKeyWord());        }        if (!CollectionUtils.isEmpty(param.getExpireDateTime()) && param.getExpireDateTime().size() > 0){            List<Long> expireTime=new ArrayList<>();            expireTime.add(DateUtils.parseDate(param.getExpireDateTime().get(0)).getTime()/1000 );            expireTime.add(DateUtils.parseDate(param.getExpireDateTime().get(1)).getTime()/1000 );            requestParam.put("expireTime", expireTime);        }        if (Objects.nonNull(param.getStartAmount())  || Objects.nonNull(param.getEndAmount())){            List<Integer> amount=new ArrayList<>();            amount.add(Objects.nonNull(param.getStartAmount())? param.getStartAmount():0 ) ;            amount.add(Objects.nonNull(param.getEndAmount())? param.getEndAmount():2000000000 ) ;            requestParam.put("amount", amount);        }        if (!CollectionUtils.isEmpty(param.getCity()) && param.getCity().size() > 0){            param.setProvince(null);            requestParam.put("city", param.getCity());        }        if (!CollectionUtils.isEmpty(param.getProvince()) && param.getProvince().size() > 0){            requestParam.put("province", param.getProvince());        }        if (!CollectionUtils.isEmpty(param.getNoticeSegmentType()) && param.getNoticeSegmentType().size() > 0){            requestParam.put("noticeSegmentType", param.getNoticeSegmentType());        }        if (!CollectionUtils.isEmpty(param.getIndustryClass()) && param.getIndustryClass().size() > 0){            requestParam.put("industryClass", param.getIndustryClass());        }        if (!CollectionUtils.isEmpty(param.getProGid()) && param.getProGid().size() > 0){            requestParam.put("proGid", param.getProGid());        }        if (!CollectionUtils.isEmpty(param.getPropertyType()) && param.getPropertyType().size() > 0){            requestParam.put("propertyType", param.getPropertyType());        }        if (!CollectionUtils.isEmpty(param.getTagType()) && param.getTagType().size() > 0){            requestParam.put("tagType", param.getTagType());        }        if (!CollectionUtils.isEmpty(param.getBidingTypeList()) && param.getBidingTypeList().size() > 0){            requestParam.put("bidingTypeList", param.getBidingTypeList());        }        if (!CollectionUtils.isEmpty(param.getTenderFirstCategoryList()) && param.getTenderFirstCategoryList().size() > 0){            requestParam.put("tenderFirstCategoryList", param.getTenderFirstCategoryList());        }        if (!CollectionUtils.isEmpty(param.getTenderSecondCategoryList()) && param.getTenderSecondCategoryList().size() > 0){            requestParam.put("tenderSecondCategoryList", param.getTenderSecondCategoryList());        }        //签名json 包含timeStamp，secretKey        BusinessOpportunityResponeData  data=new BusinessOpportunityResponeData();        String resultJson= qlmEncrypt(requestParam);        String bodys = HttpUtil.createPost(url).contentType("application/json").header("secretUser",system).header("secretContent",resultJson).execute().body();        log.info("千里马"+url+"接口-返回"+  bodys);        BusinessOpportunityRespone respone= JSON.parseObject(bodys,BusinessOpportunityRespone.class);        if(200==respone.getCode() && Objects.nonNull(respone.getData()) ){            data =respone.getData() ;            if (!CollectionUtils.isEmpty(data.getList()) && data.getList().size() > 0) {                data.getList().forEach(t->{                    //是否创建项目，查询项目扩展表                    int count= projectExpandMapper.selectCount(Wrappers.<ProjectExpand>lambdaQuery().eq(ProjectExpand::getOpportunityId, t.getOpportunityId()));                    t.setIsCreated(count> 0?"SHI":"FOU" );                    t.setLockStatusStr("1".equals(t.getLockStatus())?"已解锁":"未解锁" );                    //如果已经添加过客户，返回标志，列表就不显示添加客户按钮                    int countCust= customerMapper.selectCount(Wrappers.<Customer>lambdaQuery().eq(Customer::getCustomerName, t.getTenderUnit()));                    t.setHasCustomer(countCust> 0);                });            }        }else{            //返回失败时：            // {            //    "code": 410104,            //    "msg": "【物业商机库】剩余可用额度为: *条, 您当前选中的未解锁商机已超出可用额度, 请您调整选中商机后重新操作",            //    "data" null            //}            log.info("商机千里马-失败-存量商机返回："+ bodys);        }        return data;    }    /**     * 获取千里马接口实时明细     *     * @return     */    @Override    public  List<BusinessOpportunity> getQlmRealTimeDetail(String opportunityId,String lockStatus) {        String url=qlmProperties.getRealTimeDetailUrl();        String system=qlmProperties.getSystem() ;        //TODO 获取千里马数据        //业务json        JSONObject requestParam = new JSONObject();        //商机ID数组，最多十条        List<String> oppIds= new ArrayList<>();        oppIds.add(opportunityId);        requestParam.put("opportunityId",oppIds );        String resultJson= qlmEncrypt(requestParam);        String bodys = HttpUtil.createPost(url).contentType("application/json").header("secretUser",system).header("secretContent",resultJson).execute().body();        log.info("千里马"+url+"接口-返回"+  bodys);        List<BusinessOpportunity> list=new ArrayList<>();        BusinessOpportunityRespone respone= JSON.parseObject(bodys,BusinessOpportunityRespone.class);        if(200==respone.getCode() && Objects.nonNull(respone.getData()) ){            lockCalc( lockStatus,"0" );            list =respone.getData().getList();            if (!CollectionUtils.isEmpty(list) && list.size() > 0) {                list.forEach(t->{                    Double num =transForBiddingAmountNum(t.getBiddingAmount()) ;                    t.setBiddingAmountNum( num );                    Double biddingBudget =transForBiddingAmountNum(t.getBiddingBudget()) ;                    t.setBiddingBudgetNum( biddingBudget );                    List<BusinessOpportunityArea>  areaList=businessOpportunityUnlockMapper.getQlmAreaList();                    Map<Long,BusinessOpportunityArea> areaMap =areaList.stream().collect(  Collectors.toMap(BusinessOpportunityArea::getId, (p) -> p));                    if(Objects.nonNull( t.getProvince()) ){                        t.setProvinceStr( areaMap.get( Long.valueOf(t.getProvince())).getName());                    }                    if(Objects.nonNull( t.getCity())){                        t.setCityStr( areaMap.get( Long.valueOf(t.getCity()) ).getName() );                    }                });            }        }else{            //返回失败时：            // {            //    "code": 410104,            //    "msg": "【物业商机库】剩余可用额度为: *条, 您当前选中的未解锁商机已超出可用额度, 请您调整选中商机后重新操作",            //    "data" null            //}            log.info("商机千里马-失败-实时商机返回："+ bodys);        }        return list;    }    /**     * 获取千里马接口存量明细     *     * @return     */    @Override    public  List<BusinessOpportunity> getQlmStockDetail(String opportunityId,String lockStatus) {        String url=qlmProperties.getStockDetailUrl();        String system=qlmProperties.getSystem() ;        //TODO 获取千里马数据         //业务json        JSONObject requestParam = new JSONObject();        //商机ID数组，最多十条        List<String> oppIds= new ArrayList<>();        oppIds.add(opportunityId);        requestParam.put("opportunityId",oppIds );        //签名json 包含timeStamp，secretKey        List<BusinessOpportunity> list=new ArrayList<>();        String resultJson= qlmEncrypt(requestParam);        String bodys = HttpUtil.createPost(url).contentType("application/json").header("secretUser",system).header("secretContent",resultJson).execute().body();        log.info("千里马"+url+"接口-返回"+  bodys);        BusinessOpportunityRespone respone= JSON.parseObject(bodys,BusinessOpportunityRespone.class);        if(200==respone.getCode() && Objects.nonNull(respone.getData()) ){            lockCalc( lockStatus ,"1");            list =respone.getData().getList();            if (!CollectionUtils.isEmpty(list) && list.size() > 0) {                list.forEach(t->{                    Double num =transForBiddingAmountNum(t.getBiddingAmount()) ;                    t.setBiddingAmountNum( num );                    List<BusinessOpportunityArea>  areaList=businessOpportunityUnlockMapper.getQlmAreaList();                    Map<Long,BusinessOpportunityArea> areaMap =areaList.stream().collect(  Collectors.toMap(BusinessOpportunityArea::getId, (p) -> p));                    if(Objects.nonNull( t.getProvince()) ){                        t.setProvinceStr( areaMap.get( Long.valueOf(t.getProvince())).getName());                    }                    if(Objects.nonNull( t.getCity())){                        t.setCityStr( areaMap.get( Long.valueOf(t.getCity()) ).getName() );                    }                });            }        }else{            //返回失败时：            // {            //    "code": 410104,            //    "msg": "【物业商机库】剩余可用额度为: *条, 您当前选中的未解锁商机已超出可用额度, 请您调整选中商机后重新操作",            //    "data" null            //}            log.info("商机千里马-失败-存量商机返回："+ bodys);        }        return list;    }    /**     * 解锁计算，未解锁的加一     *     * @param lockStatus 解锁状态：0未解锁，1已解锁     * @param type 类型：0实时商机解锁，1存量商机解锁，2单位解锁     * @return     */    public void lockCalc(String lockStatus,String type){        if("0".equals(lockStatus)){            //未解锁的每次加一            List<BusinessOpportunityUnlock> unlockList =businessOpportunityUnlockMapper.getunlockCountToday();            BusinessOpportunityUnlock unlock= new BusinessOpportunityUnlock();            if(!CollectionUtils.isEmpty(unlockList) && unlockList.size() >= 0){                unlock=unlockList.get(0);                if("0".equals(type)  ){                    unlock.setUnlockBussinessCount(unlock.getUnlockBussinessCount()+1);                }else  if("1".equals(type)  ){                    unlock.setUnlockStockCount(unlock.getUnlockStockCount()+1);                }else{                    unlock.setUnlockCompanyCount(unlock.getUnlockCompanyCount()+1);                }                businessOpportunityUnlockMapper.updateById(unlock);            }else{                unlock.setUnlockDate(new Date());                if("0".equals(type)  ){                    unlock.setUnlockBussinessCount(1);                }else  if("1".equals(type)  ){                    unlock.setUnlockStockCount(1);                }else{                    unlock.setUnlockCompanyCount(1);                }                businessOpportunityUnlockMapper.insert(unlock);            }        }    }    /**     * 单位是否已经解锁     *     * @return     */    @Override    public Boolean isUnLock(String company  ){        return businessOpportunityUnlockCompanyMapper.selectCount(Wrappers.<BusinessOpportunityUnlockCompany>lambdaQuery().eq(BusinessOpportunityUnlockCompany::getCompany, company) )>0;    }    /**     * 获取解锁统计     *     * @return     */    @Override    public BusinessOpportunityUnlock getUnlockData(){        BusinessOpportunityUnlock unlock= businessOpportunityUnlockMapper.getUnlockCountSum();        Integer bussinessAllCount=qlmProperties.getUnlockBussinessAllCount();        Integer stockAllCount=qlmProperties.getUnlockStockAllCount() ;        Integer companyAllCount=qlmProperties.getUnlockCompanyAllCount();        unlock.setUnlockBussinessAllCount(Objects.nonNull(bussinessAllCount)? bussinessAllCount:0);        unlock.setUnlockStockAllCount(Objects.nonNull(stockAllCount)? stockAllCount:0);        unlock.setUnlockCompanyAllCount(Objects.nonNull(companyAllCount)? companyAllCount:0);        return  unlock;    }    /**     * 千里马-返回金额字符串转为数字     *     * @return     */    public static Double transForBiddingAmountNum(String amountNum){        if (StrUtil.isBlank(amountNum) || StrUtil.equals(amountNum, "未公示")) {            return 0.0;        }        try {            if (!amountNum.contains("元")) {                return Double.parseDouble(amountNum);            }            if (amountNum.endsWith("万元")) {                BigDecimal decimal = new BigDecimal(amountNum.substring(0, amountNum.indexOf("万元")));                return decimal.doubleValue() * 10000;            }            if (amountNum.endsWith("亿元")) {                BigDecimal decimal = new BigDecimal(amountNum.substring(0, amountNum.indexOf("亿元")));                return decimal.doubleValue() * 100000000;            }            BigDecimal decimal = new BigDecimal(amountNum.substring(0, amountNum.indexOf("元")));            return decimal.doubleValue();        } catch (Exception exception) {            log.info("出现其他金额脏数据{}",amountNum);            return 0.0;        }    }    /**     * 千里马中国图     *     * @return     */    @Override    public List<BusinessOpportunityArea> getQlmAreaList(String type) {        if ("Province".equals(type)) {            return businessOpportunityUnlockMapper.getQlmAreaProvinceList();        }        if ("City".equals(type)) {           return businessOpportunityUnlockMapper.getQlmAreaCityList();        }        return businessOpportunityUnlockMapper.getQlmAreaList();    }    /**     * 千里马中国图     *     * @return     */    @Override    public List<BusinessOpportunityArea> getQlmAreaListByParentId(String parentId) {        if(StringUtils.isBlank(parentId)){            return businessOpportunityUnlockMapper.getQlmAreaList();        }        return businessOpportunityUnlockMapper.getQlmAreaListByParentId(parentId);    }    /**     * 千里马中国图     *     * @return     */    @Override    public List<BusinessOpportunityArea> getQlmAreaListByParentIds(List<String> parentIds) {        if (!CollectionUtils.isEmpty(parentIds) && parentIds.size() > 0){            return businessOpportunityUnlockMapper.getQlmAreaListByParentIds(parentIds);        }        return businessOpportunityUnlockMapper.getQlmAreaList();    }    /**     * 根据userCode获取千里马接口token     *     * @return token     */    @Override    public String getQlmToken(String userCode, String dataId){        String url = qlmProperties.getOpenCodeUrl();        String system = qlmProperties.getSystem();        //TODO 获取千里马数据        //业务json        JSONObject requestParam = new JSONObject();//        requestParam.put("userId", 1000009050);        String ybbUser="";        LoginUser loginUser = SecurityUtils.getLoginUser();        if(Objects.nonNull(loginUser.getPostId())){            SysPost post =postMapper.selectPostById(loginUser.getPostId());            if(Objects.nonNull(post.getYbbUser())){                ybbUser=post.getYbbUser();            }        }        if(loginUser.getSysUser().isAdmin()){            //admin账号没有角色，不做处理        }        if(StringUtils.isBlank(ybbUser) ){            return "";        }        requestParam.put("userName", ybbUser);        requestParam.put("dataId", dataId);        String resultJson = qlmEncrypt(requestParam);        String bodys = HttpUtil.createPost(url).contentType("application/json").header("secretUser", system).header("secretContent", resultJson).execute().body();        log.info("千里马"+url+"接口-返回"+  bodys);        BusinessOpportunityTokenRespone respone= JSON.parseObject(bodys,BusinessOpportunityTokenRespone.class);        if(200==respone.getCode() && Objects.nonNull(respone.getData()) ){            return "&openCode="+respone.getData();        }        return "";        //return bodys;//        BusinessOpportunityRespone respone= JSON.parseObject(bodys,BusinessOpportunityRespone.class);//        if(200==respone.getCode() && Objects.nonNull(respone.getData()) ){//            return "&openCode="+respone.getData();//        }else{//            //返回失败时：//            // {//            //    "code": 410104,//            //    "msg": "【物业商机库】剩余可用额度为: *条, 您当前选中的未解锁商机已超出可用额度, 请您调整选中商机后重新操作",//            //    "data" null//            //}//            log.info("商机千里马-失败-返回token："+ bodys);//        }//        return "";    }    /**     * 获取千里马接口存量列表数据     *     * @return     */    @Override    public Customer saveQlmCompanyCustomer(String companyName){        Customer customer=new Customer();        if(customerMapper.selectCount(Wrappers.<Customer>lambdaQuery().eq(Customer::getCustomerName, companyName))>0){           List<Customer> customers=customerMapper.selectList(Wrappers.<Customer>lambdaQuery().eq(Customer::getCustomerName, companyName));           return customers.get(0);        }        String url = qlmProperties.getCompanyUrl();        String system = qlmProperties.getSystem();        //TODO 获取千里马数据        //业务json        JSONObject requestParam = new JSONObject();        //传固定值：1        requestParam.put("pageSize", "10");        requestParam.put("pageNo", "1");        requestParam.put("keyWordType", 1);        requestParam.put("keyWord", companyName);        String resultJson = qlmEncrypt(requestParam);        String bodys = HttpUtil.createPost(url).contentType("application/json").header("secretUser", system).header("secretContent", resultJson).execute().body();        log.info("千里马"+url+"接口-返回"+  bodys);        BusinessOpportunityCompanyRespone respone = JSON.parseObject(bodys, BusinessOpportunityCompanyRespone.class);        if (200 == respone.getCode() && Objects.nonNull(respone.getData())) {            if( Objects.nonNull(respone.getData().getList())){                //如果客户已解锁，不需要重新添加次数                if(!isUnLock(companyName)){                    lockCalc( "0" ,"2");                    //如果本次解锁，则添加到数据库保存                    BusinessOpportunityUnlockCompany unlockCompany= new BusinessOpportunityUnlockCompany();                    unlockCompany.setCompany(companyName);                    unlockCompany.setUnlockDate(new Date());                    unlockCompany.setCompanyType("业主单位");                    businessOpportunityUnlockCompanyMapper.insert(unlockCompany);                }                CompanyRespone companyRespone  = respone.getData().getList().get(0);                customer.setCustomerName(companyName);                customer.setSource("YING_BIAO_BAO");                customer.setLegalEntity(companyRespone.getLegalPerson());                customer.setRegisteredCapital(companyRespone.getActualCapital());                customer.setPersonnelSize(companyRespone.getStaffNumRange());                customer.setEstablishmentDate(Objects.nonNull(companyRespone.getEstablishTime())? DateUtils.parseDate(companyRespone.getEstablishTime()) :null );                customer.setWebsite(companyRespone.getOfficialWebsite());                customer.setRegisteredAddress(companyRespone.getAddress());                customer.setCompanyIntroduction(companyRespone.getCompanyProfile());                if(customerMapper.selectCount(Wrappers.<Customer>lambdaQuery().eq(Customer::getCustomerName, companyName))==0){                    customer.setCustomerNo( customerService.getCustomerNo());                    customerMapper.insert(customer);                }            }else{                //如果返回data为空，提示千里马无法获取失败                throw new ServiceException("无法获取赢标宝("+companyName+")单位数据");            }        } else {            //返回失败时：            // {            //    "code": 410104,            //    "msg": "【物业商机库】剩余可用额度为: *条, 您当前选中的未解锁商机已超出可用额度, 请您调整选中商机后重新操作",            //    "data" null            //}            //log.info("商机千里马-失败-业主单位返回：" + bodys);            throw new ServiceException("无法获取赢标宝("+companyName+")单位数据");        }        return customer;    }    /**     * 获取千里马接口存量列表数据     *     * @return     */    @Override    public Customer getQlmCompany(String companyName){        Customer customer=new Customer();        String url = qlmProperties.getCompanyUrl();        String system = qlmProperties.getSystem();        //TODO 获取千里马数据        //业务json        JSONObject requestParam = new JSONObject();        //传固定值：1        requestParam.put("pageSize", "10");        requestParam.put("pageNo", "1");        requestParam.put("keyWordType", 1);        requestParam.put("keyWord", companyName);        String resultJson = qlmEncrypt(requestParam);        String bodys = HttpUtil.createPost(url).contentType("application/json").header("secretUser", system).header("secretContent", resultJson).execute().body();        log.info("千里马"+url+"接口-返回"+  bodys);        BusinessOpportunityCompanyRespone respone = JSON.parseObject(bodys, BusinessOpportunityCompanyRespone.class);        if (200 == respone.getCode() && Objects.nonNull(respone.getData())) {            if( Objects.nonNull(respone.getData().getList())){                //如果客户已解锁，不需要重新添加次数                if(!isUnLock(companyName)){                    lockCalc( "0" ,"2");                    //如果本次解锁，则添加到数据库保存                    BusinessOpportunityUnlockCompany unlockCompany= new BusinessOpportunityUnlockCompany();                    unlockCompany.setCompany(companyName);                    unlockCompany.setUnlockDate(new Date());                    unlockCompany.setCompanyType("业主单位");                    businessOpportunityUnlockCompanyMapper.insert(unlockCompany);                }                CompanyRespone companyRespone  = respone.getData().getList().get(0);                customer.setCustomerName(companyName);                customer.setSource("YING_BIAO_BAO");                customer.setLegalEntity(companyRespone.getLegalPerson());                customer.setRegisteredCapital(companyRespone.getActualCapital());                customer.setPersonnelSize(companyRespone.getStaffNumRange());                customer.setEstablishmentDate(Objects.nonNull(companyRespone.getEstablishTime())? DateUtils.parseDate(companyRespone.getEstablishTime()) :null );                customer.setWebsite(companyRespone.getOfficialWebsite());                customer.setRegisteredAddress(companyRespone.getAddress());                customer.setCompanyIntroduction(companyRespone.getCompanyProfile());            }else{                //如果返回data为空，提示千里马无法获取失败                throw new ServiceException("无法获取赢标宝("+companyName+")单位数据");            }        } else {            //返回失败时：            // {            //    "code": 410104,            //    "msg": "【物业商机库】剩余可用额度为: *条, 您当前选中的未解锁商机已超出可用额度, 请您调整选中商机后重新操作",            //    "data" null            //}            //log.info("商机千里马-失败-业主单位返回：" + bodys);            throw new ServiceException("无法获取赢标宝("+companyName+")单位数据");        }        return customer;    }    /**     * 千里马加密     *     * @param requestParam     * @return     */    public String qlmEncrypt (JSONObject requestParam){        String publicKey = qlmProperties.getPublicKey();        //TODO 获取千里马数据        RSA rsa = new RSA(null, publicKey);        //签名json 包含timeStamp，secretKey        JSONObject encrypt = new JSONObject();        encrypt.put("timeStamp", new Date()); //请求发起时间        encrypt.put("requestParam", requestParam);        //对签名json 利用公钥加密，放入secretKey        String encryptJson = JSONObject.toJSONString(encrypt);        String encryptStr = rsa.encryptHex(StrUtil.bytes(encryptJson, CharsetUtil.CHARSET_UTF_8), KeyType.PublicKey);        //进行base64编码放入请求头中发送请求        String resultJson = Base64.encode(encryptStr);        log.info("千里马签名：加密前{}，加密后：{}", encrypt, resultJson);        return resultJson;    }    /**     * 查询全部数据     *     * @param queryPage     * @return     */    @DataFill    @Override    public IPage page (QueryPage queryPage){        return page(queryPage.toPage(), queryPage.getWrapper());    }}