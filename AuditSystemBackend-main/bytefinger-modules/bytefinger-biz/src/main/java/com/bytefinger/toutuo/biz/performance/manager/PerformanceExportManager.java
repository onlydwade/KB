package com.bytefinger.toutuo.biz.performance.manager;import cn.hutool.core.bean.BeanUtil;import cn.hutool.core.collection.CollUtil;import com.alibaba.fastjson2.JSON;import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.exception.ServiceException;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.core.utils.ServletUtils;import com.bytefinger.common.core.utils.StringUtils;import com.bytefinger.common.core.web.domain.vo.DeptVO;import com.bytefinger.common.core.web.domain.vo.UserVO;import com.bytefinger.common.security.auth.AuthUtil;import com.bytefinger.common.security.utils.DictUtils;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.common.security.utils.SysConfigUtils;import com.bytefinger.toutuo.api.biz.user.domain.SysDept;import com.bytefinger.toutuo.api.system.core.domain.SysDictData;import com.bytefinger.toutuo.biz.operlog.service.IOperLogService;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceBO;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceList;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceMonth;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceYear;import com.bytefinger.toutuo.biz.performance.domain.excel.*;import com.bytefinger.toutuo.biz.performance.domain.template.PerformanceTemplate;import com.bytefinger.toutuo.biz.performance.domain.vo.*;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectAchievement;import com.bytefinger.toutuo.biz.user.mapper.SysDeptMapper;import com.bytefinger.toutuo.biz.user.mapper.UserMapper;import com.bytefinger.toutuo.common.constants.BizConstant;import com.bytefinger.toutuo.common.enums.DataRole;import com.bytefinger.toutuo.common.util.ExcelUtil;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.servlet.http.HttpServletResponse;import java.math.BigDecimal;import java.text.DecimalFormat;import java.util.*;import java.util.stream.Collectors;@Service@AllArgsConstructor@Slf4jpublic class PerformanceExportManager {    public static void exportActualSummary(HttpServletResponse response, List<Project> records, List<ProjectAchievement> projectAchievementAllList) {        //封装导出类        List<ActualInExcelSummaryHeadVO> excels = new ArrayList<>();        //名称        List<String> headNameList = new ArrayList<>();        if(CollUtil.isNotEmpty(records)){            headNameList.add("大区");            headNameList.add("归属单位");            headNameList.add("项目名称");            headNameList.add("业务板块");            headNameList.add("拓展模式");            headNameList.add("招标类型");            headNameList.add("业态");            headNameList.add("是否为计算业绩");            headNameList.add("是否为续签项目");            headNameList.add("合同总金额(元)");            headNameList.add("合同年度金额(元)");            headNameList.add("当年转化金额(元)");            headNameList.add("增量合同总金额(元)");            headNameList.add("增量合同年度金额(元)");            headNameList.add("增量当年转化金额(元)");            headNameList.add("建筑面积 (㎡)");            headNameList.add("签约日期");            headNameList.add("服务开始时间");            headNameList.add("合同到期时间");            headNameList.add("拟服务期(月)");            headNameList.add("拓展单位");            headNameList.add("业绩分配比例（%）");            headNameList.add("业绩分配描述");            headNameList.add("甲方单位名称");            headNameList.add("乙方单位名称");            headNameList.add("服务内容");            headNameList.add("省份");            headNameList.add("城市");            headNameList.add("合同下载地址");            //查找项目拓展单位数据            records.forEach(t->{                ActualInExcelSummaryHeadVO excelRow = new ActualInExcelSummaryHeadVO();                excelRow.setRegionName(t.getRegionName());                excelRow.setCompanyName(t.getCompanyName());                excelRow.setProjectName(t.getProjectName());                excelRow.setExpansionMode(Objects.isNull(t.getExpansionModeTitle())?"": t.getExpansionModeTitle());                excelRow.setBusinessSegments(Objects.isNull(t.getBusinessSegmentsTitle())?"": t.getBusinessSegmentsTitle());                excelRow.setBidingMode(Objects.isNull(t.getBidingModeTitle())?"": t.getBidingModeTitle());                excelRow.setBusinessType(Objects.isNull(t.getBusinessTypeStr())?"": t.getBusinessTypeStr());                excelRow.setInStock(Objects.isNull(t.getIsCountPerformanceStr())?"": t.getIsCountPerformanceStr());                excelRow.setIsCountPerformance(Objects.isNull(t.getInStockTitle())?"": t.getInStockTitle());                excelRow.setConstructionArea(Objects.isNull(t.getConstructionArea())?"": t.getConstructionArea().toString());                excelRow.setSignTime(Objects.isNull(t.getSignTime())?"":DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD, t.getSignTime()));                excelRow.setProposedServicePeriod(Objects.isNull(t.getProposedServicePeriod())?"": t.getProposedServicePeriod().toString());                excelRow.setServiceBeginTime(Objects.isNull(t.getServiceBeginTime())?"":DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD, t.getServiceBeginTime()));                excelRow.setServiceEndTime(Objects.isNull(t.getServiceEndTime())?"":DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD, t.getServiceEndTime()));                excelRow.setConstructionArea(Objects.isNull(t.getConstructionArea())?"": t.getConstructionArea().toString());                excelRow.setProvince(Objects.isNull(t.getProvinceTitle())?"": t.getProvinceTitle());                excelRow.setCity(Objects.isNull(t.getCityTitle())?"": t.getCityTitle());                excelRow.setFirstResponsibleCompany(t.getFirstResponsibleCompany());                excelRow.setSecondParty(t.getSecondParty());                excelRow.setDownloadPath(t.getDownloadPath());                excelRow.setServiceContent(t.getServiceContentTitle());                excelRow.setContractAmount(Objects.isNull(t.getContractAmount())?"": t.getContractAmount().toString());                excelRow.setContractAnnualAmount(Objects.isNull(t.getContractAnnualAmount())?"": t.getContractAnnualAmount().toString());                excelRow.setAnnualConversionAmount(Objects.isNull(t.getAnnualConversionAmount())?"": t.getAnnualConversionAmount().toString());                if("SHI".equals(t.getInStock())){                    excelRow.setContractAmounts(Objects.isNull(t.getContractAmounts())?"": t.getContractAmounts().toString());                    excelRow.setContractAnnualAmounts(Objects.isNull(t.getContractAnnualAmounts())?"": t.getContractAnnualAmounts().toString());                    excelRow.setAnnualConversionAmounts(Objects.isNull(t.getAnnualConversionAmounts())?"": t.getAnnualConversionAmounts().toString());                }else{                    excelRow.setContractAmounts("");                    excelRow.setContractAnnualAmounts("");                    excelRow.setAnnualConversionAmounts("");                }               String expandName="";                String expandRate="";                String expandDesc="";                if(Objects.nonNull(projectAchievementAllList)){                  List<ProjectAchievement>  achievements= projectAchievementAllList.stream().filter(ac->ac.getProjectId().equals(t.getId())).collect(Collectors.toList());                    if(CollectionUtils.isNotEmpty(achievements)){                        for(ProjectAchievement a  : achievements){                            if(Objects.nonNull(a.getExpandCompanyName())){                                expandName=a.getExpandCompanyName()+";"+expandName;                            }                            if(Objects.nonNull(a.getAssignmentRate())){                                expandRate=a.getAssignmentRate().toString() +";"+expandRate;                            }                            if(Objects.nonNull(a.getAssignmentDesc())){                                expandDesc=a.getAssignmentDesc()+";"+expandDesc;                            }                        }                    }                }                excelRow.setExpandCompany(expandName.endsWith(";")? expandName.substring(0,expandName.length()-1):expandName);                excelRow.setExpandCompanyRate(expandRate.endsWith(";")?expandRate.substring(0,expandRate.length()-1):expandRate);                excelRow.setExpandCompanyRemark(expandDesc.endsWith(";")?expandDesc.substring(0,expandDesc.length()-1):expandDesc);                excels.add(excelRow);            });        }        ExcelUtil<ActualInExcelSummaryHeadVO> excelUtil = new ExcelUtil<>(ActualInExcelSummaryHeadVO.class);        excelUtil.exportExcelCustomHead(response,headNameList,excels, "实际签约汇总表");    }    public static void exportActual(List<ActualInVO> records, List<ActualInTotalVO> total) {        List<ActualInExcelVO> excels = new ArrayList<>();        ActualInExcelVO excelHead = new ActualInExcelVO();        excelHead.setRegionName("大区");        excelHead.setCompanyName("单位");        excelHead.setName("项目");        excelHead.setSignTime("合同签约时间");        excelHead.setServiceTime("合同服务周期");        excelHead.setProposedServicePeriod("拟服务期限");        excelHead.setEnterTime("实际进场时间");        excelHead.setConstructionArea("建筑面积");        List<ActualInDetailExcelVO> excelHeadDetails = new ArrayList<>();        ActualInDetailExcelVO excelHeadDetail = new ActualInDetailExcelVO();        List<String> months = records.get(0).getMonths();        excelHeadDetail.setName("实际值");        excelHeadDetail.setSubtotal("小计");        excelHeadDetail.setMonthIndex1(months.get(0));        excelHeadDetail.setMonthIndex2(months.get(1));        excelHeadDetail.setMonthIndex3(months.get(2));        excelHeadDetail.setMonthIndex4(months.get(3));        excelHeadDetail.setMonthIndex5(months.get(4));        excelHeadDetail.setMonthIndex6(months.get(5));        excelHeadDetail.setMonthIndex7(months.get(6));        excelHeadDetail.setMonthIndex8(months.get(7));        excelHeadDetail.setMonthIndex9(months.get(8));        excelHeadDetail.setMonthIndex10(months.get(9));        excelHeadDetail.setMonthIndex11(months.get(10));        excelHeadDetail.setMonthIndex12(months.get(11));        excelHeadDetails.add(excelHeadDetail);        excelHead.setList(excelHeadDetails);        excels.add(excelHead);        for(ActualInVO actualInVO : records){            ActualInExcelVO excel = new ActualInExcelVO();            excel.setRegionName(actualInVO.getRegionName());            excel.setCompanyName(actualInVO.getCompanyName());            excel.setName(actualInVO.getProjectName());            excel.setSignTime(DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD, actualInVO.getSignDate()));            excel.setServiceTime(actualInVO.getServiceDate());            excel.setProposedServicePeriod(String.valueOf(actualInVO.getServiceMonth()));            excel.setEnterTime(null == actualInVO.getEnterTime() ? "" : DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD, actualInVO.getEnterTime()));            excel.setConstructionArea(actualInVO.getConstructionArea().toString());            List<PerformanceData> datas = actualInVO.getDatas();            List<ActualInDetailExcelVO> details = new ArrayList<>();            for(PerformanceData performance : datas){                ActualInDetailExcelVO excelLine = new ActualInDetailExcelVO();                excelLine.setName(performance.getLabel());                excelLine.setSubtotal(performance.getValue().toString());                Map<String, PerformanceValue> map = performance.getList();                excelLine.setMonthIndex1(null == map.get(excelHeadDetail.getMonthIndex1()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex1()).getValue().toString());                excelLine.setMonthIndex2(null == map.get(excelHeadDetail.getMonthIndex2()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex2()).getValue().toString());                excelLine.setMonthIndex3(null == map.get(excelHeadDetail.getMonthIndex3()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex3()).getValue().toString());                excelLine.setMonthIndex4(null == map.get(excelHeadDetail.getMonthIndex4()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex4()).getValue().toString());                excelLine.setMonthIndex5(null == map.get(excelHeadDetail.getMonthIndex5()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex5()).getValue().toString());                excelLine.setMonthIndex6(null == map.get(excelHeadDetail.getMonthIndex6()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex6()).getValue().toString());                excelLine.setMonthIndex7(null == map.get(excelHeadDetail.getMonthIndex7()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex7()).getValue().toString());                excelLine.setMonthIndex8(null == map.get(excelHeadDetail.getMonthIndex8()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex8()).getValue().toString());                excelLine.setMonthIndex9(null == map.get(excelHeadDetail.getMonthIndex9()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex9()).getValue().toString());                excelLine.setMonthIndex10(null == map.get(excelHeadDetail.getMonthIndex10()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex10()).getValue().toString());                excelLine.setMonthIndex11(null == map.get(excelHeadDetail.getMonthIndex11()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex11()).getValue().toString());                excelLine.setMonthIndex12(null == map.get(excelHeadDetail.getMonthIndex12()).getValue() ? "-" : map.get(excelHeadDetail.getMonthIndex12()).getValue().toString());                details.add(excelLine);            }            excel.setList(details);            excels.add(excel);        }        ActualInExcelVO excel = new ActualInExcelVO();        excel.setRegionName("合计");        excel.setCompanyName("");        excel.setName("");        excel.setSignTime("");        excel.setServiceTime("");        excel.setProposedServicePeriod("");        excel.setEnterTime("");        excel.setConstructionArea("");        List<ActualInDetailExcelVO> details = new ArrayList<>();        for(ActualInTotalVO actualIntotal : total) {            ActualInDetailExcelVO excelLine = new ActualInDetailExcelVO();            excelLine.setName(actualIntotal.getLabel());            excelLine.setSubtotal(actualIntotal.getValue().toString());            Map<String, BigDecimal> map = actualIntotal.getDatas();            excelLine.setMonthIndex1(null == map.get(excelHeadDetail.getMonthIndex1()) ? "-" : map.get(excelHeadDetail.getMonthIndex1()).toString());            excelLine.setMonthIndex2(null == map.get(excelHeadDetail.getMonthIndex2()) ? "-" : map.get(excelHeadDetail.getMonthIndex2()).toString());            excelLine.setMonthIndex3(null == map.get(excelHeadDetail.getMonthIndex3()) ? "-" : map.get(excelHeadDetail.getMonthIndex3()).toString());            excelLine.setMonthIndex4(null == map.get(excelHeadDetail.getMonthIndex4()) ? "-" : map.get(excelHeadDetail.getMonthIndex4()).toString());            excelLine.setMonthIndex5(null == map.get(excelHeadDetail.getMonthIndex5()) ? "-" : map.get(excelHeadDetail.getMonthIndex5()).toString());            excelLine.setMonthIndex6(null == map.get(excelHeadDetail.getMonthIndex6()) ? "-" : map.get(excelHeadDetail.getMonthIndex6()).toString());            excelLine.setMonthIndex7(null == map.get(excelHeadDetail.getMonthIndex7()) ? "-" : map.get(excelHeadDetail.getMonthIndex7()).toString());            excelLine.setMonthIndex8(null == map.get(excelHeadDetail.getMonthIndex8()) ? "-" : map.get(excelHeadDetail.getMonthIndex8()).toString());            excelLine.setMonthIndex9(null == map.get(excelHeadDetail.getMonthIndex9()) ? "-" : map.get(excelHeadDetail.getMonthIndex9()).toString());            excelLine.setMonthIndex10(null == map.get(excelHeadDetail.getMonthIndex10()) ? "-" : map.get(excelHeadDetail.getMonthIndex10()).toString());            excelLine.setMonthIndex11(null == map.get(excelHeadDetail.getMonthIndex11()) ? "-" : map.get(excelHeadDetail.getMonthIndex11()).toString());            excelLine.setMonthIndex12(null == map.get(excelHeadDetail.getMonthIndex12()) ? "-" : map.get(excelHeadDetail.getMonthIndex12()).toString());            details.add(excelLine);        }        excel.setList(details);        excels.add(excel);        ExcelUtil<ActualInExcelVO> excelUtil = new ExcelUtil<>(ActualInExcelVO.class);        excelUtil.exportExcelNoHead(ServletUtils.getResponse(), excels, "实际签约汇总表", true);    }    public static void exportAchievementList(PerformanceVO performanceVO) {        List<String> months = performanceVO.getMonths();        List<PerformanceVO.AchievementVO> achievementVOs = performanceVO.getAchievementVOs();        List<PerformanceExcelVO> excels = new ArrayList<>();        PerformanceExcelVO excelHead = new PerformanceExcelVO();        excelHead.setName("费项");        excelHead.setRate("统计");        List<PerformanceDetailExcelVO> excelHeadDetails = new ArrayList<>();        PerformanceDetailExcelVO excelHeadDetail = new PerformanceDetailExcelVO();        excelHeadDetail.setLabel("类型");        excelHeadDetail.setYear("小计");        excelHeadDetail.setMonthIndex1(months.get(0));        excelHeadDetail.setMonthIndex2(months.get(1));        excelHeadDetail.setMonthIndex3(months.get(2));        excelHeadDetail.setMonthIndex4(months.get(3));        excelHeadDetail.setMonthIndex5(months.get(4));        excelHeadDetail.setMonthIndex6(months.get(5));        excelHeadDetail.setMonthIndex7(months.get(6));        excelHeadDetail.setMonthIndex8(months.get(7));        excelHeadDetail.setMonthIndex9(months.get(8));        excelHeadDetail.setMonthIndex10(months.get(9));        excelHeadDetail.setMonthIndex11(months.get(10));        excelHeadDetail.setMonthIndex12(months.get(11));        excelHeadDetails.add(excelHeadDetail);        excelHead.setList(excelHeadDetails);        excels.add(excelHead);        BigDecimal zero = new BigDecimal(0);        for(PerformanceVO.AchievementVO data : achievementVOs){            PerformanceExcelVO excelLine = new PerformanceExcelVO();            excelLine.setName(data.getLabel());            excelLine.setRate("业绩达成率 " +  (null == data.getAchievementRate() ? "" : data.getAchievementRate()));            List<PerformanceDetailExcelVO> details = new ArrayList<>();            for(PerformanceData pdata : data.getBudgetDatas()){                Map<String, PerformanceValue> map = pdata.getList();                PerformanceDetailExcelVO detail = new PerformanceDetailExcelVO();                detail.setLabel(pdata.getLabel());                detail.setYear(pdata.getValue().toString());                detail.setMonthIndex1(zero.compareTo(map.get(excelHeadDetail.getMonthIndex1()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex1()).getValue().toString());                detail.setMonthIndex2(zero.compareTo(map.get(excelHeadDetail.getMonthIndex2()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex2()).getValue().toString());                detail.setMonthIndex3(zero.compareTo(map.get(excelHeadDetail.getMonthIndex3()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex3()).getValue().toString());                detail.setMonthIndex4(zero.compareTo(map.get(excelHeadDetail.getMonthIndex4()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex4()).getValue().toString());                detail.setMonthIndex5(zero.compareTo(map.get(excelHeadDetail.getMonthIndex5()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex5()).getValue().toString());                detail.setMonthIndex6(zero.compareTo(map.get(excelHeadDetail.getMonthIndex6()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex6()).getValue().toString());                detail.setMonthIndex7(zero.compareTo(map.get(excelHeadDetail.getMonthIndex7()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex7()).getValue().toString());                detail.setMonthIndex8(zero.compareTo(map.get(excelHeadDetail.getMonthIndex8()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex8()).getValue().toString());                detail.setMonthIndex9(zero.compareTo(map.get(excelHeadDetail.getMonthIndex9()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex9()).getValue().toString());                detail.setMonthIndex10(zero.compareTo(map.get(excelHeadDetail.getMonthIndex10()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex10()).getValue().toString());                detail.setMonthIndex11(zero.compareTo(map.get(excelHeadDetail.getMonthIndex11()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex11()).getValue().toString());                detail.setMonthIndex12(zero.compareTo(map.get(excelHeadDetail.getMonthIndex12()).getValue()) == 0 ? "-" : map.get(excelHeadDetail.getMonthIndex12()).getValue().toString());                details.add(detail);            }            excelLine.setList(details);            excels.add(excelLine);        }        ExcelUtil<PerformanceExcelVO> excelUtil = new ExcelUtil<>(PerformanceExcelVO.class);        excelUtil.exportExcelNoHead(ServletUtils.getResponse(), excels, "业绩动态表",true);    }    public static void exportAchievementListTwo(Map<String,Object> map){        List<String> months = (List<String>) map.get("months");        ActualCountVO sjTotal = (ActualCountVO) map.get("sjTotal");        ActualCountVO total = (ActualCountVO) map.get("total");        if (null != total && null != sjTotal){            total.setLabel(sjTotal.getLabel());            total.setPercent(sjTotal.getPercent());        }        ActualCountVO sjYear = (ActualCountVO) map.get("sjYear");        ActualCountVO year = (ActualCountVO) map.get("year");        if (null != year && null != sjYear){            year.setLabel(sjYear.getLabel());            year.setPercent(sjYear.getPercent());        }        ActualCountVO sjTb = (ActualCountVO) map.get("sjTb");        ActualCountVO tb = (ActualCountVO) map.get("tb");        if (null != tb && null != sjTb){            tb.setLabel(sjTb.getLabel());            tb.setPercent(sjTb.getPercent());        }        ActualCountVO sjChange = (ActualCountVO) map.get("sjChange");        List<ActualCountVO> totalList = new ArrayList<>();        List<ActualCountVO> yearList = new ArrayList<>();        List<ActualCountVO> tbList = new ArrayList<>();        List<ActualCountVO> changeList = new ArrayList<>();        totalList.add(0, total);        totalList.add(1,sjTotal);        yearList.add(0, year);        yearList.add(1,sjYear);        tbList.add(0, tb);        tbList.add(1,sjTb);        changeList.add(0,sjChange);        List<List<ActualCountVO>> list = new ArrayList<>();        list.add(0,totalList);        list.add(1,yearList);        list.add(2,tbList);        list.add(3,changeList);        List<PerformanceExcelVO> excels = new ArrayList<>();        PerformanceExcelVO excelHead = new PerformanceExcelVO();        excelHead.setName("费项");        excelHead.setRate("统计");        List<PerformanceDetailExcelVO> excelHeadDetails = new ArrayList<>();        PerformanceDetailExcelVO excelHeadDetail = new PerformanceDetailExcelVO();        excelHeadDetail.setLabel("类型");        excelHeadDetail.setYear("小计");        excelHeadDetail.setMonthIndex1(months.get(0));        excelHeadDetail.setMonthIndex2(months.get(1));        excelHeadDetail.setMonthIndex3(months.get(2));        excelHeadDetail.setMonthIndex4(months.get(3));        excelHeadDetail.setMonthIndex5(months.get(4));        excelHeadDetail.setMonthIndex6(months.get(5));        excelHeadDetail.setMonthIndex7(months.get(6));        excelHeadDetail.setMonthIndex8(months.get(7));        excelHeadDetail.setMonthIndex9(months.get(8));        excelHeadDetail.setMonthIndex10(months.get(9));        excelHeadDetail.setMonthIndex11(months.get(10));        excelHeadDetail.setMonthIndex12(months.get(11));        excelHeadDetails.add(excelHeadDetail);        excelHead.setList(excelHeadDetails);        excels.add(excelHead);        //表单内容        for (int i = 0; i < list.size(); i++)  {            List<ActualCountVO> actualCountVOList = list.get(i);                PerformanceExcelVO excelLine = new PerformanceExcelVO();                excelLine.setName(actualCountVOList.get(0).getLabel());                excelLine.setRate( (null ==  actualCountVOList.get(0).getPercent() ? "业绩达成率"+"-" : "业绩达成率"+actualCountVOList.get(0).getPercent() ));                List<PerformanceDetailExcelVO> details = new ArrayList<>();                for (ActualCountVO actualCountVO : actualCountVOList) {                    List<ActualCountVO> mouthList = actualCountVO.getMouthList();                    //根据月份排序                    if (null == mouthList){                        continue;                    }                    List<ActualCountVO> collect = mouthList.stream().sorted(Comparator.comparing(ActualCountVO::getMouth)).collect(Collectors.toList());                    Map<String,BigDecimal> valueMap = new HashMap<>();                    for (ActualCountVO countVO : collect) {                        valueMap.put(countVO.getMouth(),countVO.getValue());                    }                    PerformanceDetailExcelVO detail = new PerformanceDetailExcelVO();                    detail.setLabel(actualCountVO.getCnType());                    detail.setYear(actualCountVO.getValue().toString());                    if (CollectionUtils.isEmpty(collect)){                        detail.setMonthIndex1("-");                        detail.setMonthIndex2("-");                        detail.setMonthIndex3("-");                        detail.setMonthIndex4("-");                        detail.setMonthIndex5("-");                        detail.setMonthIndex6("-");                        detail.setMonthIndex7("-");                        detail.setMonthIndex8("-");                        detail.setMonthIndex9("-");                        detail.setMonthIndex10("-");                        detail.setMonthIndex11("-");                        detail.setMonthIndex12("-");                    }else {                        detail.setMonthIndex1(( collect.get(0) == null || collect.get(0).getValue() == null)  ? "-" : collect.get(0).getValue().toString());                        detail.setMonthIndex2(( collect.get(1) == null || collect.get(1).getValue() == null)  ? "-" : collect.get(1).getValue().toString());                        detail.setMonthIndex3(( collect.get(2) == null || collect.get(2).getValue() == null)  ? "-" : collect.get(2).getValue().toString());                        detail.setMonthIndex4(( collect.get(3) == null || collect.get(3).getValue() == null)  ? "-" : collect.get(3).getValue().toString());                        detail.setMonthIndex5(( collect.get(4) == null || collect.get(4).getValue() == null)  ? "-" : collect.get(4).getValue().toString());                        detail.setMonthIndex6(( collect.get(5) == null || collect.get(5).getValue() == null)  ? "-" : collect.get(5).getValue().toString());                        detail.setMonthIndex7(( collect.get(6) == null || collect.get(6).getValue() == null)  ? "-" : collect.get(6).getValue().toString());                        detail.setMonthIndex8(( collect.get(7) == null || collect.get(7).getValue() == null)  ? "-" : collect.get(7).getValue().toString());                        detail.setMonthIndex9(( collect.get(8) == null || collect.get(8).getValue() == null)  ? "-" : collect.get(8).getValue().toString());                        detail.setMonthIndex10(( collect.get(9) == null || collect.get(9).getValue() == null)  ? "-" : collect.get(9).getValue().toString());                        detail.setMonthIndex11(( collect.get(10) == null || collect.get(10).getValue() == null)  ? "-" : collect.get(10).getValue().toString());                        detail.setMonthIndex12(( collect.get(11) == null || collect.get(11).getValue() == null)  ? "-" : collect.get(11).getValue().toString());                    }                    details.add(detail);                    excelLine.setList(details);                }                excels.add(excelLine);        }        ExcelUtil<PerformanceExcelVO> excelUtil = new ExcelUtil<>(PerformanceExcelVO.class);        excelUtil.exportExcelNoHead(ServletUtils.getResponse(), excels, "业绩动态表",true);    }}