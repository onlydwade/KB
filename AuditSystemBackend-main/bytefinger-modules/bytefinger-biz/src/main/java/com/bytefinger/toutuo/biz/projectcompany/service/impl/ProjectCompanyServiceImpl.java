package com.bytefinger.toutuo.biz.projectcompany.service.impl;import cn.hutool.core.util.ObjectUtil;import com.baomidou.mybatisplus.core.conditions.Wrapper;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.domain.R;import com.bytefinger.common.core.enums.ShiFou;import com.bytefinger.common.core.service.ThisService;import com.bytefinger.common.core.web.domain.vo.UserVO;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.toutuo.biz.companyexit.domain.ProjectCompanyExit;import com.bytefinger.toutuo.biz.companyfinance.domain.ProjectCompanyPayment;import com.bytefinger.toutuo.biz.companyfinance.service.IProjectCompanyPaymentService;import com.bytefinger.toutuo.biz.companyrisk.domain.ProjectCompanyRiskInspection;import com.bytefinger.toutuo.biz.companyrisk.mapper.ProjectCompanyRiskInspectionMapper;import com.bytefinger.toutuo.biz.companyrisk.service.IProjectCompanyRiskInspectionService;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectRiskInspection;import com.bytefinger.toutuo.biz.project.domain.ProjectTeam;import com.bytefinger.toutuo.biz.project.enums.ProjectStatus;import com.bytefinger.toutuo.biz.project.service.IProjectTeamService;import com.bytefinger.toutuo.biz.project.service.impl.ProjectServiceImpl;import com.bytefinger.toutuo.biz.projectcompany.constants.ProjectCompanyConstant;import com.bytefinger.toutuo.biz.projectcompany.domain.ProjectCompany;import com.bytefinger.toutuo.biz.projectcompany.enums.ProjectCompanyStatus;import com.bytefinger.toutuo.biz.projectcompany.mapper.ProjectCompanyMapper;import com.bytefinger.toutuo.biz.projectcompany.service.IProjectCompanyService;import com.bytefinger.toutuo.biz.user.service.UserService;import com.bytefinger.toutuo.common.service.BizService;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.util.CollectionUtils;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;/** * <p> * 股权合作项目-公司 服务实现类 * </p> * * @author Jone * @since 2023-02-01 */@Service@AllArgsConstructor@Slf4jpublic class ProjectCompanyServiceImpl extends BizService<ProjectCompanyMapper, ProjectCompany> implements IProjectCompanyService, ThisService<ProjectCompanyServiceImpl> {    private final ProjectCompanyMapper projectCompanyMapper;    private final IProjectCompanyPaymentService projectCompanyPaymentService;   // private final IProjectCompanyRiskInspectionService riskInspectionService;    private final ProjectCompanyRiskInspectionMapper projectCompanyRiskInspectionMapper;    private final IProjectTeamService projectTeamService;    private final UserService userService;    @Override    @DataFill    public IPage<ProjectCompany> page(QueryPage queryPage) {        String key = "company.paidCapitalStatus";        Map<String, Object> dbParams = queryPage.getDbParams();        log.info("****************************************dbParams:{}",dbParams);        if (ObjectUtil.isNotEmpty(queryPage.getParams().get(key))) {            queryPage.getDbParams().put("paidCapitalStatus", queryPage.getParams().get(key));            queryPage.getParams().remove(key);        }        Page<ProjectCompany> page = projectCompanyMapper.list(queryPage.toPage(), queryPage.getWrapper(), queryPage.getDbParams());        if(!CollectionUtils.isEmpty(page.getRecords())){            page.getRecords().forEach(v -> {                v.setPaidCapitalStatus(v.getPaidCapital().compareTo(BigDecimal.ZERO) > 0 ? ShiFou.SHI.getCode() : ShiFou.FOU.getCode());            });        }        return page;    }//    @Override//    public List<ProjectCompany> list(Wrapper<ProjectCompany> queryWrapper) {//        List<ProjectCompany> list = projectCompanyMapper.list(queryWrapper);//        if (!CollectionUtils.isEmpty(list)) {//            list.forEach(v -> {//                v.setPaidCapitalStatus(v.getPaidCapital().compareTo(BigDecimal.ZERO) > 0 ? ShiFou.SHI.getCode() : ShiFou.FOU.getCode());//            });//        }//        return list;//    }    @Override    @DataFill    public ProjectCompany getByCompanyId(Long id) {        ProjectCompany company = projectCompanyMapper.getByCompanyId(id);        if(null == company){            return company;        }        //判断是否存在财务交接人        ProjectTeam projectTeam = projectTeamService.list(new LambdaQueryWrapper<ProjectTeam>().eq(ProjectTeam::getRecordId, company.getProjectId()).eq(ProjectTeam::getRoleKey, "CAI_WU_FU_ZE_REN")).stream().findFirst().orElse(null);        if (null!=projectTeam){            UserVO user = userService.getUser(projectTeam.getUserId());            if (null!=user){                company.setFinancialHandoverUserId(projectTeam.getUserId());                company.setFinancialHandoverUser(user);            }        }        company.setPaidCapitalStatus(company.getPaidCapital().compareTo(BigDecimal.ZERO) > 0 ? ShiFou.SHI.getCode() : ShiFou.FOU.getCode());        return company;    }    @Override    @DataFill    public ProjectCompany getByIdNotDataFill(Long id) {        ProjectCompany company = projectCompanyMapper.getByCompanyId(id);        return company;    }    public List<ProjectCompany> getByProjectId(Long projectId) {        LambdaQueryWrapper<ProjectCompany> wrapper = Wrappers.<ProjectCompany>lambdaQuery().eq(ProjectCompany::getProjectId, projectId);        return this.list(wrapper);    }    public void syncProjectData(Project project, List<ProjectRiskInspection> projectRiskInspections) {        List<ProjectCompany> companys = this.getByProjectId(project.getId());        if(CollectionUtils.isEmpty(companys)){            return;        }        //更新投后负责人和业务所属部门        ProjectCompany company = new ProjectCompany();        company.setPrincipalId(project.getPrincipalId());        company.setBusinessDeptName(project.getBusinessDeptName());        company.setBusinessDeptId(project.getBusinessDeptId());        company.setServiceStatus(ProjectCompanyStatus.ZHENG_CHANG.getCode());        this.update(company, Wrappers.<ProjectCompany>lambdaUpdate().eq(ProjectCompany::getProjectId, project.getId()));        //添加首次出资数据        ProjectCompany companyPayment = companys.get(0);        ProjectCompanyPayment payment = new ProjectCompanyPayment();        payment.setCompanyId(companyPayment.getId());        payment.setType(ProjectCompanyConstant.SHOU_CI_CHU_ZI);        //TODO 首次出资人从哪里来        payment.setApply("");        payment.setApplyTime(project.getFirstCapitalTime());        payment.setAmount(project.getFirstCapitalAmount());        payment.setProcessStatus("FOU");        //todo 首次出资人应该选谁        payment.setCreateUserId(companyPayment.getCreateUserId());        payment.setTakeId(companyPayment.getCreateUserId());        projectCompanyPaymentService.save(payment);        projectCompanyPaymentService.updateById(payment.setCreateUserId(companyPayment.getCreateUserId()));        //风险检查        if(!CollectionUtils.isEmpty(projectRiskInspections)){            List<ProjectCompanyRiskInspection> riskInspections = new ArrayList<>();            companys.forEach(c -> {                projectRiskInspections.forEach(pri -> {                    ProjectCompanyRiskInspection riskInspection = new ProjectCompanyRiskInspection();                    riskInspection.setCompanyId(c.getId());                    riskInspection.setNode(pri.getNode());                    riskInspection.setMilepostTime(pri.getMilepostTime());                    riskInspection.setReminderTime(pri.getReminderTime());                   // riskInspection.setContent(pri.getIntroduction());                    riskInspection.setContent(pri.getRemark());                    riskInspection.setRemark(pri.getRemark());                    log.info("*************************createUserId:{}",pri.getCreateUserId());                    riskInspection.setUserId(pri.getCreateUserId());                    projectCompanyRiskInspectionMapper.insertriskInspection(riskInspection);                  //  projectCompanyRiskInspectionMapper.insert(riskInspection);                 //   projectCompanyRiskInspectionMapper.updateById(riskInspection.setCreateUserId(pri.getCreateUserId()));               //     riskInspections.add(riskInspection);                });            });        //    riskInspectionService.saveBatch(riskInspections);        }    }    @Override    public void add(ProjectCompany projectCompany) {        projectCompany.setCompanyBizNo(super.getNo());        super.add4Log(projectCompany);    }    @Override    public R<Object> update(ProjectCompany projectCompany) {        return R.ok(super.update4Log(projectCompany));    }    @Override    public void companyExit(Long companyId, Date exitTime) {        ProjectCompany company = this.getById(companyId);        String bValue = company.getServiceStatus();        company.setExitTime(exitTime);        company.setServiceStatus(ProjectCompanyStatus.YI_TUI_CHU.getCode());        this.updateById(company);        operLogService.changeLog(company.getClass(), company.getId(), "变更为项目退出",                bValue, ProjectCompanyStatus.YI_TUI_CHU.getDesc());    }}