package com.bytefinger.toutuo.biz.auditinfo.service.impl;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.biz.audit.domain.Audit;import com.bytefinger.toutuo.biz.audit.service.IAuditService;import com.bytefinger.toutuo.biz.auditinfo.domain.AuditInfoRequest;import com.bytefinger.toutuo.biz.auditinfo.mapper.AuditInfoRequestMapper;import com.bytefinger.toutuo.biz.auditinfo.service.IAuditInfoRequestService;import com.bytefinger.toutuo.biz.auditteam.domain.AuditTeam;import com.bytefinger.toutuo.biz.auditteam.service.IAuditTeamService;import com.bytefinger.toutuo.common.service.SendMessageService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.List;/** * <p> * 审计信息请求表 服务实现类 * </p> * * @author Jone * @since 2025-08-09 */@Service@AllArgsConstructorpublic class AuditInfoRequestServiceImpl extends ServiceImpl<AuditInfoRequestMapper, AuditInfoRequest> implements IAuditInfoRequestService {    private final SendMessageService sendMessageService;    private final IAuditService auditService;    private final IAuditTeamService auditTeamService;    private final AuditInfoRequestMapper auditInfoRequestMapper;    @Override    public void add(AuditInfoRequest auditInfoRequest) {        this.save(auditInfoRequest);        String username = SecurityUtils.getUsername();        //查询审计任务        Audit audit = auditService.getById(auditInfoRequest.getAuditId());        //查询项目成员        List<AuditTeam> teams = auditTeamService.list(Wrappers.<AuditTeam>lambdaQuery()                .eq(AuditTeam::getAuditId, audit.getId()));        teams.forEach(team -> {            if(team.getUserId().equals(auditInfoRequest.getCreateUserId())){                return;            }            sendMessageService.sendMessage(team.getUserId(), audit.getId(), "",                    "（" + username + "） submitted files in （" +  audit.getAuditJobName() + "） Info Request", "Audit" , "XI_TONG_TONG_ZHI");        });    }    @Override    public void update(AuditInfoRequest auditInfoRequest) {        this.updateById(auditInfoRequest);        String username = SecurityUtils.getUsername();        //查询审计任务        Audit audit = auditService.getById(auditInfoRequest.getAuditId());        //查询项目成员        List<AuditTeam> teams = auditTeamService.list(Wrappers.<AuditTeam>lambdaQuery()                .eq(AuditTeam::getAuditId, audit.getId()));        teams.forEach(team -> {            if(team.getUserId().equals(auditInfoRequest.getCreateUserId())){                return;            }            sendMessageService.sendMessage(team.getUserId(), audit.getId(), "",                    "（" + username + "） submitted files in （" +  audit.getAuditJobName() + "） Info Request", "Audit" , "XI_TONG_TONG_ZHI");        });    }    @DataFill    @Override    public List<AuditInfoRequest> list(Long auditId) {        return auditInfoRequestMapper.selectList(Wrappers.<AuditInfoRequest>lambdaQuery().eq(AuditInfoRequest::getAuditId, auditId)                .orderByDesc(AuditInfoRequest::getCreateTime));    }}