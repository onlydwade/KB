package com.bytefinger.toutuo.biz.projectstep.service.impl;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.service.IProjectService;import com.bytefinger.toutuo.biz.projectextension.entity.ProjectExtension;import com.bytefinger.toutuo.biz.projectextension.service.IProjectExtensionService;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStepMenu;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStepMenuConfig;import com.bytefinger.toutuo.biz.projectstep.mapper.ProjectStepMenuConfigMapper;import com.bytefinger.toutuo.biz.projectstep.mapper.ProjectStepMenuMapper;import com.bytefinger.toutuo.biz.projectstep.service.IProjectStepMenuConfigService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.toutuo.biz.projectstep.service.IProjectStepService;import lombok.AllArgsConstructor;import org.apache.commons.compress.utils.Lists;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;/** * <p> * 项目步骤菜单配置表 服务实现类 * </p> * * @author Jone * @since 2023-01-31 */@Service@AllArgsConstructorpublic class ProjectStepMenuConfigServiceImpl extends ServiceImpl<ProjectStepMenuConfigMapper, ProjectStepMenuConfig> implements IProjectStepMenuConfigService {    private final ProjectStepMenuConfigMapper projectStepMenuConfigMapper;    private final ProjectStepMenuMapper projectStepMenuMapper;    private final IProjectStepService projectStepService;    private final IProjectService projectService;    private final IProjectExtensionService projectExtensionService;    @Override    public List<ProjectStepMenu> listByParentId(String projectType, Long parentId) {        return projectStepMenuConfigMapper.listByParentId(projectType, parentId);    }    @Override    public void deleteByProjectType(String projectType) {        projectStepMenuConfigMapper.deleteByProjectType(projectType);    }    @Override    @Transactional(rollbackFor = Exception.class)    public int update(ProjectStepMenuConfig projectStepMenuConfig) {        this.deleteByProjectType(projectStepMenuConfig.getProjectType());        List<ProjectStepMenuConfig> list = Lists.newArrayList();        for (Long stepMenuId : projectStepMenuConfig.getStepMenuIds()) {            ProjectStepMenuConfig config = new ProjectStepMenuConfig();            config.setProjectType(projectStepMenuConfig.getProjectType());            config.setStepMenuId(stepMenuId);            list.add(config);        }        return projectStepMenuConfigMapper.batchSave(list);    }//    @Override//    public List<ProjectStepMenu> findProjectStepStatus(Long projectId) {//        Project project = projectService.getById(projectId);//        List<ProjectStepMenu> list = projectStepMenuMapper.listbyProjectTypeOne(project.getProjectType());//        List<ProjectStep> steps = projectStepService.listByProjectId(projectId);//        Map<Long, ProjectStep> stepMap = steps.stream().collect(Collectors.toMap(ProjectStep::getStepMenuId, Function.identity(), (key1, key2) -> key2));//        list = list.stream().map(v -> {//            ProjectStep projectStep = stepMap.get(v.getId());//            v.setStatus(ObjectUtils.isEmpty(projectStep) ? ProjectStepConstant.PROJECT_STEP_UNDONE : projectStep.getStatus());//            return v;//        }).collect(Collectors.toList());//        return list;//    }    @Override    public List<ProjectStepMenu> findProjectStepMenuByProjectId(Long projectId) {        Project project = projectService.getById(projectId);        List<ProjectStepMenu> projectStepMenuList = findProjectStepMenuByProjectType(project.getProjectType());        return renewStep(project, projectStepMenuList);    }    //续签项目，重新投标项目 特殊处理显示节点    public List<ProjectStepMenu> renewStep(Project project, List<ProjectStepMenu> projectStepMenus) {        List<Integer> modeList = new ArrayList<>();        modeList.add(1);        modeList.add(2);        List<ProjectExtension> projectExtensionList = projectExtensionService.list(Wrappers.<ProjectExtension>lambdaQuery()                .eq(ProjectExtension::getRelevanceProjectId, project.getId())                .in(ProjectExtension::getProcessMode, modeList));        if (CollectionUtils.isEmpty(projectExtensionList)) {            return projectStepMenus;        }        List<String> codeList = Lists.newArrayList();        if (projectExtensionList.get(0).getProcessMode().equals(1)) {            codeList.add("jcxx");            codeList.add("xmps");            codeList.add("yjqr");            codeList.add("xmsq");            codeList.add("thyj");            codeList.add("xmjx");        }else {            codeList.add("jcxx");            codeList.add("xmlx");            codeList.add("tdzj");            codeList.add("xmps");            codeList.add("bsps");            codeList.add("tbfp");            codeList.add("yjqr");            codeList.add("xmsq");            codeList.add("thyj");            codeList.add("xmjx");        }        List<ProjectStepMenu> showStepList = Lists.newArrayList();        Integer level = 1;        List<ProjectStepMenu> oneStepList = projectStepMenus.stream().filter(o -> level.equals(o.getLevel()) && codeList.contains(o.getCode())).collect(Collectors.toList());        List<Long> oneStepIdList = oneStepList.stream().map(ProjectStepMenu::getId).collect(Collectors.toList());        List<ProjectStepMenu> twoStepList = projectStepMenus.stream().filter(o -> oneStepIdList.contains(o.getParentId())).collect(Collectors.toList());        if (!CollectionUtils.isEmpty(oneStepList))            showStepList.addAll(oneStepList);        if (!CollectionUtils.isEmpty(twoStepList))            showStepList.addAll(twoStepList);        return showStepList;    }    @Override    public List<ProjectStepMenu> findProjectStepMenuByProjectType(String projectType) {        List<ProjectStepMenu> list = projectStepMenuMapper.listbyProjectType(projectType);        return list;    }}