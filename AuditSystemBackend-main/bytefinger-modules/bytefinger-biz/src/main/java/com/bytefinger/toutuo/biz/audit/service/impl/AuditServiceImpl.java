package com.bytefinger.toutuo.biz.audit.service.impl;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.bytefinger.common.core.domain.R;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.toutuo.biz.audit.domain.Audit;import com.bytefinger.toutuo.biz.audit.enums.AuditStatus;import com.bytefinger.toutuo.biz.audit.mapper.AuditMapper;import com.bytefinger.toutuo.biz.audit.service.IAuditService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.toutuo.biz.audititem.domain.AuditItem;import com.bytefinger.toutuo.biz.audititem.domain.AuditItemAppendix;import com.bytefinger.toutuo.biz.audititem.mapper.AuditItemAppendixMapper;import com.bytefinger.toutuo.biz.audititem.service.IAuditItemAppendixService;import com.bytefinger.toutuo.biz.audititem.service.IAuditItemService;import com.bytefinger.toutuo.biz.auditproject.domain.AuditProject;import com.bytefinger.toutuo.biz.auditproject.service.IAuditProjectService;import com.bytefinger.toutuo.biz.auditstep.service.IAuditStepService;import com.bytefinger.toutuo.biz.auditteam.domain.AuditTeam;import com.bytefinger.toutuo.biz.auditteam.service.IAuditTeamService;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectOperationHistory;import com.bytefinger.toutuo.common.service.BizService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import java.util.function.Function;import java.util.stream.Collectors;/** * <p> * 审计任务管理 服务实现类 * </p> * * @author Jone * @since 2025-08-04 */@Service@AllArgsConstructorpublic class AuditServiceImpl extends BizService<AuditMapper, Audit> implements IAuditService {    private final AuditMapper auditMapper;    private final IAuditStepService auditStepService;    private final IAuditProjectService auditProjectService;    private final IAuditItemService auditItemService;    private final IAuditTeamService auditTeamService;    private final IAuditItemAppendixService auditItemAppendixService;    @Override    @Transactional(rollbackFor = RuntimeException.class)    public R<Audit> add(Audit audit) {         //新增        audit = super.add4Log(audit);        //添加Team 成员        AuditProject auditProject = auditProjectService.getById(audit.getProjectId());        List<AuditTeam> auditTeams = new ArrayList<>();        //LEADER_AUDITOR        AuditTeam leaderAuditor = new AuditTeam();        leaderAuditor.setAuditId(audit.getId());        leaderAuditor.setUserId(audit.getLeaderAuditorId());        leaderAuditor.setRoleKey("LEADER_AUDITOR");        auditTeams.add(leaderAuditor);        //MIC        AuditTeam mic = new AuditTeam();        mic.setAuditId(audit.getId());        mic.setUserId(auditProject.getMicUserId());        mic.setRoleKey("PROJECT_MEMBER");        auditTeams.add(mic);        //PIC        AuditTeam pic = new AuditTeam();        pic.setAuditId(audit.getId());        pic.setUserId(auditProject.getMicUserId());        pic.setRoleKey("PROJECT_MEMBER");        auditTeams.add(pic);        //DIC        AuditTeam dic = new AuditTeam();        dic.setAuditId(audit.getId());        dic.setUserId(auditProject.getMicUserId());        dic.setRoleKey("PROJECT_MEMBER");        auditTeams.add(dic);        List<AuditTeam> uniqueOrders = new ArrayList<>(auditTeams.stream()                .collect(Collectors.toMap(                        AuditTeam::getUserId,                        Function.identity(),                        (existing, replacement) -> existing                ))                .values());        auditTeamService.saveBatch(uniqueOrders);        return R.ok(audit);    }    @Override    @Transactional(rollbackFor = RuntimeException.class)    public R<Audit> update(Audit audit) {        Audit resultAudit = super.update4Log(audit);        return R.ok(resultAudit);    }    @Override    @DataFill    public IPage<Audit> page(QueryPage queryPage) {        IPage<Audit> auditPage = auditMapper.list(queryPage.toPage(), queryPage.getWrapper(), queryPage.getDbParams());        auditPage.getRecords().forEach(audit -> {            AuditProject auditProject = auditProjectService.findById(audit.getProjectId());            audit.setAuditproject(auditProject);            List<AuditItem> auditItems = auditItemService.list(Wrappers.<AuditItem>lambdaQuery()                    .eq(AuditItem::getAuditId, audit.getId()));            if(CollectionUtils.isNotEmpty(auditItems)){                Map<String, List<AuditItem>> auditItemGroup = auditItems.stream()                        .collect(Collectors.groupingBy(AuditItem::getResults));                audit.setAuditItemSCount(auditItemGroup.get("S").size());                audit.setAuditItemNaCount(auditItemGroup.get("NA").size());                audit.setAuditItemAfiCount(auditItemGroup.get("AFI").size());                audit.setAuditItemNcCount(auditItemGroup.get("NC").size());                audit.setAuditItemALlCount(auditItems.size());                Integer findingCount = Math.toIntExact(auditItems.stream().filter(auditItem -> StringUtils.isNotBlank(auditItem.getFindingDetails())).count());                audit.setAuditItemFindingCount(findingCount);                List<AuditTeam> auditTeams = auditTeamService.list(Wrappers.<AuditTeam>lambdaQuery()                        .eq(AuditTeam::getAuditId, audit.getId()));                audit.setAuditTeams(auditTeams);            }        });        return auditPage;    }    @Override    public Audit getReport(Long id) {        Audit audit = this.getById(id);        AuditProject auditProject = auditProjectService.getById(audit.getProjectId());        audit.setAuditproject(auditProject);        List<AuditItem> auditItems = auditItemService.list(Wrappers.<AuditItem>lambdaQuery()                .eq(AuditItem::getAuditId, audit.getId()));        audit.setAuditItems(auditItems);        List<AuditItemAppendix> auditItemAppendixs = auditItemAppendixService.list(Wrappers.<AuditItemAppendix>lambdaQuery()                .eq(AuditItemAppendix::getAuditId, audit.getId()));        audit.setAuditItemAppendixs(auditItemAppendixs);        return audit;    }    @Override    public List<Audit> getByScheduleId(Integer scheduleId) {        List<Audit> list = this.list(Wrappers.<Audit>lambdaQuery()                .eq(Audit::getScheduleId, scheduleId)                .ne(Audit::getServiceStatus, AuditStatus.CANCELLED.getCode()));        return list;    }}