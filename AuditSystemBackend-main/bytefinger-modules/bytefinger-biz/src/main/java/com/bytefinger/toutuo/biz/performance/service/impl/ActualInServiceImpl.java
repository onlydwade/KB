package com.bytefinger.toutuo.biz.performance.service.impl;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.util.ObjectUtil;import com.alibaba.fastjson2.JSON;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.core.utils.StringUtils;import com.bytefinger.common.core.utils.TreeUtils;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.common.security.utils.CnareaUtils;import com.bytefinger.common.security.utils.DictUtils;import com.bytefinger.toutuo.api.system.core.domain.SysDictData;import com.bytefinger.toutuo.api.system.core.domain.vo.AreaListVo;import com.bytefinger.toutuo.api.system.file.domain.SysFile;import com.bytefinger.toutuo.biz.operlog.service.IOperLogService;import com.bytefinger.toutuo.biz.performance.domain.*;import com.bytefinger.toutuo.biz.performance.domain.BO.ProjectActualBO;import com.bytefinger.toutuo.biz.performance.domain.BO.ProjectMethodConfigBO;import com.bytefinger.toutuo.biz.performance.domain.dto.ActualInDTO;import com.bytefinger.toutuo.biz.performance.domain.dto.ActualInSummaryDTO;import com.bytefinger.toutuo.biz.performance.domain.template.PerformanceTemplate;import com.bytefinger.toutuo.biz.performance.domain.vo.*;import com.bytefinger.toutuo.biz.performance.manager.PerformanceManager;import com.bytefinger.toutuo.biz.performance.mapper.ActualInMonthMapper;import com.bytefinger.toutuo.biz.performance.mapper.BudgetInMonthMapper;import com.bytefinger.toutuo.biz.performance.mapper.BudgetInYearMapper;import com.bytefinger.toutuo.biz.performance.service.IBudgetInService;import com.bytefinger.toutuo.biz.performance.service.IIndicatorDisplayLevelService;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.mapper.ProjectMapper;import com.bytefinger.toutuo.biz.project.service.IProjectService;import com.bytefinger.toutuo.biz.auditdocument.domain.AuditDocument;import com.bytefinger.toutuo.biz.auditdocument.domain.AuditDocumentTemplate;import com.bytefinger.toutuo.biz.auditdocument.service.IAuditDocumentService;import com.bytefinger.toutuo.biz.auditdocument.service.IAuditDocumentTemplateService;import com.bytefinger.toutuo.biz.user.service.UserService;import com.google.common.collect.Sets;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;/** * <p> * 实际收入 * </p> * * @author patrick * @since 2022-11-27 */@Service//@AllArgsConstructor@RequiredArgsConstructor@Slf4jpublic class ActualInServiceImpl implements com.bytefinger.toutuo.biz.performance.service.IActualInService {    private final ProjectMapper projectMapper;    private final PerformanceManager performanceManager;    private final ActualInMonthMapper actualInMonthMapper;    private final UserService userService;    private final IOperLogService operLogService;    private static final String BIZ_ACTUAL_IN = "BIZ_ACTUAL_IN";    private final IBudgetInService budgetInYearService;    private final BudgetInYearMapper budgetInYearMapper;    private final BudgetInMonthMapper budgetInMonthMapper;    private final IAuditDocumentTemplateService projectDocumentTemplateService;    private final IAuditDocumentService projectDocumentService;    public final IProjectService projectService;    private final long StepMenuId = 18L;    private final String OperName = "合同（盖章版）扫描件上传";    /**     * 下载服务器主机（域名）     */    @Value("${downLoad.host}")    private String downLoadHost;    private final IIndicatorDisplayLevelService indicatorDisplayLevelService;    @Override    public ActualInMonth addOrUpdate(ActualInMonth actualInMonth) {        ActualInMonth dbActualInMonth = actualInMonthMapper.selectOne(Wrappers.<ActualInMonth>lambdaUpdate()                .eq(ActualInMonth::getRecordId, actualInMonth.getRecordId())                .eq(ActualInMonth::getFieldKey, actualInMonth.getFieldKey()));        if (null != dbActualInMonth) {            dbActualInMonth.setFieldValue(actualInMonth.getFieldValue());            actualInMonthMapper.updateById(dbActualInMonth);        } else {            actualInMonthMapper.insert(actualInMonth);        }        return actualInMonth;    }    @DataFill    @Override    public IPage<Project> summaryPage(ActualInSummaryDTO dto, QueryPage queryPage){         conditionSummary(dto,queryPage);        IPage<Project> projectPage = projectMapper.getActualInSummaryList(queryPage.toPage(), queryPage.getWrapper(), queryPage.getDbParams());        if(CollUtil.isNotEmpty(projectPage.getRecords())&& projectPage.getRecords().size()>0){            List<AuditDocumentTemplate> templates = projectDocumentTemplateService.list(Wrappers.<AuditDocumentTemplate>lambdaQuery()                    .eq(AuditDocumentTemplate::getStepMenuId, StepMenuId).eq(AuditDocumentTemplate::getOperName, OperName));            projectPage.getRecords().forEach(project->{                //拓展模式                if (!Objects.isNull(project.getBusinessSegments())){                    List<SysDictData> sysDictDataList = DictUtils.getDictCache("YE_WU_BAN_KUAI");                    for (int i = 0; i < sysDictDataList.size(); i++) {                        if (sysDictDataList.get(i).getDictValue().equals(project.getBusinessSegments())) {                            project.setBusinessSegmentsTitle(sysDictDataList.get(i).getDictLabel());                        }                    }                }else {                    project.setBusinessSegmentsTitle(null);                }                //拓展模式                if (!Objects.isNull(project.getExpansionMode())){                    List<SysDictData> sysDictDataList = DictUtils.getDictCache("TUO_ZHAN_MO_SHI");                    for (int i = 0; i < sysDictDataList.size(); i++) {                        if (sysDictDataList.get(i).getDictValue().equals(project.getExpansionMode())) {                            project.setExpansionModeTitle(sysDictDataList.get(i).getDictLabel());                        }                    }                }else {                    project.setExpansionModeTitle(null);                }                //招标类型                if (!Objects.isNull(project.getBidingMode())){                    List<SysDictData> sysDictDataList = DictUtils.getDictCache("ZHAO_BIAO_LEI_XING");                    for (int i = 0; i < sysDictDataList.size(); i++) {                        if (sysDictDataList.get(i).getDictValue().equals(project.getBidingMode())) {                            project.setBidingModeTitle(sysDictDataList.get(i).getDictLabel());                        }                    }                }else {                    project.setBidingModeTitle(null);                }                //是否为续签项目                if (!Objects.isNull(project.getInStock())){                    List<SysDictData> sysDictDataList = DictUtils.getDictCache("SHI_FOU");                    for (int i = 0; i < sysDictDataList.size(); i++) {                        if (sysDictDataList.get(i).getDictValue().equals(project.getInStock())) {                            project.setInStockTitle(sysDictDataList.get(i).getDictLabel());                        }                    }                }else {                    project.setInStockTitle(null);                }                //服务内容                if (!Objects.isNull(project.getServiceContent())){                    String[] serviceContentArray = project.getServiceContent().split(",");                    List<SysDictData> sysDictDataList = DictUtils.getDictCache("FU_WU_NEI_RONG");                    List<String> serviceContentStrList = new ArrayList<>();                    for (String serviceContent : serviceContentArray) {                        for (int i = 0; i < sysDictDataList.size(); i++) {                            if (sysDictDataList.get(i).getDictValue().equals(serviceContent)) {                                serviceContentStrList.add(sysDictDataList.get(i).getDictLabel());                            }                        }                    }                    project.setServiceContentTitle(StringUtils.join(serviceContentStrList,","));                }else {                    project.setServiceContentTitle(null);                }                //获取省市信息                List<AreaListVo> areaListVos = CnareaUtils.getMapCache("listProvinceCityArea");                //省份                AreaListVo areaListVoProvince = areaListVos.stream().filter(m -> m.getAreaCode().equals(project.getProvinceCode())).findFirst().orElse(null);                if (!Objects.isNull(areaListVoProvince)){                    project.setProvinceTitle(areaListVoProvince.getName());                }else {                    project.setProvinceTitle(null);                }                //市区                AreaListVo areaListVoCity = areaListVoProvince.getSubAreaList().stream().filter(m -> m.getAreaCode().equals(project.getCityCode())).findFirst().orElse(null);                if (!Objects.isNull(areaListVoCity)){                    project.setCityTitle(areaListVoCity.getName());                }else {                    project.setCityTitle(null);                }                templates.forEach(v -> {                    List<AuditDocument> documentLists = projectDocumentService.list(Wrappers.<AuditDocument>lambdaQuery()                            .eq(AuditDocument::getDocumentTemplateId, v.getId())                            .in(AuditDocument::getProjectId, project.getId())                            .eq(AuditDocument::getStepMenuId, StepMenuId));                    List<String> pathString = new ArrayList<>();                    documentLists.forEach(t -> {                        if ( Objects.nonNull(t.getDocmentObject())) {                            SysFile file = JSON.parseObject(t.getDocmentObject(), SysFile.class);                            String path = "";                            if (Objects.nonNull(file)) {                                path = downLoadHost + "/system/download3?name=" + file.getName() + "&ossPath=" + file.getOssPath();                            }                            if (StringUtils.isNotEmpty(path))                                pathString.add(path);                        }                    });                    project.setDownloadPath(String.join(";", pathString));                });                //增量和非增量 转化金额都是计算出来的                if (null != project.getContractAmount() && null != project.getProposedServicePeriod() && !project.getProposedServicePeriod().equals(0)) {                    project.setIsIncrement("FOU");                    project.setAnnualConversionAmount(this.projectService.getCalculateAnnualConversion(project));                    project.setIsIncrement("SHI");                    project.setAnnualConversionAmounts(this.projectService.getCalculateAnnualConversion(project));                }                //来源不是项目补录的默认为是                if(!"项目补录新增".equals(project.getSourceName())){                    project.setIsCountPerformance("SHI");                }                if("SHI".equals(project.getIsCountPerformance())){                    project.setIsCountPerformanceStr("是");                }                if("FOU".equals(project.getIsCountPerformance())){                    project.setIsCountPerformanceStr("否");                }            });        }        if (CollUtil.isNotEmpty(projectPage.getRecords()) && projectPage.getRecords().size() > 0) {            projectPage.setRecords(projectService.getYtProjetList(projectPage.getRecords()));        }        return projectPage;    }    /**     * 条件生成     *     * @param dto     * @return     */    public QueryPage conditionSummary(ActualInSummaryDTO dto, QueryPage queryPage) {        queryPage.setPageNo(dto.getPageNo());        queryPage.setPageSize(dto.getPageSize());        // 时间查询        queryPage.getGeParams().put("performanceConfirmTime", dto.getStart());        queryPage.getLeParams().put("performanceConfirmTime", dto.getEnd());        String expandCompanyId = "expandCompanyId";        if (ObjectUtil.isNotEmpty(dto.getExpandCompanyIds())) {            Set<Long> ids = Sets.newHashSet();            TreeUtils.getSubNodeIds(userService.deptTree(), dto.getExpandCompanyIds(), ids);            queryPage.getInParams().remove(expandCompanyId);            queryPage.getDbParams().put("expandCompanyId", ids);        }        //归属单位        if(CollUtil.isNotEmpty(dto.getCompanyIds())) {            Set<Long> ids = Sets.newHashSet();            TreeUtils.getSubNodeIds(userService.deptTree(), dto.getCompanyIds(), ids);            queryPage.getInParams().put("companyId", new ArrayList<>(ids));        }        String inStock = "inStock";        if (ObjectUtil.isNotEmpty(dto.getInStock())&& !"-1".equals(dto.getInStock())) {            queryPage.getDbParams().put("inStock", dto.getInStock());            queryPage.getParams().remove(inStock);        }        String hasExpandCompanys = "hasExpandCompanys";        if (ObjectUtil.isNotEmpty(dto.getHasExpandCompanys())&& !"-1".equals(dto.getHasExpandCompanys())) {            queryPage.getDbParams().put("hasExpandCompanys", dto.getHasExpandCompanys());            queryPage.getParams().remove(hasExpandCompanys);        }        String isRenewalTender = "isRenewalTender";        if (ObjectUtil.isNotEmpty(dto.getIsRenewalTender())&& !"-1".equals(dto.getIsRenewalTender())) {            queryPage.getDbParams().put("isRenewalTender", dto.getIsRenewalTender());            queryPage.getParams().remove(isRenewalTender);        }        return queryPage;    }    @Override    public List<ActualCountThreeVO> achievementListThree(ActualInDTO actualInDTO) {        //获取考核指标项        String BIZ_BUDGET_IN = "BIZ_BUDGET_IN";        List<PerformanceTemplate> performanceTemplates = performanceManager.getTemplate(BIZ_BUDGET_IN);        List<ActualCountThreeVO> dataList = new ArrayList<>();        performanceTemplates.forEach(performanceTemplate -> {            //根据指标项获取权限列表            List<Long> ids = indicatorDisplayLevelService.getIndicatorDisplayLevelIds(performanceTemplate.getFieldKey());            if (ids.contains(actualInDTO.getDeptId())) {                ActualCountThreeVO row1 = new ActualCountThreeVO();                row1.setLabel(performanceTemplate.getFieldName()+"("+performanceTemplate.getFieldUnitName()+")");                row1.setType("业绩目标("+performanceTemplate.getFieldUnitName()+")");                row1.setKey(performanceTemplate.getFieldKey());                dataList.add(row1);            }        });        Integer currYear = DateUtils.year(actualInDTO.getStart());        List<BudgetIndicatorData> budgetInYears = projectMapper.selectBudgetIndicatorData(currYear,actualInDTO.getDeptId());        List<String> exsit = new ArrayList<>();        exsit.add("HTZJE");        exsit.add("HTNDJE");        exsit.add("YXXXTBL");        exsit.add("ZDTZHTJE");        exsit.add("XMBLL");        dataList.forEach(a->{            budgetInYears.forEach(b->{                if(a.getKey().equals(b.getFieldKey())){                    if(b.getAmount() != null){                        String last = a.getLabel().substring(a.getLabel().length()-3);                        if("(个)".equals(last)){                            a.setValue(b.getAmount().setScale(0).toString());                        }else {                            a.setValue(b.getAmount().toString());                        }                    }                }            });            if(exsit.contains(a.getKey())){                a.setIsMerge("2");            }else {                a.setIsMerge("1");            }        });        return dataList;    }    @Override    public List<ActualCountThreeVO> totalThree(ActualInDTO actualInDTO) {        String year = new SimpleDateFormat("yyyy").format(actualInDTO.getStart());        List<ActualCountThreeVO> dataList = new ArrayList<>();        //1。查询满足条件的项目列表        //有效提报量        List<ProjectActualBO> projectYxtbList = this.projectMapper.selectProjectPerformanceYx(                year,                actualInDTO.getDeptId()        );        //项目保留率        ProjectActualBO projectRetention = this.projectMapper.selectProjectPerformanceBl(                year,                actualInDTO.getDeptId()        );        //年度金额，合同金额        List<ProjectActualBO> projectList = this.projectMapper.selectProjectPerformance(                year,                actualInDTO.getDeptId(),                actualInDTO.getLevel()                );        //2获取自定义配置        ProjectMethodConfigBO htzjePz = this.projectMapper.selectProjectMethodConfig(year,"HTZJE");        ProjectMethodConfigBO htndjePz = this.projectMapper.selectProjectMethodConfig(year,"HTNDJE");        //3.根据项目类型获取金额        // 合同总金额        BigDecimal htje = new BigDecimal(0);        // 合同年度金额        BigDecimal ndhtje = new BigDecimal(0);        // 主导拓展合同金额        BigDecimal zdtzje = new BigDecimal(0);        // 转化收入        BigDecimal zhsr = new BigDecimal(0);        for( ProjectActualBO project : projectList){            BigDecimal a = new BigDecimal(0);            BigDecimal b = new BigDecimal(0);            if ( project.getProjectType() != null) {                //单一投标                if ( "DAN_YI_TOU_BIAO_XIANG_MU".equals(project.getProjectType())){                    if (htzjePz.getYesIncremental() == 1 && project.getIncrementalAmount() != null) {                        a = a.add(project.getIncrementalAmount());                    }                    if (htzjePz.getYesKeep() == 1 && project.getKeepAmount() != null) {                        a = a.add(project.getKeepAmount());                    }                    if (htzjePz.getYesAdd() == 1 && project.getAddAmount() != null) {                        a = a.add(project.getAddAmount());                    }                    if (htndjePz.getYesIncremental() == 1 && project.getIncrementalAmountYear() != null) {                        b = b.add(project.getIncrementalAmountYear());                    }                    if (htndjePz.getYesKeep() == 1 && project.getKeepAmountYear() != null) {                        b = b.add(project.getKeepAmountYear());                    }                    if (htndjePz.getYesAdd() == 1 && project.getAddAmountYear() != null) {                        b = b.add(project.getAddAmountYear());                    }                }                //单一非投标                if ("DAN_YI_FEI_TOU_BIAO_XIANG_MU".equals(project.getProjectType())) {                    if (htzjePz.getNoIncremental() == 1 && project.getIncrementalAmount() != null) {                        a = a.add(project.getIncrementalAmount());                    }                    if (htzjePz.getNoKeep() == 1 && project.getKeepAmount() != null) {                        a = a.add(project.getKeepAmount());                    }                    if (htzjePz.getNoAdd() == 1 && project.getAddAmount() != null) {                        a = a.add(project.getAddAmount());                    }                    if (htndjePz.getNoIncremental() == 1 && project.getIncrementalAmountYear() != null) {                        b = b.add(project.getIncrementalAmountYear());                    }                    if (htndjePz.getNoKeep() == 1 && project.getKeepAmountYear() != null) {                        b = b.add(project.getKeepAmountYear());                    }                    if (htndjePz.getNoAdd() == 1 && project.getAddAmountYear() != null) {                        b = b.add(project.getAddAmountYear());                    }                }                //总部层级不计算比率                if(actualInDTO.getLevel() != 1){                    //合同总金额 = 自定义配置后金额  x  合同比率                    htje = htje.add(a.multiply(project.getContractAmountRate().divide(new BigDecimal(100))));                    //合同年度金额 = 自定义配置后金额  x  合同比率                    ndhtje = ndhtje.add(b.multiply(project.getContractAmountRate().divide(new BigDecimal(100))));                    //主导拓展金额 = 自定义配置后的年度金额  x  主导比率                    zdtzje = zdtzje.add(b.multiply(project.getLeadingExpansionRate().divide(new BigDecimal(100))));                    //转化收入 = 转化金额 x 合同比率                    if(project.getCurrentConvertIncome() != null){                        zhsr = zhsr.add(project.getCurrentConvertIncome().multiply(project.getContractAmountRate().divide(new BigDecimal(100))));                    }                }else {                    htje = htje.add(a);                    ndhtje = ndhtje.add(b);                    zdtzje = zdtzje.add(b);                    if(project.getCurrentConvertIncome() != null){                        zhsr = zhsr.add(project.getCurrentConvertIncome());                    }                }            }        }        ActualCountThreeVO htzjeRow = new ActualCountThreeVO();        htzjeRow.setKey("HTZJE");        htzjeRow.setLabel("合同总金额(元)");        htzjeRow.setType("实际金额（元）");        htzjeRow.setValue(htje.setScale(2, BigDecimal.ROUND_HALF_UP).toString());        dataList.add(htzjeRow);        ActualCountThreeVO htndjeRow = new ActualCountThreeVO();        htndjeRow.setKey("HTNDJE");        htndjeRow.setLabel("合同年度金额(元)");        htndjeRow.setType("实际金额（元）");        htndjeRow.setValue(ndhtje.setScale(2, BigDecimal.ROUND_HALF_UP).toString());        dataList.add(htndjeRow);        ActualCountThreeVO yxtblRow = new ActualCountThreeVO();        yxtblRow.setKey("YXXXTBL");        yxtblRow.setLabel("有效信息提报量(个)");        yxtblRow.setType("实际个数（个）");        yxtblRow.setValue(String.valueOf(projectYxtbList.size()));        dataList.add(yxtblRow);        ActualCountThreeVO zdtzjeRow = new ActualCountThreeVO();        zdtzjeRow.setKey("ZDTZHTJE");        zdtzjeRow.setLabel("主导拓展合同金额(元)");        zdtzjeRow.setType("实际金额（元）");        zdtzjeRow.setValue(zdtzje.setScale(2, BigDecimal.ROUND_HALF_UP).toString());        dataList.add(zdtzjeRow);        ActualCountThreeVO xmbllRow = new ActualCountThreeVO();        xmbllRow.setKey("XMBLL");        xmbllRow.setLabel("项目保留率(%)");        xmbllRow.setType("实际保留率（%）");        xmbllRow.setValue(                projectRetention == null                || "0.00".equals(projectRetention.getRetentionRate())                        ? null : projectRetention.getRetentionRate()        );        dataList.add(xmbllRow);        ActualCountThreeVO htzhsrRow = new ActualCountThreeVO();        htzhsrRow.setKey("HTDNZHSR");        htzhsrRow.setLabel("合同当年转化收入(元)");        htzhsrRow.setType("实际金额（元）");        htzhsrRow.setIsMerge("1");        htzhsrRow.setValue(zhsr.setScale(2, BigDecimal.ROUND_HALF_UP).toString());        dataList.add(htzhsrRow);        return dataList;    }    @Override    public void addOrUpdate(List<ActualInMonth> actualInMonths) {        for (ActualInMonth actualInMonth : actualInMonths) {            if (null == actualInMonth.getId()) {                actualInMonthMapper.insert(actualInMonth);            } else {                actualInMonthMapper.updateById(actualInMonth);            }        }    }    @Override    public void lockedOrUn(List<String> ids, int locked) {        actualInMonthMapper.update(null,                Wrappers.<ActualInMonth>lambdaUpdate()                        .set(ActualInMonth::getLocked, locked)                        .in(ActualInMonth::getId, ids));    }}