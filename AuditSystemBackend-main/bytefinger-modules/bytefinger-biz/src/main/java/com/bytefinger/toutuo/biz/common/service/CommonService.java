package com.bytefinger.toutuo.biz.common.service;import cn.hutool.core.collection.CollUtil;import com.alibaba.fastjson.JSONObject;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.List;/** * 线索商机联合处理类 * * @author pat * @date 2022/10/19 13:45 **/@Service@AllArgsConstructor@Slf4jpublic class CommonService {////    private final ILeadService leadService;////    private final IOpportunityService opportunityService;////    private final IProjectService projectService;////    private final ICustomerContactService customerContactService;////    private final ProjectStepMenuMapper projectStepMenuMapper;////    private final ProjectStepMapper projectStepMapper;////    private final FollowLogService followLogService;////    private final IProjectDocumentService projectDocumentService;////    /**//     * 判断是否有查看数据的权限//     *//     * @param modelName//     * @param id//     * @return//     *///    public boolean validDataRoleKey(String modelName, Long id) {//        BizCommonBaseEntity bizCommonBaseEntity = null;//        switch (modelName) {//            case "Lead"://                bizCommonBaseEntity = leadService.getById(id);//                break;//            case "Opportunity"://                bizCommonBaseEntity = opportunityService.getById(id);//                break;//            case "Project"://                bizCommonBaseEntity = projectService.getById(id);//                break;//            case "CustomerContact"://                bizCommonBaseEntity = customerContactService.getById(id);//                break;//        }////        if (null != bizCommonBaseEntity) {//            return RoleKeys.dataShow(bizCommonBaseEntity.getRoleKeys());//        }////        return false;//    }////    /**//     * 主动放弃商机//     * 1、修改商机状态为放弃//     * 2、记录日志//     * 3、修改线索为冻结 + 冻结时间//     * 4、手动放弃，不冻结线索//     *//     * @param opportunityId//     *///    @Transactional(rollbackFor = RuntimeException.class)//    public R giveup(Long opportunityId, String remarks, String operTitle) {//        Opportunity opportunity = opportunityService.getById(opportunityId);//        //记录当前放弃时间//        opportunity.setGaveupTime(new Date());////        // 修改记录并记录日志//        opportunityService.updateOpportunityStatus(opportunity, OpportunityStatus.YI_FANG_QI, operTitle, remarks, true);////        //修改线索数据//        Long leadId = opportunity.getLeadId();//        leadService.changeLeadStatus(leadId, LeadStatus.YI_ZHUAN_SHANG_JI,"放弃商机");////        return R.ok();//    }////    /**//     * 转项目//     *//     * @param toProject//     * @return//     *///    @Transactional(rollbackFor = RuntimeException.class)//    public R<Opportunity> toProject(Project toProject) {//        Opportunity opportunity = opportunityService.getById(toProject.getOpportunityId());////        // 设置数据//        toProject.setLeadId(opportunity.getLeadId());//        toProject.setLeadNo(opportunity.getLeadNo());//        toProject.setOpportunityId(opportunity.getId());//        toProject.setOpportunityNo(opportunity.getOpportunityNo());//        toProject.setExpireStatus(0);////        // 是否新进城市//        toProject.setNewCity((projectService.count(Wrappers.<Project>lambdaUpdate()//                .eq(Project::getCityCode, toProject.getCityCode())) > 0) ? "FOU" : "SHI");////        // 是否新业态//        toProject.setNewBusinessType((projectService.count(Wrappers.<Project>lambdaUpdate()//                .eq(Project::getBusinessType, toProject.getBusinessType())) > 0) ? "FOU" : "SHI");////        projectService.add(toProject);////        // 添加项目前几个步骤默认已完成//        List<ProjectStepMenu> projectStepMenus = projectStepMenuMapper.selectList(Wrappers.<ProjectStepMenu>lambdaQuery()//                .in(ProjectStepMenu::getCode, new String[]{"xxxx", "bgjl", "xmgz", "xmtd", "xmwd"}));//        for (ProjectStepMenu projectStepMenu : projectStepMenus) {//            ProjectStep projectStep = new ProjectStep();//            projectStep.setProjectId(toProject.getId());//            projectStep.setStatus(1);//            projectStep.setStepMenuId(projectStepMenu.getId());//            projectStepMapper.insert(projectStep);//        }////        // 修改商机数据//        opportunity.setProjectId(toProject.getId());//        opportunity.setProjectNo(toProject.getProjectNo());////        // 记录商机日志//        opportunityService.updateOpportunityStatus(opportunity, OpportunityStatus.YI_QI_DONG_LI_XIANG, "商机转立项", null, false);////        // 修改线索数据//        leadService.update(Wrappers.<Lead>lambdaUpdate().eq(Lead::getId, opportunity.getLeadId())//                .set(Lead::getProjectId, toProject.getId())//                .set(Lead::getProjectNo, toProject.getProjectNo()));////        // 查询追踪动态，添加文档//        // 线索阶段//        List<String> files = followLogService.getFiles(Lead.class.getSimpleName(), opportunity.getLeadId());//        if (CollUtil.isNotEmpty(files)) {//            for (String file : files) {//                projectDocumentService.addDocuments(toProject.getId(), ProjectDocumentTemplateCode.XSJD.getCode(), file);//            }//        }////        // 商机阶段//        files = followLogService.getFiles(Opportunity.class.getSimpleName(), opportunity.getId());//        if (CollUtil.isNotEmpty(files)) {//            for (String file : files) {//                projectDocumentService.addDocuments(toProject.getId(), ProjectDocumentTemplateCode.SJJD.getCode(), file);//            }//        }////        return R.ok(opportunityService.getById(opportunity.getId()));//    }////    /**//     * 项目续签 or 重新投标//     * 1、验证项目状态//     * 2、修改项目相关数据，记录日志//     * 3、新增线索相关数据（并直接认领，自动转商机），记录日志 + 关联关系//     * 4、新增商机相关数据，记录日志 + 关联关系//     * 5、返回一个VO包含线索编号、商机编号等数据//     * 6、线索来源，项目续签，商机来源，项目续签//     *//     * @param projectId//     * @return//     *///    @Transactional(rollbackFor = RuntimeException.class)//    public R<ExpireProjectVO> renewalOrAgainBid(Long projectId, String title, ProjectExpireStatus projectExpireStatus) {//        Project project = projectService.getById(projectId);////        projectService.checkExpireStatus(project);////        // 生成线索并转商机//        Lead lead = new Lead();//        BeanUtils.copyBeanProp(lead, project);//        lead.setProjectId(project.getId());//        lead.setProcessLog(this.processLog(projectId, (project.getProjectName() + title + "新增线索"), Project.class.getSimpleName()));//        lead.setInfoSource("ZI_YOU");//        lead.setLeadName(project.getProjectName());//        lead.setClaimTime(new Date());//        lead.setFollowTime(new Date());//        leadService.add(lead);////        // 生成商机//        Opportunity opportunity = new Opportunity();//        BeanUtils.copyBeanProp(opportunity, lead);//        BeanUtils.copyBeanProp(opportunity, project);//        opportunity.setLeadId(lead.getId());//        opportunity.setLeadNo(lead.getLeadNo());//        opportunity.setInfoSource("ZI_YOU");//        opportunity.setOpportunityName(project.getProjectName());//        opportunity.setProcessLog(this.processLog(projectId, (project.getProjectName() + title + "自动转商机"), Project.class.getSimpleName()));////        Long dataExcessiveId = opportunityService.toOpportunityPre(opportunity);//        opportunity = opportunityService.toOpportunity(dataExcessiveId);////        // 反写线索编号，状态//        lead.setLeadStatus(LeadStatus.YI_ZHUAN_SHANG_JI.getCode());//        lead.setOpportunityId(opportunity.getId());//        lead.setOpportunityNo(opportunity.getOpportunityNo());//        lead.setDataExcessiveId(dataExcessiveId);//        leadService.updateById(lead);////        // 修改项目数据//        project.setExpireStatus(1);//        project.setExpireType(projectExpireStatus.getCode());////        if (StringUtils.isNotEmpty(title)) {//            project.setExpireReson("");//            projectService.expireStatusProcess(projectId, "", ProjectExpireStatus.getByCode(projectExpireStatus.getCode())).toAjaxResult();////        } else {//            project.setExpireReson(title);//            projectService.expireStatusProcess(projectId, title, ProjectExpireStatus.getByCode(projectExpireStatus.getCode())).toAjaxResult();////        }//////        project.setNewLeadId(lead.getId());//        project.setNewLeadNo(lead.getLeadNo());//        project.setNewOpportunityId(opportunity.getId());//        project.setNewOpportunityNo(opportunity.getOpportunityNo());////        projectService.updateById(project);////        // 构造返回数据//        ExpireProjectVO expireProjectVO = new ExpireProjectVO();//        expireProjectVO.setLeadId(lead.getId());//        expireProjectVO.setLeadNo(lead.getLeadNo());//        expireProjectVO.setOpportunityId(opportunity.getId());//        expireProjectVO.setOpportunityNo(opportunity.getOpportunityNo());//        expireProjectVO.setProjectId(project.getId());//        expireProjectVO.setProjectNo(project.getProjectNo());//        expireProjectVO.setCommitUserId(SecurityUtils.getUserId());//        return R.ok(expireProjectVO);//    }//////    /**//     * 项目退出//     *//     * @param projectId//     * @return//     *///    @Transactional(rollbackFor = RuntimeException.class)//    public R<Project> projectExist(Long projectId, String title, ProjectExpireStatus projectExpireStatus) {//        Project project = projectService.getById(projectId);////        projectService.checkExpireStatus(project);////        // 生成线索//        Lead lead = new Lead();//        BeanUtils.copyBeanProp(lead, project);//        lead.setProjectId(project.getId());//        lead.setLeadName(project.getProjectName());//        lead.setInfoSource("ZI_YOU");//        lead.setLeadStatus(LeadStatus.WEI_YAN_ZHENG.getCode());//        lead.setProcessLog(this.processLog(projectId, (project.getProjectName() + "退出自动新增线索"), Project.class.getSimpleName()));//        leadService.add(lead);//////        // 修改项目数据//        project.setExpireStatus(1);//        project.setExpireType(projectExpireStatus.getCode());//        project.setNewLeadId(lead.getId());//        project.setNewLeadNo(lead.getLeadNo());////        if (StringUtils.isNotEmpty(title)) {//            project.setExpireReson(title);//            projectService.expireStatusProcess(projectId, title, ProjectExpireStatus.getByCode(projectExpireStatus.getCode())).toAjaxResult();////        } else {//            project.setExpireReson("");//            projectService.expireStatusProcess(projectId, "", ProjectExpireStatus.getByCode(projectExpireStatus.getCode())).toAjaxResult();//        }//////        projectService.updateById(project);////        // 构造返回数据//        project.setCommitUser(project.getUpdateUser());//        project.setCommitTime(project.getUpdateTime());//        return R.ok(project);//    }////    /**//     * 已中标、未中标生成线索//     *//     * @param project//     * @return//     *///    @Transactional(rollbackFor = RuntimeException.class)//    public R<Project> bidedResultProject(Project project) {////        // 生成线索//        if ((null != project && project.getBidedResult().equals(ProjectBidedResultStatus.WEI_ZHONG_BIAO.name()))) {//            Lead lead = new Lead();//            BeanUtils.copyBeanProp(lead, project);//            lead.setLeadName(project.getProjectName());//            lead.setLeadStatus(LeadStatus.WEI_YAN_ZHENG.getCode());//            lead.setProjectId(project.getId());//            lead.setProcessLog(//                    this.processLog(project.getId(),//                            (project.getProjectName() + ProjectStatus.getByCode(project.getProjectStatus()).getDesc() + "新增线索"),//                            Project.class.getSimpleName()));//            lead.setInfoSource("ZI_YOU");//            leadService.add(lead);////            project.setNewLeadId(lead.getId());//            project.setNewLeadNo(lead.getLeadNo());//        }////        project = projectService.update(project).getData();//        return R.ok(project);//    }//////    @Transactional(rollbackFor = RuntimeException.class)//    public R<Project> cloneProjectToOpportunity(Long projectId, String title) {////        Project project = projectService.getById(projectId);////        projectService.checkExpireStatus(project);////        // 生成线索并转商机//        Lead lead = new Lead();//        BeanUtils.copyBeanProp(lead, project);//        lead.setProjectId(project.getId());//        lead.setInfoSource("ZI_YOU");//        lead.setLeadName(project.getProjectName());//        lead.setInfoJoin("克隆线索");//        lead.setProcessLog(this.processLog(projectId, (project.getProjectName() + title + "克隆线索"), Project.class.getSimpleName()));//        lead.setClaimTime(new Date());//        lead.setFollowTime(new Date());//        leadService.add(lead);////        // 生成商机//        Opportunity opportunity = new Opportunity();//        BeanUtils.copyBeanProp(opportunity, lead);//        BeanUtils.copyBeanProp(opportunity, project);//        opportunity.setLeadId(lead.getId());//        opportunity.setLeadNo(lead.getLeadNo());//        opportunity.setInfoSource("ZI_YOU");//        opportunity.setInfoJoin("克隆线索");//        opportunity.setOpportunityName(project.getProjectName());//        opportunity.setProcessLog(this.processLog(projectId, (opportunity.getOpportunityName() + title + "克隆商机"), Project.class.getSimpleName()));//////        Long dataExcessiveId = opportunityService.toOpportunityPre(opportunity);//        opportunity = opportunityService.toOpportunity(dataExcessiveId);////        // 反写线索编号，状态//        lead.setLeadStatus(LeadStatus.YI_ZHUAN_SHANG_JI.getCode());//        lead.setOpportunityId(opportunity.getId());//        lead.setOpportunityNo(opportunity.getOpportunityNo());//        lead.setDataExcessiveId(dataExcessiveId);//        leadService.updateById(lead);////        project.setNewLeadId(lead.getId());//        project.setNewLeadNo(lead.getLeadNo());//        project.setNewOpportunityId(opportunity.getId());//        project.setNewOpportunityNo(opportunity.getOpportunityNo());//        projectService.updateById(project);////        return R.ok(project);//    }////    /**//     * 日志//     *//     * @param relationId//     * @param name//     * @param relationType//     * @return//     *///    private String processLog(Long relationId, String name, String relationType) {//        JSONObject jsonObject = new JSONObject();//        jsonObject.put("relationId", relationId);//        jsonObject.put("name", name);//        jsonObject.put("relationType", relationType);//        return jsonObject.toJSONString();//    }}