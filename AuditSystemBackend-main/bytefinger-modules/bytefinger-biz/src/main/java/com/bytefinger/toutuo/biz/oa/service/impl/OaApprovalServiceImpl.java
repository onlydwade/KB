package com.bytefinger.toutuo.biz.oa.service.impl;import cn.hutool.core.bean.BeanUtil;import cn.hutool.http.HttpUtil;import com.alibaba.fastjson2.JSON;import com.alibaba.fastjson2.JSONObject;import com.baomidou.mybatisplus.core.conditions.Wrapper;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.exception.ServiceException;import com.bytefinger.common.core.utils.CamelUtils;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.core.utils.StringUtils;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.api.biz.project.enums.OAApprovalStatus;import com.bytefinger.toutuo.api.biz.user.domain.SysUser;import com.bytefinger.toutuo.biz.customer.service.ICustomerService;import com.bytefinger.toutuo.biz.oa.config.OaProperties;import com.bytefinger.toutuo.biz.oa.constants.OaConstant;import com.bytefinger.toutuo.biz.oa.domain.OaApproval;import com.bytefinger.toutuo.biz.oa.domain.OaApprovalLog;import com.bytefinger.toutuo.biz.oa.domain.OaMessageLog;import com.bytefinger.toutuo.biz.oa.domain.dto.*;import com.bytefinger.toutuo.biz.oa.mapper.OaApprovalMapper;import com.bytefinger.toutuo.biz.oa.service.IOaApprovalLogService;import com.bytefinger.toutuo.biz.oa.service.IOaApprovalService;import com.bytefinger.toutuo.biz.oa.service.IOaMessageLogService;import com.bytefinger.toutuo.biz.project.constants.ProjectConstant;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectBid;import com.bytefinger.toutuo.biz.project.enums.ProjectStatus;import com.bytefinger.toutuo.biz.project.service.IProjectBacklogService;import com.bytefinger.toutuo.biz.project.service.IProjectBidService;import com.bytefinger.toutuo.biz.project.service.IProjectService;import com.bytefinger.toutuo.biz.projectcompany.oaapproval.CompanyOaApprovalService;import com.bytefinger.toutuo.biz.auditdocument.domain.AuditDocument;import com.bytefinger.toutuo.biz.auditdocument.domain.AuditDocumentTemplate;import com.bytefinger.toutuo.biz.auditdocument.service.IAuditDocumentService;import com.bytefinger.toutuo.biz.auditdocument.service.IAuditDocumentTemplateService;import com.bytefinger.toutuo.biz.projectextension.oaapproval.ProjectExtensionOaApprovalService;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStep;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStepMenu;import com.bytefinger.toutuo.biz.projectstep.dto.OaTodo;import com.bytefinger.toutuo.biz.projectstep.service.IProjectStepMenuService;import com.bytefinger.toutuo.biz.projectstep.service.IProjectStepService;import com.bytefinger.toutuo.biz.user.service.ISysUserService;import com.bytefinger.toutuo.biz.workbrief.dto.DeleteTodoDto;import com.bytefinger.toutuo.common.constants.MessageTypeConstant;import com.bytefinger.toutuo.common.domain.BizUserBaseEntity;import com.bytefinger.toutuo.common.enums.ModuleType;import com.bytefinger.toutuo.common.mapper.CommonMapper;import com.bytefinger.toutuo.common.service.BizService;import com.bytefinger.toutuo.common.service.SendMessageService;import com.google.common.collect.Sets;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.commons.compress.utils.Lists;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import org.springframework.util.ObjectUtils;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;import java.util.stream.Collectors;/** * <p> * 发起OA审批 服务实现类 * </p> * * @author Jone * @since 2023-02-16 */@Service@AllArgsConstructor@Slf4jpublic class OaApprovalServiceImpl extends BizService<OaApprovalMapper, OaApproval> implements IOaApprovalService {    private final ICustomerService customerService;    private final IProjectService projectService;    private final IProjectStepService projectStepService;    private final IProjectStepMenuService projectStepMenuService;    private final IOaApprovalLogService oApprovalLogService;    private final IOaMessageLogService oaMessageLogService;    private final SendMessageService sendMessageService;    private final CommonMapper commonMapper;    private final OaApprovalMapper oaApprovalMapper;    private final OaProperties oaProperties;    private final ISysUserService userService;    private final CompanyOaApprovalService companyOaApprovalService;    private final ProjectExtensionOaApprovalService projectExtensionOaApprovalService;    private final IProjectBidService projectBidService;    private final IProjectBacklogService projectBacklogService;    private final IAuditDocumentService projectDocumentService;    private final IAuditDocumentTemplateService projectDocumentTemplateService;    @Override    @Transactional    public OaApproval add(OaApproval oaApproval) {        //新增前审批记录置为失效状态//        List<OaApproval> oaApprovals = this.list(Wrappers.<OaApproval>lambdaQuery().eq(OaApproval::getModuleName, oaApproval.getModuleName())//                .eq(OaApproval::getRecordId, oaApproval.getRecordId()).eq(OaApproval::getSubRecordId, oaApproval.getSubRecordId()).eq(OaApproval::getExpire, OaConstant.FOU));//        if(!CollectionUtils.isEmpty(oaApprovals) && oaApprovals.size() > 0){//            OaApproval oaExpire = new OaApproval();//            oaExpire.setExpire(OaConstant.SHI);//            this.update(Wrappers.<OaApproval>lambdaUpdate().in(OaApproval::getId, oaApprovals.stream().map(v -> v.getId()).collect(Collectors.toList())));//        }        super.save(oaApproval);        OaApprovalDTO oaApprovalDTO = new OaApprovalDTO();        Map<String, String> docCreator = new HashMap<>();        SysUser user = userService.getById(oaApproval.getSubmitUserId());        docCreator.put("MobileNo", user.getPhonenumber());        oaApprovalDTO.setDocCreator(docCreator);        oaApprovalDTO.setDocStatus("10");        oaApprovalDTO.setDocSubject(oaApproval.getSubject());        if("bsps".equals(oaApproval.getStepCode())){            oaApprovalDTO.setDocSubject(oaApprovalDTO.getDocSubject() + "(用印)");        }        oaApprovalDTO.setFdTemplateId(oaApproval.getTemplateId());        Map<String, String> formValues = new HashMap<>();        formValues.put("iframeUrl", oaApproval.getDetailUrl());        formValues.put("iframeHeight", "500px");        String fdLbpmType = GetFdLbpmType(oaApproval);        if (StringUtils.isNotEmpty(fdLbpmType)) {            formValues.put("fdLbpmType", fdLbpmType);        }        if ("xmjxps".equals(oaApproval.getStepCode()) && !oaApproval.getMainProcess()) {            Project project = projectService.getById(oaApproval.getRecordId());            if (project != null) {                oaApprovalDTO.setDocSubject(project.getProjectName() + "-" + "项目废止评审");            }        }        oaApprovalDTO.setFormValues(formValues);        String body = HttpUtil.createPost(oaProperties.getApprovalUrl()).contentType("application/json").body(JSON.toJSONString(oaApprovalDTO)).execute().body();        if (null == body || "".equals(body)) {            throw new ServiceException("审批发起失败，请稍后重试!");        }        //审批编号存储        oaApproval.setApprovalNo(body);        oaApproval.setApprovalUrl(String.format(oaProperties.getOaDetailUrl(), body));        this.updateById(oaApproval);        //        if (oaApproval.getStepCode().equals("xmlx")) {//            ReimbursementApplicationDTO dto=new ReimbursementApplicationDTO();//            sentReimbursementApplication( dto);//        }        //更新节点审批状态为审批中        if (null != oaApproval.getMainProcess() && oaApproval.getMainProcess() && ModuleType.PROJECT.getCode().equals(oaApproval.getModuleName()) &&                !ProjectStatus.YI_ZHONG_ZHI.getCode().equals(oaApproval.getApprovalData())) {            ProjectStep projectStep = new ProjectStep();            projectStep.setApprovalStatus(OAApprovalStatus.CAO_GAO.getCode());            projectStep.setProjectId(oaApproval.getRecordId());            projectStep.setStepMenuId(oaApproval.getSubRecordId());            projectStepService.update(projectStep);        }        UpdateProjectStepFdType(oaApproval.getRecordId(), oaApproval.getSubRecordId(), fdLbpmType);        return oaApproval;    }    public String GetProjectStepFdType(Long projectId, Long stepMenuId) {        try {            ProjectStep projectStep = projectStepService.getOne(Wrappers.<ProjectStep>lambdaQuery().eq(ProjectStep::getProjectId, projectId).eq(ProjectStep::getStepMenuId, stepMenuId));            if (projectStep == null)                return "";            return projectStep.getFdType();        } catch (Exception ex) {            System.out.println("GetProjectStepFdType" + ex.getMessage());            return "";        }    }    public void UpdateProjectStepFdType(Long projectId, Long stepMenuId, String fdType) {        try {            ProjectStep projectStep = projectStepService.getOne(Wrappers.<ProjectStep>lambdaQuery().eq(ProjectStep::getProjectId, projectId)                    .eq(ProjectStep::getStepMenuId, stepMenuId));            projectStep.setFdType(fdType);            projectStepService.updateById(projectStep);        } catch (Exception ex) {            System.out.println("UpdateProjectStepFdType" + ex.getMessage());        }    }    public String GetFdLbpmType(OaApproval oaApproval) {        if (oaApproval.getStepCode() == null)            return "";        if (!oaApproval.getStepCode().equals("xmjxps") && !oaApproval.getStepCode().equals("bsps")) {            return "";        }        Project project = projectService.getById(oaApproval.getRecordId());        if (project == null) {            return "";        }        //bid_type:投标类型(枚举类型TOU_BIAO_LEI_XING),纸质标(ZHI_ZHI_BIAO),电子标(DIAN_ZHI_BIAO)        //application_type:申请类型(枚举类型SHEN_QING_LEI_XING),投标类型只有选择纸质标才可以显示选择,总部级印章(ZONG_BU_JI_BIE_YIN_ZHANG),单位级别(DAN_WEI_JI_BIE_YIN_ZHANG)        //relatedSealType:        // 盖公章	1        // 借公章	2        // 盖法人章、法人签字章、法人手签字章	3        // 借法人章、法人签字章、法人手签字章	4        // 条件传1:        // 投标类型=纸质标，申请类型=总部级印章，关联用印类型=盖公章        // 条件传4:        // 投标类型=纸质标，申请类型=总部级印章，关联用印类型=盖法人章、法人签字章、法人手签字章        // 条件传6:        // 投标类型=纸质标，申请类型=总部级印章，关联用印类型=借公章        // 条件传7:        // 投标类型=纸质标，申请类型=总部级印章，关联用印类型=借法人章、法人签字章、法人手签字章        // 条件传5:        // 投标类型=纸质标，申请类型=单位级印章，关联用印类型=盖公章        // 条件传2:        // 投标类型=纸质标，申请类型=单位级印章，关联用印类型=借公章        // 条件传3:        // 投标类型=电子标，申请类型=单位级印章        if (oaApproval.getStepCode().equals("bsps")) {            ///////////////////////////////印章字典选项----by chengwei 20231210//            -- 1、仅借公章//            -- 2、同时借公章、法人章//            -- 3、仅盖公章//            -- 4、同时盖公章、法人章//            -- 5、同时盖公章、法人章、法人签字章//            -- 6、同时盖公章、法人签字章            /////////////////////////////////            流程条件//            条件传1://            投标类型=纸质标，申请类型=总部级印章，关联用印类型=仅盖公章//            条件传4://            投标类型=纸质标，申请类型=总部级印章，关联用章类型=同时盖公章、法人章、法人签字章 或者 同时盖公章、法人签字章 或者 同时盖公章、法人章//            条件传5://            投标类型=纸质标，申请类型=单位级印章，关联用印类型=仅盖公章 或者 同时盖公章、法人章、法人签字章 或者 同时盖公章、法人签字章//            条件传2://            投标类型=纸质标，申请类型=单位级印章，关联用印类型=仅借公章 或者 同时借公章、法人章//            条件传6://            投标类型=纸质标，申请类型=总部级印章，关联用印类型=仅借公章//            条件传7://            投标类型=纸质标，申请类型=总部级印章，关联用印类型=同时借公章、法人章//            条件传3://            投标类型=电子标            //电子标            if ("DIAN_ZHI_BIAO".equals(project.getBidType())) {                //是否涉及公章借用 是                if("SHI".equals(project.getIsSealBorrowing())){                    if ("ZONG_BU_JI_BIE_YIN_ZHANG".equals(project.getApplicationType())) {                        //用印类型 = 总部级印章 流程=总部借章                        return "6";                    }                    else {                        //用印类型 = 单位级印章 流程=纸质标单位借章                        return "2";                    }                }                //是否涉及公章借用 否 = 总部标书审核（电子标                return "3";            }            //纸质标            if ("ZHI_ZHI_BIAO".equals(project.getBidType())) {                //总部级印章                if ("ZONG_BU_JI_BIE_YIN_ZHANG".equals(project.getApplicationType())) {                    if (project.getRelatedSealType().contains("1"))                        return "6";                    if (project.getRelatedSealType().contains("2"))                        return "7";                    if (project.getRelatedSealType().contains("3"))                        return "1";                    if (project.getRelatedSealType().contains("5") || project.getRelatedSealType().contains("6") || project.getRelatedSealType().contains("4"))                        return "4";                } else {                    //单位级别印章                    if (project.getRelatedSealType().contains("3") || project.getRelatedSealType().contains("4") || project.getRelatedSealType().contains("5") || project.getRelatedSealType().contains("6"))                        return "5";                    if (project.getRelatedSealType().contains("2") || project.getRelatedSealType().contains("1"))                        return "2";                }            }//            /////////////////--旧逻辑-废弃//            //电子标//            if (!"ZHI_ZHI_BIAO".equals(project.getBidType())) {//                return "3";//            }//            //纸质标//            //总部级印章//            if ("ZHI_ZHI_BIAO".equals(project.getBidType())) {////                if ("ZONG_BU_JI_BIE_YIN_ZHANG".equals(project.getApplicationType())) {////                    if (project.getRelatedSealType().contains("1"))//                        return "1";//                    if (project.getRelatedSealType().contains("2"))//                        return "6";//                    if (project.getRelatedSealType().contains("3"))//                        return "4";//                    if (project.getRelatedSealType().contains("4"))//                        return "7";//                }else {//                    //单位级别印章//                    if (project.getRelatedSealType().contains("1"))//                        return "5";//                    if (project.getRelatedSealType().contains("2"))//                        return "2";//                }//            }        }        if (oaApproval.getStepCode().equals("xmjxps") && oaApproval.getMainProcess()) {            if (project.getOperationTeamId().equals(project.getCompanyId())) {                return "1";            }            return "2";        }        return "";    }    @Override    @Transactional    public OaApproval update(OaApproval oaApproval) {        OaApproval oaApprovalDb = this.getById(oaApproval.getId());        if (oaApprovalDb == null)            throw new ServiceException("查询oa审批信息为空");        String oldFdLbpmType = GetProjectStepFdType(oaApproval.getRecordId(), oaApproval.getSubRecordId());        String newFdLbpmType = GetFdLbpmType(oaApproval);        //分支数不同的时候，发起新oa审批        if (StringUtils.isNotEmpty(oldFdLbpmType) && !oldFdLbpmType.equals(newFdLbpmType)) {            oaApproval.setId(null);            oaApproval.setSubmitUserId(SecurityUtils.getUserId());            return add(oaApproval);        }        if (oaApprovalDb.getSubmitUserId().equals(oaApproval.getSubmitUserId()))            throw new ServiceException("审批发起失败，重新发起人和发起人必须为同一个人!");        OaApprovalDTO oaApprovalDTO = new OaApprovalDTO();        Map<String, String> docCreator = new HashMap<>();        SysUser user = userService.getById(oaApprovalDb.getSubmitUserId());        docCreator.put("MobileNo", user.getPhonenumber());        oaApprovalDTO.setDocCreator(docCreator);        OaApprovalFlowParamDTO flowParamDTO = new OaApprovalFlowParamDTO();        flowParamDTO.setOperationType("drafter_submit");        flowParamDTO.setHandler(docCreator);//        Map<String, String> flowParam = new HashMap<>();//        flowParam.put("operationType", "drafter_submit");//        flowParam.put("handler", JSON.toJSONString(docCreator));        oaApprovalDTO.setFlowParam(flowParamDTO);        oaApprovalDTO.setDocStatus("10");        oaApprovalDTO.setDocSubject(oaApprovalDb.getSubject());        oaApprovalDTO.setFdId(oaApprovalDb.getApprovalNo());        oaApprovalDTO.setFdTemplateId(oaApprovalDb.getTemplateId());        Map<String, String> formValues = new HashMap<>();        formValues.put("iframeUrl", oaApproval.getDetailUrl());        formValues.put("iframeHeight", "500px");        String fdLbpmType = GetFdLbpmType(oaApproval);        if (StringUtils.isNotEmpty(fdLbpmType)) {            formValues.put("fdLbpmType", fdLbpmType);        }        oaApprovalDTO.setFormValues(formValues);        String body = HttpUtil.createPost(oaProperties.getApprovalUpdateUrl()).contentType("application/json").body(JSON.toJSONString(oaApprovalDTO)).execute().body();        if (null == body || "".equals(body)) {            throw new ServiceException("审批发起失败，请稍后重试!");        }        this.updateById(oaApproval);        //更新节点审批状态为审批中//        if (null != oaApproval.getMainProcess() && oaApproval.getMainProcess() && ModuleType.PROJECT.getCode().equals(oaApproval.getModuleName()) &&//                !ProjectStatus.YI_ZHONG_ZHI.getCode().equals(oaApproval.getApprovalData()))        if (null != oaApproval.getMainProcess() && oaApproval.getMainProcess() && ModuleType.PROJECT.getCode().equals(oaApproval.getModuleName()) &&                !ProjectStatus.YI_ZHONG_ZHI.getCode().equals(oaApproval.getApprovalData())) {            ProjectStep projectStep = new ProjectStep();            projectStep.setApprovalStatus(OAApprovalStatus.CAO_GAO.getCode());            projectStep.setProjectId(oaApproval.getRecordId());            projectStep.setStepMenuId(oaApproval.getSubRecordId());            projectStepService.update(projectStep);        }        return oaApproval;    }    @Override    @DataFill    public IPage<OaApproval> page(QueryPage queryPage) {        return oaApprovalMapper.selectPage(queryPage.toPage(), queryPage.getWrapper());    }    public static void main(String[] args) {        String beginTime = "2018-07-28 14:42:32";        String endTime = "2018-07-29 12:26:32";        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        try {            Date date1 = format.parse(beginTime);            Date date2 = format.parse(endTime);            boolean before = date2.after(date1);            System.out.println(before);        } catch (ParseException e) {            e.printStackTrace();        }    }    @Override    @Transactional(rollbackFor = Exception.class)    public void callBack(OaCallBackDTO oaCallBackDTO) {        //写记录日志        OaApprovalLog oaApprovalLog = new OaApprovalLog();        oaApprovalLog.setApprovalTime(oaCallBackDTO.getApprovalTime());        oaApprovalLog.setApprovalNo(oaCallBackDTO.getApprovalNo());        oaApprovalLog.setContent(oaCallBackDTO.getDetailLog());        oApprovalLogService.save(oaApprovalLog);        //判断非结束状态，则直接返回//        if(OAApprovalStatus.TONG_GUO.getCode() != oaCallBackDTO.getApprovalStatus() && OAApprovalStatus.BO_HUI.getCode() != oaCallBackDTO.getApprovalStatus() &&//            OAApprovalStatus.SHEN_PI_ZHONG.getCode() != oaCallBackDTO.getApprovalStatus()){//            return;//        }        OaApproval oaApproval = new OaApproval();        oaApproval.setApprovalNo(oaCallBackDTO.getApprovalNo());        oaApproval.setApprovalStatus(oaCallBackDTO.getApprovalStatus());        oaApproval.setOaStatus(oaCallBackDTO.getOaStatus());        oaApproval.setApprovalTime(oaCallBackDTO.getApprovalTime());        oaApproval.setApprovalResult(oaCallBackDTO.getApprovalResult());        oaApproval.setApprovalUrl(oaCallBackDTO.getApprovalUrl());        oaApproval.setRemark(oaCallBackDTO.getRemark());        this.update(oaApproval, Wrappers.<OaApproval>lambdaUpdate().eq(OaApproval::getApprovalNo, oaCallBackDTO.getApprovalNo()));        oaApproval = this.getOne(Wrappers.<OaApproval>lambdaQuery().eq(OaApproval::getApprovalNo, oaCallBackDTO.getApprovalNo()));        //查询是否为还存在未完成的审批主流程        boolean hasMainProcess = false;        switch (oaApproval.getModuleName()) {            case OaConstant.PROJECTEXTENSION:                List<OaApproval> projectExpansionOaApprovals = this.list(Wrappers.<OaApproval>lambdaQuery().eq(OaApproval::getModuleName, oaApproval.getModuleName())                        .eq(OaApproval::getRecordId, oaApproval.getRecordId()).eq(OaApproval::getSubRecordId, oaApproval.getSubRecordId())                        .eq(OaApproval::getSubModuleName, oaApproval.getSubModuleName())                        .eq(OaApproval::getMainProcess, true));                if (!CollectionUtils.isEmpty(projectExpansionOaApprovals) && projectExpansionOaApprovals.size() > 0) {                    OaApproval finalOaApproval = oaApproval;                    Optional<OaApproval> optional = projectExpansionOaApprovals.stream().filter(v -> v.getCreateTime().after(finalOaApproval.getCreateTime()) &&                            (OAApprovalStatus.SHEN_PI_ZHONG.getCode() == v.getApprovalStatus() || OAApprovalStatus.CAO_GAO.getCode() == v.getApprovalStatus())).findFirst();                    if (optional.isPresent()) {                        hasMainProcess = true;                    }                }//                if (!CollectionUtils.isEmpty(projectExpansionOaApprovals) && projectExpansionOaApprovals.size() > 1){//                    Date max = Collections.max(projectExpansionOaApprovals.stream().map(pro->pro.getCreateTime()).collect(Collectors.toList()));//                    if (!max.equals(oaApproval.getCreateTime())){//                        hasMainProcess = true;//                    }//                }                if (!hasMainProcess) {                    projectExtensionOaApprovalService.oaApproval(oaApproval);                }                break;            case OaConstant.COMPANY:                List<OaApproval> companyOaApprovals = this.list(Wrappers.<OaApproval>lambdaQuery().eq(OaApproval::getModuleName, oaApproval.getModuleName())                        .eq(OaApproval::getRecordId, oaApproval.getRecordId()).eq(OaApproval::getSubRecordId, oaApproval.getSubRecordId())                        .eq(OaApproval::getSubModuleName, oaApproval.getSubModuleName()).eq(OaApproval::getSubRecordAction, oaApproval.getSubRecordAction())                        .eq(OaApproval::getMainProcess, true));                if (!CollectionUtils.isEmpty(companyOaApprovals) && companyOaApprovals.size() > 0) {                    OaApproval finalOaApproval = oaApproval;                    Optional<OaApproval> optional = companyOaApprovals.stream().filter(v -> v.getCreateTime().after(finalOaApproval.getCreateTime()) &&                            (OAApprovalStatus.SHEN_PI_ZHONG.getCode() == v.getApprovalStatus() || OAApprovalStatus.CAO_GAO.getCode() == v.getApprovalStatus())).findFirst();                    if (optional.isPresent()) {                        hasMainProcess = true;                    }                }                if (!hasMainProcess) {                    companyOaApprovalService.oaApproval(oaApproval);                }                break;            case OaConstant.PROJECT:                boolean projectClose = false;                boolean projectRepeal = false;                List<OaApproval> oaApprovals = this.list(Wrappers.<OaApproval>lambdaQuery().eq(OaApproval::getModuleName, oaApproval.getModuleName())                        .eq(OaApproval::getRecordId, oaApproval.getRecordId()).eq(OaApproval::getSubRecordId, oaApproval.getSubRecordId()).eq(OaApproval::getMainProcess, true));                if (!CollectionUtils.isEmpty(oaApprovals) && oaApprovals.size() > 0) {                    OaApproval finalOaApproval = oaApproval;                    Optional<OaApproval> optional = oaApprovals.stream().filter(v -> v.getCreateTime().after(finalOaApproval.getCreateTime()) &&                            (OAApprovalStatus.SHEN_PI_ZHONG.getCode() == v.getApprovalStatus() || OAApprovalStatus.CAO_GAO.getCode() == v.getApprovalStatus())).findFirst();                    if (optional.isPresent()) {                        hasMainProcess = true;                    }                }                Project project = projectService.getById(oaApproval.getRecordId());                if (!hasMainProcess) {                    //查项目信息，变更终止合同                    if (ProjectStatus.YI_ZHONG_ZHI.getCode().equals(oaApproval.getApprovalData())) {                        projectClose = true;                        if (!ObjectUtils.isEmpty(project) && oaCallBackDTO.getApprovalStatus() == OAApprovalStatus.TONG_GUO.getCode()) {                            String bValue = project.getServiceStatus();                            project.setServiceStatus(ProjectStatus.YI_ZHONG_ZHI.getCode());                            projectService.updateById(project);                            if (StringUtils.isNotBlank(bValue)) {                                bValue = ProjectStatus.getByCode(bValue).getDesc();                            }                            operLogService.changeLog(project.getClass(), project.getId(), "变更项目为已终止状态", bValue, ProjectStatus.getByCode(project.getServiceStatus()).getDesc());                        }                    } else {                        ProjectStep step = projectStepService.getOne(Wrappers.<ProjectStep>lambdaQuery().eq(ProjectStep::getProjectId, oaApproval.getRecordId())                                .eq(ProjectStep::getStepMenuId, oaApproval.getSubRecordId()));                        if (null != oaApproval.getMainProcess() && !oaApproval.getMainProcess()) {                            //非主审批，废弃审批                            if (oaApproval.getApprovalStatus().equals(2) && oaApproval.getSubRecordId().equals(Long.valueOf(40))) {                                System.out.println("废弃审批通过后，回调");                                projectRepeal = true;                                project.setUpdateStatusDate(new Date());                                project.setServiceStatus(ProjectStatus.YI_FEI_ZHI.getCode());                                project.setIsInManagement("SHI");                                projectService.updateById(project);                            }                        }                        if (!ObjectUtils.isEmpty(step)) {                            if (null != oaApproval.getMainProcess() && oaApproval.getMainProcess()) {                                step.setApprovalStatus(oaApproval.getApprovalStatus());                                projectStepService.update(step);                                //业绩确认审批通过，项目状态变更为拓展成功                                log.info("******step:{}", step);                                if (oaApproval.getApprovalStatus().equals(2) && step.getStepMenuId().equals(Long.valueOf(18))) {                                    project.setUpdateStatusDate(new Date());                                    project.setServiceStatus(ProjectStatus.TUO_ZHAN_CHENG_GONG.getCode());                                    projectService.updateById(project);                                }                                //通过结项接口，是否在管改成是                                if (oaApproval.getApprovalStatus().equals(2) && step.getStepMenuId().equals(Long.valueOf(40))) {                                    project.setUpdateStatusDate(new Date());                                    project.setServiceStatus(ProjectStatus.ZAI_GUAN.getCode());                                    project.setIsInManagement("SHI");                                    projectService.updateById(project);                                }                                //通过投标复盘接口，并且判断是否设置为我方中标，如果是则修改项目状态，中标状态为已中标                                if (oaApproval.getApprovalStatus().equals(2) && step.getStepMenuId().equals(Long.valueOf(14))) {                                    ProjectBid projectBidByWin = projectBidService.list(Wrappers.<ProjectBid>lambdaQuery().eq(ProjectBid::getProjectId, oaApproval.getRecordId()).eq(ProjectBid::getType, ProjectConstant.PROJECT_BID_SELF).eq(ProjectBid::getWin, ProjectConstant.WIN_BID).orderByDesc(ProjectBid::getCreateTime)).stream().findFirst().orElse(null);                                    if (null != projectBidByWin) {                                        project.setUpdateStatusDate(new Date());                                        project.setServiceStatus(ProjectStatus.YI_ZHONG_BIAO.getCode());                                        project.setBidedResult(ProjectStatus.YI_ZHONG_BIAO.getCode());                                        projectService.updateById(project);                                    } else {                                        project.setUpdateStatusDate(new Date());                                        project.setServiceStatus(ProjectStatus.WEI_ZHONG_BIAO.getCode());                                        project.setBidedResult(ProjectStatus.WEI_ZHONG_BIAO.getCode());                                        projectService.updateById(project);                                    }                                }                                //单一投标项目项目立项节点完成的时候将附件代入到标书评审中                                if (step.getStepMenuId().equals(Long.valueOf(13)) && oaApproval.getApprovalStatus().equals(2)){                                    if("DAN_YI_TOU_BIAO_XIANG_MU".equals(project.getProjectType())){                                        AuditDocumentTemplate template = projectDocumentTemplateService.getOne(Wrappers.<AuditDocumentTemplate>lambdaQuery()                                                .eq(AuditDocumentTemplate::getStepMenuId,37)                                                .eq(AuditDocumentTemplate::getOperName,"招标文件")                                        );                                        List<AuditDocument> documents = projectDocumentService.list(Wrappers.<AuditDocument>lambdaQuery()                                                .eq(AuditDocument::getProjectType, "DAN_YI_TOU_BIAO_XIANG_MU")                                                .eq(AuditDocument::getProjectId, project.getId())                                                .eq(AuditDocument::getStepMenuId, 13)                                                .eq(AuditDocument::getDocumentTemplateId,1)                                                .eq(AuditDocument::getDeleted,0));                                        List<AuditDocument> newDocumentList = BeanUtil.copyToList(documents, AuditDocument.class);                                        newDocumentList.forEach(projectDocument -> {                                            projectDocument.setStepMenuId(37L);                                            projectDocument.setDocumentTemplateId(template.getId());                                            projectDocument.setCreateTime(new Date());                                        });                                        projectDocumentService.saveBatch(newDocumentList);                                    }                                }                            }                        }                    }                }                if (OAApprovalStatus.BO_HUI.getCode() == oaApproval.getApprovalStatus()) {                    operLogService.changeLog(Project.class, project.getId(), oaApproval.getSubject() + "审批驳回，流程链接：" + oaApproval.getApprovalUrl(),                            "", "");                }                //发送通知                Set<Long> ids = Sets.newHashSet();                //归属人id                ids.add(project.getAttributorUserId());                List<BizUserBaseEntity> bizUsers = commonMapper.listBizUser(                        CamelUtils.camelToUndeline(OaConstant.PROJECT),                        Arrays.asList(new Long[]{project.getId()}));                if (!bizUsers.isEmpty()) {                    ids.addAll(bizUsers.stream().map(BizUserBaseEntity::getUserId).collect(Collectors.toList()));                }                if (!CollectionUtils.isEmpty(ids)) {                    String title = "";                    if (!projectClose) {                        ProjectStepMenu stepmenu = projectStepMenuService.getById(oaApproval.getSubRecordId());                        title = null != stepmenu ? stepmenu.getName() : "";                    } else {                        title = "项目终止审批";                    }                    if (projectRepeal) {                        title = "项目废止审批";                    }                    JSONObject jsonObject = new JSONObject();                    jsonObject.put("approvalStatus", OAApprovalStatus.getByCode(oaCallBackDTO.getApprovalStatus()).getDesc());                    jsonObject.put("approvalUrl", oaCallBackDTO.getApprovalUrl());                    SysUser user = userService.getById(oaApproval.getSubmitUserId());                    jsonObject.put("submitUserName", user.getRealname());                    jsonObject.put("submitTime", DateUtils.parseDateToStr(DateUtils.YYYY_MM_DD_HH_MM_SS, oaApproval.getCreateTime()));                    String finalTitle = title;                    ids.forEach(v -> {                        sendMessageService.sendMessage(MessageTypeConstant.MESSAGE_APPROVAL, v, project.getId(),                                "【" + project.getProjectName() + "】" + finalTitle,                                jsonObject.toJSONString(), ModuleType.PROJECT.getCode(), "XI_TONG_TONG_ZHI" + "," + "DAI_BAN_TONG_ZHI");                    });                }                break;            case OaConstant.WORK_BRIEF:                List<OaApproval> workBriefOaApprovals = this.list(Wrappers.<OaApproval>lambdaQuery().eq(OaApproval::getModuleName, oaApproval.getModuleName())                        .eq(OaApproval::getRecordId, oaApproval.getRecordId()).eq(OaApproval::getSubRecordId, oaApproval.getSubRecordId())                        .eq(OaApproval::getSubModuleName, oaApproval.getSubModuleName()).eq(OaApproval::getSubRecordAction, oaApproval.getSubRecordAction())                        .eq(OaApproval::getMainProcess, true));                if (!CollectionUtils.isEmpty(workBriefOaApprovals) && workBriefOaApprovals.size() > 0) {                    OaApproval finalOaApproval = oaApproval;                    Optional<OaApproval> optional = workBriefOaApprovals.stream().filter(v -> v.getCreateTime().after(finalOaApproval.getCreateTime()) &&                            (OAApprovalStatus.SHEN_PI_ZHONG.getCode() == v.getApprovalStatus() || OAApprovalStatus.CAO_GAO.getCode() == v.getApprovalStatus())).findFirst();                    if (optional.isPresent()) {                        hasMainProcess = true;                    }                }                if (!hasMainProcess) {//                    IWorkBriefService iWorkBriefService = SpringUtil.getBean(IWorkBriefService.class);//                    iWorkBriefService.handleOaCallBack(oaApproval);                }                break;            case OaConstant.PROJECT_BACKLOG:                List<OaApproval> backlogApproval = this.list(Wrappers.<OaApproval>lambdaQuery().eq(OaApproval::getModuleName, oaApproval.getModuleName())                        .eq(OaApproval::getRecordId, oaApproval.getRecordId()).eq(OaApproval::getSubRecordId, oaApproval.getSubRecordId())                        .eq(OaApproval::getSubModuleName, oaApproval.getSubModuleName()).eq(OaApproval::getSubRecordAction, oaApproval.getSubRecordAction())                        .eq(OaApproval::getMainProcess, true));                if (!CollectionUtils.isEmpty(backlogApproval) && backlogApproval.size() > 0) {                    OaApproval finalOaApproval = oaApproval;                    Optional<OaApproval> optional = backlogApproval.stream().filter(v -> v.getCreateTime().after(finalOaApproval.getCreateTime()) &&                            (OAApprovalStatus.SHEN_PI_ZHONG.getCode() == v.getApprovalStatus() || OAApprovalStatus.CAO_GAO.getCode() == v.getApprovalStatus())).findFirst();                    if (optional.isPresent()) {                        hasMainProcess = true;                    }                }                if (!hasMainProcess) {                    projectBacklogService.oaApprovalPass(oaApproval.getRecordId(),oaApproval.getApprovalStatus());                }                break;            default:                break;        }    }    @DataFill    @Override    public OaApproval getOne(Wrapper<OaApproval> queryWrapper) {        return oaApprovalMapper.selectOne(queryWrapper);    }    @Override    public List<DeleteTodoDto> getDeleteList(String moduleType, String moduleId, String serviceId, String userId) {        LambdaQueryWrapper<OaMessageLog> wrapper = new LambdaQueryWrapper<OaMessageLog>();        if (StringUtils.isNotEmpty(moduleType)) {            wrapper.eq(OaMessageLog::getModuleType, moduleType);        }        if (StringUtils.isNotEmpty(moduleId)) {            wrapper.eq(OaMessageLog::getModuleId, moduleId);        }        if (StringUtils.isNotEmpty(serviceId)) {            wrapper.eq(OaMessageLog::getServiceId, serviceId);        }        if (StringUtils.isNotEmpty(userId)) {            wrapper.eq(OaMessageLog::getUserId, userId);        }        List<OaMessageLog> oaMessageLogList = oaMessageLogService.list(wrapper);        List<DeleteTodoDto> deleteTodoList = Lists.newArrayList();        for (int i = 0; i < oaMessageLogList.size(); i++) {            OaMessageLog item = oaMessageLogList.get(i);            try {                if (StringUtils.isEmpty(item.getMessage())) {                    continue;                }                OaTodo todo = JSON.parseObject(item.getMessage(), OaTodo.class);                DeleteTodoDto deleteItem = new DeleteTodoDto();                deleteItem.setAppName(todo.getAppName());                deleteItem.setModelName(todo.getModelName());                deleteItem.setModelId(todo.getModelId());                deleteItem.setOptType("1");                deleteItem.setType(todo.getType());                deleteTodoList.add(deleteItem);            } catch (Exception ex) {                System.out.println("异常转化，id为：" + item.getId() + ex.getMessage());            }        }        return deleteTodoList;    }    @Override    public void deleteList(String moduleType, String moduleId, String serviceId, String userId) {        List<DeleteTodoDto> deleteTodoList = getDeleteList(moduleType, moduleId, serviceId, userId);        if (CollectionUtils.isEmpty(deleteTodoList))            return;        deleteTodoList.forEach(o -> {            try {                String requestStr = JSON.toJSONString(o);                System.out.println("设为待办请求内容：" + requestStr);                String body = HttpUtil.createPost(oaProperties.getDeleteTodoUrl()).contentType("application/json").body(requestStr).execute().body();                System.out.println("设为待办返回结果：" + body);                if (null == body || "".equals(body)) {                    System.out.println("设为待办失败：" + o.getModelId());                }            } catch (Exception ex) {                System.out.println("设为待办异常:" + o.getModelId() + "异常信息为：" + ex.getMessage());            }        });    }}