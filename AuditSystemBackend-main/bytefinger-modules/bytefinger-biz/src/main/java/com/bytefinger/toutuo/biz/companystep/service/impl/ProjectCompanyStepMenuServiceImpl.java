package com.bytefinger.toutuo.biz.companystep.service.impl;import com.baomidou.mybatisplus.core.conditions.Wrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.utils.ProjectCompanyStepMenuTreeUtils;import com.bytefinger.common.core.utils.ProjectStepMenuTreeUtils;import com.bytefinger.common.core.web.domain.vo.ProjectCompanyStepMenuVO;import com.bytefinger.common.core.web.domain.vo.ProjectStepMenuVO;import com.bytefinger.toutuo.biz.companystep.domain.ProjectCompanyStepMenu;import com.bytefinger.toutuo.biz.companystep.mapper.ProjectCompanyStepMenuMapper;import com.bytefinger.toutuo.biz.companystep.service.IProjectCompanyStepMenuService;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStepMenu;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;/** * <p> * 子公司菜单 服务实现类 * </p> * * @author Jone * @since 2023-03-19 */@Service@AllArgsConstructorpublic class ProjectCompanyStepMenuServiceImpl extends ServiceImpl<ProjectCompanyStepMenuMapper, ProjectCompanyStepMenu> implements IProjectCompanyStepMenuService {    private final ProjectCompanyStepMenuMapper projectCompanyStepMenuMapper;    @Override    public List<ProjectCompanyStepMenuVO> tree(Wrapper<ProjectCompanyStepMenu> queryWrapper) {        return tree(queryWrapper, null);    }    @Override    public List<ProjectCompanyStepMenuVO> tree(long parentId) {        List<ProjectCompanyStepMenuVO> treeEntities = getProjectCompanyStepMenuVOS(Wrappers.<ProjectCompanyStepMenu>lambdaQuery().orderByAsc(ProjectCompanyStepMenu::getSorts));        return ProjectCompanyStepMenuTreeUtils.listTreeByParentId(treeEntities, parentId);    }    @Override    public List<ProjectCompanyStepMenuVO> tree(Wrapper<ProjectCompanyStepMenu> queryWrapper, Integer isDocument) {        List<ProjectCompanyStepMenuVO> treeEntities = getProjectCompanyStepMenuVOS(queryWrapper);        return ProjectCompanyStepMenuTreeUtils.listTreeByDocument(treeEntities,isDocument);    }    private List<ProjectCompanyStepMenuVO> getProjectCompanyStepMenuVOS(Wrapper<ProjectCompanyStepMenu> queryWrapper) {        List<ProjectCompanyStepMenu> stepMenus = projectCompanyStepMenuMapper.selectList(queryWrapper);        List<ProjectCompanyStepMenuVO> treeEntities = stepMenus.stream().map(item -> new ProjectCompanyStepMenuVO()                .setId(item.getId())                .setParentId(item.getParentId())                .setName(item.getName())                .setCode(item.getCode())                .setLevel(item.getLevel())                .setSorts(item.getSorts())                .setIsShow(item.getIsShow())                .setIsDocument(item.getIsDocument())                .setOaApproval(item.getOaApproval())                .setOfflineApproval(item.getOfflineApproval())).collect(Collectors.toList());        return treeEntities;    }}