package com.bytefinger.toutuo.biz.projectstep.service.impl;import java.math.BigDecimal;import cn.hutool.http.HttpUtil;import com.alibaba.fastjson2.JSON;import com.bytefinger.common.core.utils.DateUtils;import cn.hutool.core.bean.BeanUtil;import cn.hutool.core.collection.CollectionUtil;import cn.hutool.core.util.ObjectUtil;import cn.hutool.core.util.StrUtil;import com.alibaba.fastjson2.JSONObject;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.domain.BaseEntity;import com.bytefinger.common.core.web.domain.vo.AjaxResult;import com.bytefinger.toutuo.api.biz.user.domain.SysDept;import com.bytefinger.toutuo.api.biz.user.domain.SysUser;import com.bytefinger.toutuo.biz.companydocument.domain.ProjectCompanyDocument;import com.bytefinger.toutuo.biz.companydocument.service.IProjectCompanyDocumentService;import com.bytefinger.toutuo.biz.companydocument.service.IProjectCompanyDocumentTemplateService;import com.bytefinger.toutuo.biz.interfacelog.service.IInterfaceLogService;import com.bytefinger.toutuo.biz.oa.config.OaProperties;import com.bytefinger.toutuo.biz.oa.constants.OaConstant;import com.bytefinger.toutuo.biz.oa.domain.OaApproval;import com.bytefinger.toutuo.biz.oa.domain.OaApprovalBackup;import com.bytefinger.toutuo.biz.oa.domain.OaApprovalLog;import com.bytefinger.toutuo.biz.oa.domain.OaApprovalLogBackup;import com.bytefinger.toutuo.biz.oa.service.IOaApprovalBackupService;import com.bytefinger.toutuo.biz.oa.service.IOaApprovalLogBackupService;import com.bytefinger.toutuo.biz.oa.service.IOaApprovalLogService;import com.bytefinger.toutuo.biz.oa.service.IOaApprovalService;import com.bytefinger.toutuo.biz.performance.service.IBudgetInService;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectTeam;import com.bytefinger.toutuo.biz.project.enums.ProjectStatus;import com.bytefinger.toutuo.biz.project.mapper.ProjectMapper;import com.bytefinger.toutuo.biz.project.service.IProjectService;import com.bytefinger.toutuo.biz.project.service.IProjectTeamService;import com.bytefinger.toutuo.biz.projectcompany.domain.ProjectCompany;import com.bytefinger.toutuo.biz.projectcompany.domain.ProjectCompanyExecutives;import com.bytefinger.toutuo.biz.projectcompany.domain.ProjectCompanyShareholder;import com.bytefinger.toutuo.biz.projectcompany.service.IProjectCompanyExecutivesService;import com.bytefinger.toutuo.biz.projectcompany.service.IProjectCompanyService;import com.bytefinger.toutuo.biz.projectcompany.service.IProjectCompanyShareholderService;import com.bytefinger.toutuo.biz.auditdocument.mapper.AuditDocumentMapper;import com.bytefinger.toutuo.biz.projectstep.constants.ProjectStepConstant;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStep;import com.bytefinger.toutuo.biz.projectstep.domain.ProjectStepMenu;import com.bytefinger.toutuo.biz.projectstep.dto.OaTodo;import com.bytefinger.toutuo.biz.projectstep.mapper.ProjectStepMapper;import com.bytefinger.toutuo.biz.projectstep.mapper.ProjectStepMenuMapper;import com.bytefinger.toutuo.biz.projectstep.service.IProjectStepMenuConfigService;import com.bytefinger.toutuo.biz.projectstep.service.IProjectStepService;import com.bytefinger.toutuo.biz.user.service.ISysDeptService;import com.bytefinger.toutuo.biz.user.service.ISysUserDeptPostService;import com.bytefinger.toutuo.biz.user.service.ISysUserService;import com.bytefinger.toutuo.common.service.SendMessageService;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Lazy;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.*;import java.util.stream.Collectors;/** * <p> * 项目步骤完成状态 服务实现类 * </p> * <p> * * * * @author Jone * @since 2023-01-31 */@Service@RequiredArgsConstructor(onConstructor_ = {@Lazy}) //使用懒加载解决循环依赖的问题public class ProjectStepServiceImpl extends ServiceImpl<ProjectStepMapper, ProjectStep> implements IProjectStepService {    private final ProjectStepMapper projectStepMapper;    private final ProjectMapper projectMapper;    private final ProjectStepMenuMapper projectStepMenuMapper;    private final SendMessageService sendMessageService;    private final IProjectCompanyService projectCompanyService;    private final IProjectStepMenuConfigService projectStepMenuConfigService;    private final IOaApprovalService oaApprovalService;    private final IOaApprovalLogService oaApprovalLogService;    private final IOaApprovalBackupService oaApprovalBackupService;    private final IOaApprovalLogBackupService oaApprovalLogBackupService;    private final IProjectService projectService;    private final IProjectTeamService projectTeamService;    private final IProjectCompanyExecutivesService projectCompanyExecutivesService;    private final IProjectCompanyShareholderService projectCompanyShareholderService;    private final IProjectCompanyDocumentService projectCompanyDocumentService;    private final IProjectCompanyDocumentTemplateService projectCompanyDocumentTemplateService;    private final ISysUserDeptPostService sysUserDeptPostService;    private final OaProperties oaProperties;    private final ISysUserService sysUserService;    private final ISysDeptService sysDeptService;    private final IInterfaceLogService iInterfaceLogService;    private final AuditDocumentMapper projectDocumentMapper;    private final IBudgetInService budgetInYearService;    //提供默认的人员投后负责人信息，用于录入工商信息时给与默认人员//    @Value("${projectCompany.default.touHouPrincipal.userId}")//    public Long userId;//    @Value("${projectCompany.default.touHouPrincipal.roleType}")//    public String roleType;//    @Value("${projectCompany.default.touHouPrincipal.roleKey}")//    public String roleKey;    @Override    public List<ProjectStep> listByProjectId(Long projectId) {        return projectStepMapper.selectList(Wrappers.<ProjectStep>lambdaQuery()                .eq(ProjectStep::getProjectId, projectId));    }    @Override    public boolean save(ProjectStep entity) {        return super.save(entity);    }    public static void main(String[] args) {        String d = "{\"DAN_YI_FEI_TOU_BIAO_XIANG_MU\":\"TUO_ZHAN_CHENG_GONG\",\"DAN_YI_FEI_TOU_BIAO_XIANG_MU\":\"TUO_ZHAN_CHENG_GONG\"}";        String serviceStatus = JSONObject.parseObject(d).getString("DAN_YI_FEI_TOU_BIAO_XIANG_MU");        System.out.println(serviceStatus);    }    @Override    public AjaxResult update(ProjectStep projectStep) {//        //判断项目是否为股权合作类，并且变更的下一个节点是不是工商企业注册信息录入，如果是，必须校验标记完成的必填项//        Project projectOld = projectMapper.selectById(projectStep.getProjectId());//        ProjectStepMenu projectStepMenu = projectStepMenuMapper.selectById(projectStep.getStepMenuId());////        //如果是股权合作类项目，然后标记完成的节点是项目付款节点，则把下一个节点工商注册信息需要的默认投后负责人配置好//        if (projectStep.getStepMenuId() == 21 && ObjectUtil.isNotNull(projectOld) && "GU_QUAN_HE_ZUO_XIANG_MU".equals(projectOld.getProjectType())) {//            ProjectTeam projectTeamOld = projectTeamService.getOne(new LambdaQueryWrapper<ProjectTeam>()//                    .eq(ProjectTeam::getRecordId, projectOld.getId())//                    .eq(ProjectTeam::getUserId, userId)//            );//            //该项目未添加过此默认的投后负责人到企业工商信息录入节点就走以下逻辑//            if (ObjectUtil.isNull(projectTeamOld)) {//                //查找人员部门//                List<SysUserDeptPostInfoDTO> sysUserDeptPostInfoDTOS = sysUserDeptPostService.listByUserId(userId);//                ProjectTeam projectTeam = new ProjectTeam();//                projectTeam.setRecordId(projectOld.getId());//                projectTeam.setUserId(userId);//                if (CollectionUtil.isNotEmpty(sysUserDeptPostInfoDTOS)) {//                    projectTeam.setDeptId(sysUserDeptPostInfoDTOS.get(0).getDeptId());//                }//                projectTeam.setRoleType(roleType);//                projectTeam.setRoleKey(roleKey);//                projectTeam.setCreateTime(new Date());//                projectTeamService.save(projectTeam);//            }//        }//        //如果是股权合作类项目，然后标记完成的节点是工商注册信息录入，就校验必填项//        if (projectStep.getStepMenuId() == 24 && ObjectUtil.isNotNull(projectOld) && "GU_QUAN_HE_ZUO_XIANG_MU".equals(projectOld.getProjectType())) {////            if (projectStep.getStatus() != null && projectStep.getStatus().equals(1))//                setOytProjectTeam(projectStep.getProjectId());////            String errorMsg = checkProjectCompanyInfo(projectOld);//            if (StrUtil.isNotBlank(errorMsg)) {//                return AjaxResult.error(errorMsg);//            }//        }//////        ProjectStep projectStepDB = this.getOne(Wrappers.<ProjectStep>lambdaQuery().eq(ProjectStep::getProjectId, projectStep.getProjectId())//                .eq(ProjectStep::getStepMenuId, projectStep.getStepMenuId()));//        if (ObjectUtils.isEmpty(projectStepDB)) {//            projectStep.setHandleTime(new Date());//            this.save(projectStep);//            if (null != projectStep.getStatus() && ProjectStepConstant.PROJECT_STEP_DONE == projectStep.getStatus()) {//                if (ProjectStepConstant.YJQRSP.equals(projectStepMenu.getCode())) {//                    Project project = new Project();//                    project.setId(projectStep.getProjectId());//                    project.setPerformanceConfirmTime(new Date());//                    projectMapper.updateById(project);//                }//                if (ProjectStepConstant.BCCLSP.equals(projectStepMenu.getCode())) {//项目签约确认完成后修改业绩完成时间//                    Project project = new Project();//                    project.setId(projectStep.getProjectId());//                    project.setPerformanceConfirmTime(new Date());//                    projectMapper.updateById(project);//                }//            }//        } else {//            //如果当前节点已完成则直接返回//            if (ProjectStepConstant.PROJECT_STEP_DONE == projectStepDB.getStatus()) {//                return AjaxResult.success();//            }////            projectStep.setId(projectStepDB.getId());//            Integer status = (OAApprovalStatus.TONG_GUO.getCode() == projectStep.getApprovalStatus() ||//                    OAApprovalStatus.XIAN_XIA_SHEN_PI.getCode() == projectStep.getApprovalStatus() ||//                    OAApprovalStatus.WU_XU_SHEN_PI.getCode() == projectStep.getApprovalStatus()) ? ProjectStepConstant.PROJECT_STEP_DONE : ProjectStepConstant.PROJECT_STEP_UNDONE;//            projectStep.setStatus(status);//            projectStep.setHandleTime(new Date());//            this.updateById(projectStep);////            if (ProjectStepConstant.PROJECT_STEP_DONE == status) {//                //ProjectStepMenu projectStepMenu = projectStepMenuMapper.selectById(projectStep.getStepMenuId());//                if (ProjectStepConstant.YJQRSP.equals(projectStepMenu.getCode())) {//                    Project project = new Project();//                    project.setId(projectStep.getProjectId());//                    project.setPerformanceConfirmTime(new Date());//                    projectMapper.updateById(project);//                }//                if (ProjectStepConstant.BCCLSP.equals(projectStepMenu.getCode())) {//项目签约确认完成后修改业绩完成时间//                    Project project = new Project();//                    project.setId(projectStep.getProjectId());//                    project.setPerformanceConfirmTime(new Date());//                    projectMapper.updateById(project);//                }//            }//        }////        if (null != projectStep.getStatus() && ProjectStepConstant.PROJECT_STEP_DONE == projectStep.getStatus()) {//            //当业绩确认节点审批通过，调用计算业绩//            if (projectStep.getStepMenuId() == 18) {//                budgetInYearService.calcPerformanceAllocationData(  projectStep.getProjectId());//            }//            if (projectStep.getStepMenuId() == 21) {//                sendMessage(projectOld, projectStepMenu);//            }////            if (projectStep.getStepMenuId() == 24) {//                sendMessage(projectOld, projectStepMenu);//            }//            //变更项目状态//            //ProjectStepMenu projectStepMenu = projectStepMenuMapper.selectById(projectStep.getStepMenuId());//            Project project = projectMapper.selectById(projectStep.getProjectId());//            if (StringUtils.isNotBlank(projectStepMenu.getServiceStatus())) {//                String serviceStatus = JSONObject.parseObject(projectStepMenu.getServiceStatus()).getString(project.getProjectType());//                if ("ZHONG_BIAO_ZHUANG_TAI".equals(serviceStatus)) {//                    project.setUpdateStatusDate(new Date());//                    project.setServiceStatus(project.getBidedResult());//                    projectMapper.updateById(project);//                } else if ("ZAI_GUAN".equals(serviceStatus) && ProjectStepConstant.GU_QUAN_HE_ZUO_XIANG_MU.equals(project.getProjectType())) {//                    project.setUpdateStatusDate(new Date());//                    project.setServiceStatus(serviceStatus);//                    projectMapper.updateById(project);//                    // ProjectCompany one = projectCompanyService.getOne(Wrappers.<ProjectCompany>lambdaQuery().eq(ProjectCompany::getProjectId, project.getId()));//                    List<ProjectCompany> list = projectCompanyService.list(Wrappers.<ProjectCompany>lambdaQuery().eq(ProjectCompany::getProjectId, project.getId()));//                    if (CollectionUtils.isNotEmpty(list)) {////                        for (ProjectCompany one : list) {//                            if (ObjectUtil.isNotNull(one)) {//                                sendMessageService.sendMessage(project.getPrincipalId(), one.getId(),//                                        "【" + project.getProjectName() + "】" + "状态变更为在管提醒",//                                        "请尽快接管跟进新项目", ModuleType.COMPANY_INFO.getCode(), "XI_TONG_TONG_ZHI" + "," + "DAI_BAN_TONG_ZHI");//                            }//                        }//                    }//////                } else if ("ZAI_GUAN".equals(serviceStatus) && (ProjectStepConstant.DAN_YI_TOU_BIAO_XIANG_MU.equals(project.getProjectType()) || ProjectStepConstant.DAN_YI_FEI_TOU_BIAO_XIANG_MU.equals(project.getProjectType()))) {//                    //拓后移交提醒：当单一项目状态变更为在管时,即单一项目已完成拓后移交时,同时系统将向该项目的拓后负责人及团队成员发送消息通知。//                    //拓后负责人//                    List<Long> ids = new ArrayList<>();//                    if (!ObjectUtils.isEmpty(project.getPrincipalId())) {//                        ids.add(project.getPrincipalId());//                    }//                    project.setUpdateStatusDate(new Date());//                    project.setServiceStatus(serviceStatus);//                    projectMapper.updateById(project);//                    //项目团队//                    List<ProjectTeam> projectTeamList = projectTeamService.list(Wrappers.<ProjectTeam>lambdaQuery().eq(ProjectTeam::getRecordId, project.getId()));//                    if (!ObjectUtils.isEmpty(projectTeamList) && projectTeamList.size() > 0) {//                        ids.addAll(projectTeamList.stream().filter(v -> com.baomidou.mybatisplus.core.toolkit.ObjectUtils.isNotEmpty(v.getUserId())).map(v -> v.getUserId()).collect(Collectors.toList()));//                    }//                    if (ObjectUtil.isNotNull(ids) && ids.size() > 0) {//                        ids.forEach(v -> {//                            sendMessageService.sendMessage(v, project.getId(),//                                    "【" + project.getProjectName() + "】" + ProjectNotify.ExtensionDelivery.getCode(),//                                    ProjectNotify.ExtensionDelivery.getDesc(), ModuleType.PROJECT_EXTEXSION.getCode(), "XI_TONG_TONG_ZHI" + "," + "DAI_BAN_TONG_ZHI");//                        });//                    }//                } else if (StringUtils.isNotBlank(serviceStatus)) {//                    project.setUpdateStatusDate(new Date());//                    project.setServiceStatus(serviceStatus);//                    projectMapper.updateById(project);//                }////            }////            //运营团队组建通过后：审批通过完成后，把【合同（盖章版）扫描件上传】【测算报告上传】文件copy到托运移交-节点//            if (projectStep.getStepMenuId() == 41) {//                List<ProjectDocument> documents11 = projectDocumentMapper.selectList(Wrappers.<ProjectDocument>lambdaQuery()//                        .eq(ProjectDocument::getDocumentTemplateId,  9L)//                        .eq(ProjectDocument::getProjectId, project.getId())//                        .eq(ProjectDocument::getStepMenuId, "18"));//////                List<ProjectDocument> documents12 = projectDocumentMapper.selectList(Wrappers.<ProjectDocument>lambdaQuery()//                        .eq(ProjectDocument::getDocumentTemplateId,  4L)//                        .eq(ProjectDocument::getProjectId, project.getId())//                        .eq(ProjectDocument::getStepMenuId, "12"));////                documents11.forEach(t->{//                    t.setId(null);//                    t.setDocumentTemplateId(11L);//                    t.setStepMenuId(16L);//                    projectDocumentMapper.insert(t);//                });//                documents12.forEach(t->{//                    t.setId(null);//                    t.setDocumentTemplateId(12L);//                    t.setStepMenuId(16L);//                    projectDocumentMapper.insert(t);//                });//            }////        //托运移交：审批通过完成后，把项目评审节点的【运营方案上传】【测算报告上传】文件copy到结项节点//            if (projectStep.getStepMenuId() == 16) {//                List<ProjectDocument> documents = projectDocumentMapper.selectList(Wrappers.<ProjectDocument>lambdaQuery()//                        .in(ProjectDocument::getDocumentTemplateId,  new Long[]{4L, 16L})//                        .eq(ProjectDocument::getProjectId, project.getId())//                        .eq(ProjectDocument::getStepMenuId, "12"));//                documents.forEach(t->{//                    t.setId(null);//                    if(4==t.getDocumentTemplateId()){//                        t.setDocumentTemplateId(1040L);//                    }//                    if(16==t.getDocumentTemplateId()){//                        t.setDocumentTemplateId(1041L);//                    }//                    t.setStepMenuId(40L);//                    projectDocumentMapper.insert(t);//                });//            }////            //迭代二：审批通过后，发起报销申请流程//            if (ProjectStepConstant.DAN_YI_TOU_BIAO_XIANG_MU.equals(project.getProjectType()) && Objects.nonNull(projectStep.getApprovalStatus()) && (OAApprovalStatus.TONG_GUO.getCode() == projectStep.getApprovalStatus() || OAApprovalStatus.XIAN_XIA_SHEN_PI.getCode() == projectStep.getApprovalStatus())) {//                iInterfaceLogService.sentReimbursementApplication(project.getId().toString(), "YES");//            }//            //特殊通知//            if (!ObjectUtils.isEmpty(projectStepMenu.getNotifyUserId())) {//                String notifyContent = projectStepMenu.getNotifyContent();//                if (StringUtils.isNotBlank(notifyContent)) {//                    notifyContent = notifyContent.replace("${projectname}", project.getProjectName());//                }//                sendMessageService.sendMessage(projectStepMenu.getNotifyUserId(), projectStep.getProjectId(), "工商信息填写提醒通知",//                        notifyContent, ModuleType.PROJECT.getCode(), "XI_TONG_TONG_ZHI" + "," + "DAI_BAN_TONG_ZHI");//            }//        }        return AjaxResult.success();    }    /**     * 校验股权合作类项目，工商企业注册信息录入标记完成前校验*     *     * @param project     * @return     */    public String checkProjectCompanyInfo(Project project) {        ProjectCompany projectCompany = projectCompanyService.getOne(new LambdaQueryWrapper<ProjectCompany>().eq(ProjectCompany::getProjectId, project.getId()));        if (ObjectUtil.isNotNull(projectCompany)) {            //基础信息校验            String name = projectCompany.getName();            if (StrUtil.isBlank(name)) {                return "企业名称不能为空！";            }            Long areaCode = projectCompany.getAreaCode();            if (null == areaCode || 0 == areaCode) {                return "省市区不能为空！";            }            Long streetCode = projectCompany.getStreetCode();            if (null == streetCode || 0 == streetCode) {                return "所属街道不能为空！";            }            String incorporationAddress = projectCompany.getIncorporationAddress();            if (StrUtil.isBlank(incorporationAddress)) {                return "注册地址不能为空！";            }            String industryType = projectCompany.getIndustryType();            if (StrUtil.isBlank(industryType)) {                return "行业分类不能为空！";            }            Date incorporationTime = projectCompany.getIncorporationTime();            if (null == incorporationTime) {                return "成立日期不能为空！";            }            String companyNo = projectCompany.getCompanyNo();            if (StrUtil.isBlank(companyNo)) {                return "统一社会信用代码不能为空！";            }            String legalRepresentative = projectCompany.getLegalRepresentative();            if (StrUtil.isBlank(legalRepresentative)) {                return "法人代表人不能为空！";            }            String chairman = projectCompany.getChairman();            if (StrUtil.isBlank(chairman)) {                return "董事长/执行董事不能为空！";            }            String smallCompany = projectCompany.getSmallCompany();            if (StrUtil.isBlank(smallCompany)) {                return "是否属于中小企业不能为空！";            }            String hightechCompany = projectCompany.getHightechCompany();            if (StrUtil.isBlank(hightechCompany)) {                return "是否属于高新技术企业不能为空！";            }            String taxPolicy = projectCompany.getTaxPolicy();            if (StrUtil.isBlank(taxPolicy)) {                return "是否享受国家财税政策不能为空！";            }            String investmentType = projectCompany.getInvestmentType();            if (StrUtil.isBlank(investmentType)) {                return "投资类型不能为空！";            }            BigDecimal shareholdingRatio = projectCompany.getShareholdingRatio();            if (null == shareholdingRatio || shareholdingRatio.compareTo(BigDecimal.ZERO) == 0) {                return "持股比例（%）不能为空！";            }            String mainBusiness = projectCompany.getMainBusiness();            if (StrUtil.isBlank(mainBusiness)) {                return "主营业务不能为空！";            }            //章程及工商执照文件校验；            int projectCompanyDocumentCount = projectCompanyDocumentService.count(new LambdaQueryWrapper<ProjectCompanyDocument>().eq(ProjectCompanyDocument::getCompanyId, projectCompany.getId()).eq(ProjectCompanyDocument::getDocumentTemplateId, 2));            if (projectCompanyDocumentCount == 0) {                return "工商执照文件不能为空！";            }            //股权信息校验            int projectCompanyShareholderCount = projectCompanyShareholderService.count(new LambdaQueryWrapper<ProjectCompanyShareholder>().eq(ProjectCompanyShareholder::getCompanyId, projectCompany.getId()).eq(ProjectCompanyShareholder::getProjectId, project.getId()));            if (projectCompanyShareholderCount == 0) {                return "股权信息不能为空！";            }            //董监高信息校验            int projectCompanyExecutivesCount = projectCompanyExecutivesService.count(new LambdaQueryWrapper<ProjectCompanyExecutives>().eq(ProjectCompanyExecutives::getCompanyId, projectCompany.getId()).eq(ProjectCompanyExecutives::getProjectId, project.getId()));            if (projectCompanyExecutivesCount == 0) {                return "董监高信息不能为空！";            }            //项目成员校验            int projectTeamCount = projectTeamService.count(new LambdaQueryWrapper<ProjectTeam>().eq(ProjectTeam::getRecordId, project.getId()));            if (projectTeamCount == 0) {                return "项目成员不能为空！";            }        }        return "";    }    //如果没有欧阳雨露，设置欧阳雨露为投后负责人    public void setOytProjectTeam(Long projectId) {        try {            List<ProjectTeam> list = projectTeamService.list(projectId);            if (CollectionUtils.isNotEmpty(list)) {                List<ProjectTeam> oyItems = list.stream().filter(o -> o.getUserId().equals(9582l)).collect(Collectors.toList());                if (CollectionUtils.isEmpty(oyItems)) {                    SysUser sysUser = sysUserService.getById(9582l);                    if (sysUser == null)                        return;                    SysDept sysDept = sysDeptService.getById(sysUser.getDeptId());                    if (sysDept == null)                        return;                    ProjectTeam projectTeam = new ProjectTeam();                    projectTeam.setDeptId(sysUser.getDeptId());                    projectTeam.setDeptName(sysDept.getDeptName());                    projectTeam.setRecordId(projectId);                    projectTeam.setRoleType("TOU_HOU_JUE_SE");                    projectTeam.setRoleKey("TOU_HOU_FU_ZE_REN");                    projectTeam.setUserId(9582l);                    projectTeamService.save(projectTeam);                }                // 9582l;            }        } catch (Exception ex) {            System.out.println("设置欧阳雨露角色异常+" + ex.getMessage());        }    }    @Override    @Transactional(rollbackFor = Exception.class)    public AjaxResult callbackProjectStep(ProjectStep projectStep) {        //0.判断是否当前的项目状态为在管状态，如果是在管状态不能回退，否则可以回退，并且当前项目的状态改为回退的状态下        Project project = projectService.getById(projectStep.getProjectId());        if (ObjectUtil.isNull(project)) {            return AjaxResult.error("未找到当前项目信息！");        }        if (ProjectStatus.ZAI_GUAN.getCode().equals(project.getServiceStatus())) {            return AjaxResult.error("该项目已完成在管，无法退回其他节点！");        }        if (ProjectStatus.YI_DAO_QI.getCode().equals(project.getServiceStatus())) {            return AjaxResult.error("该项目已到期，无法退回其他节点！");        }        if (ProjectStatus.YI_ZHONG_ZHI.getCode().equals(project.getServiceStatus())) {            return AjaxResult.error("该项目已终止，无法退回其他节点！");        }        if (ProjectStatus.CLOSE_FILE.getCode().equals(project.getServiceStatus())) {            return AjaxResult.error("该项目已归档，无法退回其他节点！");        }        //1.先获取项目类型下的所有节点数据        List<ProjectStepMenu> projectStepMenuByProjectId = projectStepMenuConfigService.findProjectStepMenuByProjectId(projectStep.getProjectId());        //2.查出所有父节点        List<ProjectStepMenu> projectStepMenusParentList = projectStepMenuByProjectId.stream().filter(projectStepMenu -> 0 == projectStepMenu.getParentId()).collect(Collectors.toList());        //3.查找当前回退的节点的节点信息，当前节点为父节点        ProjectStepMenu projectStepMenuSubOne = projectStepMenuByProjectId.stream().filter(projectStepMenu -> projectStepMenu.getId().equals(projectStep.getStepMenuId())).findFirst().orElse(null);        if (ObjectUtil.isNotNull(projectStepMenuSubOne)) {            //5.查找出所有父节点不是当前节点父节点，并且排序大于当前父节点的数据，进行匹配            projectStepMenusParentList = projectStepMenusParentList.stream().filter(projectStepMenu -> 0 == projectStepMenu.getParentId() && projectStepMenu.getSorts() >= projectStepMenuSubOne.getSorts()).collect(Collectors.toList());            //6.从所有父节点数据筛选出已经过滤好的的父节点下子节点数据            List<ProjectStepMenu> projectStepMenusSubList = selectAllSubProjectStep(projectStepMenuByProjectId, projectStepMenusParentList);            for (ProjectStepMenu projectStepMenu : projectStepMenusSubList) {                //6.清理查询到的父节点下其子节点数据                projectStepMapper.delete(new LambdaQueryWrapper<ProjectStep>()                        .eq(ProjectStep::getProjectId, projectStep.getProjectId())                        .eq(ProjectStep::getStepMenuId, projectStepMenu.getId())                );                //7.查出子节点的OA审批记录数据                List<OaApproval> oaApprovalList = oaApprovalService.list(new LambdaQueryWrapper<OaApproval>()                        .eq(OaApproval::getRecordId, projectStep.getProjectId())                        .eq(OaApproval::getSubRecordId, projectStepMenu.getId())                        .eq(OaApproval::getModuleName, OaConstant.PROJECT)                );                if (CollectionUtil.isNotEmpty(oaApprovalList)) {                    for (OaApproval oaApproval : oaApprovalList) {                        //8.保存OA审批数据至备份表里面，用于今后问题排查                        OaApprovalBackup oaApprovalBackup = new OaApprovalBackup();                        BeanUtil.copyProperties(oaApproval, oaApprovalBackup);                        oaApprovalBackupService.save(oaApprovalBackup);                        //9.清除子节点的OA审批时间记录                        List<OaApprovalLog> oaApprovalLogList = oaApprovalLogService.list(new LambdaQueryWrapper<OaApprovalLog>().eq(OaApprovalLog::getApprovalNo, oaApproval.getApprovalNo()));                        if (CollectionUtil.isNotEmpty(oaApprovalLogList)) {                            for (OaApprovalLog oaApprovalLog : oaApprovalLogList) {                                //10.保存OA审批时间记录至备份表里面，用于今后问题排查                                OaApprovalLogBackup oaApprovalLogBackup = new OaApprovalLogBackup();                                BeanUtil.copyProperties(oaApprovalLog, oaApprovalLogBackup);                                oaApprovalLogBackupService.save(oaApprovalLogBackup);                            }                            //11.清除子节点的OA审批时间记录                            oaApprovalLogService.removeByIds(oaApprovalLogList.stream().map(BaseEntity::getId).collect(Collectors.toList()));                        }                    }                    //12.清除子节点的OA审批记录                    oaApprovalService.removeByIds(oaApprovalList.stream().map(BaseEntity::getId).collect(Collectors.toList()));                }            }            //13.根据当前节点修改项目状态和项目成员            updateProjectServiceStatus(project, projectStepMenuSubOne);        }        return AjaxResult.success();    }    /**     * 从所有父节点数据筛选出已经过滤好的的父节点下子节点数据*     *     * @param projectStepMenuByProjectId     * @param projectStepMenusParentList     * @return     */    public List<ProjectStepMenu> selectAllSubProjectStep(List<ProjectStepMenu> projectStepMenuByProjectId, List<ProjectStepMenu> projectStepMenusParentList) {        List<ProjectStepMenu> projectStepMenusSubList = new ArrayList<>();        for (ProjectStepMenu projectStepMenu : projectStepMenuByProjectId) {            for (ProjectStepMenu stepMenuParent : projectStepMenusParentList) {                if (projectStepMenu.getParentId().equals(stepMenuParent.getId())) {                    projectStepMenusSubList.add(projectStepMenu);                }            }        }        return projectStepMenusSubList;    }    /**     * 变更项目状态及清除项目成员*     *     * @param project     * @param projectStepMenu     */    public void updateProjectServiceStatus(Project project, ProjectStepMenu projectStepMenu) {        String serviceStatus = "";        //首先判断项目类型        switch (project.getProjectType()) {            case "DAN_YI_FEI_TOU_BIAO_XIANG_MU"://单一非投标项目                switch (projectStepMenu.getName()) {                    case "基础信息":                    case "项目立项":                        serviceStatus = "LI_XIANG_ZHONG";                        break;                    case "团队组建":                        serviceStatus = "TUO_ZHAN_ZHONG";                        //删除团队成员                        projectTeamService.remove(new LambdaQueryWrapper<ProjectTeam>().eq(ProjectTeam::getRecordId, project.getId()));                        break;                    case "项目评审":                    case "业绩确认":                    case "项目授权":                        serviceStatus = "TUO_ZHAN_ZHONG";                        break;                    case "拓运移交":                        serviceStatus = "TUO_ZHAN_CHENG_GONG";                        break;                }                break;            case "DAN_YI_TOU_BIAO_XIANG_MU"://单一投标项目                switch (projectStepMenu.getName()) {                    case "基础信息":                    case "项目立项":                        serviceStatus = "LI_XIANG_ZHONG";                        break;                    case "团队组建":                        serviceStatus = "TOU_BIAO_ZHONG";                        //删除团队成员                        projectTeamService.remove(new LambdaQueryWrapper<ProjectTeam>().eq(ProjectTeam::getRecordId, project.getId()));                        break;                    case "项目评审":                    case "标书评审":                    case "投标复盘":                        serviceStatus = "TOU_BIAO_ZHONG";                        break;                    //case "投标费用记录":                    case "项目授权":                    case "业绩确认":                    case "拓运移交":                        serviceStatus = "YI_ZHONG_BIAO";                        break;                }                break;            case "GU_QUAN_HE_ZUO_XIANG_MU": //股权合作类型                switch (projectStepMenu.getName()) {                    case "基础信息":                    case "项目立项":                        serviceStatus = "LI_XIANG_ZHONG";                        break;                    case "项目尽调":                        serviceStatus = "JIN_DIAO_ZHONG";                        break;                    case "项目决策":                        serviceStatus = "PING_SHEN_ZHONG";                        break;                    case "投后移交":                        serviceStatus = "WANG_CHENG_QIAN_YUE";                        break;                }                break;        }        //项目状态变更        if (StrUtil.isNotBlank(serviceStatus)) {            projectService.update(new LambdaUpdateWrapper<Project>().set(Project::getServiceStatus, serviceStatus).eq(BaseEntity::getId, project.getId()));            //回退修改：调报销接口修改状态            if (ProjectStepConstant.DAN_YI_TOU_BIAO_XIANG_MU.equals(project.getProjectType())) {                iInterfaceLogService.sentReimbursementApplication(project.getId().toString(), "YES");            }        }    }    public void sendMessageTest() {        Project project = projectService.getById(713);        ProjectStepMenu projectstep = projectStepMenuMapper.selectById(21); // 21,24        sendMessage(project, projectstep);    }    //发送待办消息    //项目付款完毕后   提示韩江雪和欧阳  xmfk    //维护工商信息提交后  提醒欧阳 gszcxxlr    public void sendMessage(Project project, ProjectStepMenu projectStepMenu) {        List<Long> ids = new ArrayList<>();        //欧阳雨露        ids.add(9582l);        //韩江雪        if ("xmfk".equals(projectStepMenu.getCode()))            ids.add(11666l);        List<SysUser> users = sysUserService.list(Wrappers.<SysUser>lambdaQuery().in(SysUser::getUserId, ids));        for (int i = 0; i < users.size(); i++) {            String id = project.getId().toString();            String title = project.getProjectName() + "-" + projectStepMenu.getName() + "节点完成待办提示";            String code = projectStepMenu.getCode();            String phone = users.get(i).getPhonenumber();            String modelName = "待办提示";            //发送待办通知的url            String todoUrl = oaProperties.getTodoUrl();            //拓后移交url            String thUrl = oaProperties.getThUrl();            //https://tt-uat.gem-flower.com/#/projectOaInfo?id=1474&to=lxsp            String detailUrl = thUrl + "?id=" + id + "&to=" + code;            OaTodo todo = new OaTodo();            todo.setAppName("TOUTUO");            todo.setModelName(modelName);            todo.setModelId(modelName);            todo.setSubject(title);            todo.setLink(detailUrl);            todo.setMobileLink(detailUrl);            todo.setPadLink(detailUrl);            todo.setType(1);            Map<String, String> targets = new HashMap<>();            targets.put("MobileNo", phone);            todo.setTargets(targets);            todo.setCreateTime(DateUtils.getTime());            String str = JSON.toJSONString(todo);            System.out.println(str);            String body = HttpUtil.createPost(todoUrl).contentType("application/json").body(JSON.toJSONString(todo)).execute().body();            System.out.println("股权合作类发送待办消息返回结果:" + body);        }    }}