package com.bytefinger.toutuo.biz.performance.service.impl;import cn.hutool.core.bean.BeanUtil;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.collection.CollectionUtil;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.domain.BaseEntity;import com.bytefinger.common.core.enums.ShiFou;import com.bytefinger.common.core.utils.DateUtils;import com.bytefinger.common.core.web.domain.vo.UserVO;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.api.biz.user.domain.SysDept;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceBO;import com.bytefinger.toutuo.biz.performance.domain.BO.PerformanceList;import com.bytefinger.toutuo.biz.performance.domain.BudgetInMonth;import com.bytefinger.toutuo.biz.performance.domain.BudgetInYear;import com.bytefinger.toutuo.biz.performance.domain.BudgetPerformanceAllocationData;import com.bytefinger.toutuo.biz.performance.domain.dto.PerformanceDTO;import com.bytefinger.toutuo.biz.performance.domain.template.PerformanceTemplate;import com.bytefinger.toutuo.biz.performance.domain.vo.PerformanceVO;import com.bytefinger.toutuo.biz.performance.manager.PerformanceManager;import com.bytefinger.toutuo.biz.performance.mapper.BudgetInMonthMapper;import com.bytefinger.toutuo.biz.performance.mapper.BudgetInYearMapper;import com.bytefinger.toutuo.biz.performance.mapper.BudgetPerformanceAllocationDataMapper;import com.bytefinger.toutuo.biz.performance.mapper.PerformanceMapper;import com.bytefinger.toutuo.biz.performance.service.IBudgetInService;import com.bytefinger.toutuo.biz.performance.service.IIndicatorDisplayLevelService;import com.bytefinger.toutuo.biz.project.constants.ProjectConstant;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectAchievement;import com.bytefinger.toutuo.biz.project.domain.ProjectBidFeeRegistration;import com.bytefinger.toutuo.biz.project.mapper.ProjectMapper;import com.bytefinger.toutuo.biz.project.service.IProjectAchievementService;import com.bytefinger.toutuo.biz.project.service.IProjectService;import com.bytefinger.toutuo.biz.user.service.ISysDeptService;import lombok.AllArgsConstructor;import lombok.Data;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;/** * <p> * 预算收入 * </p> * * @author patrick * @since 2022-11-24 */@Service@AllArgsConstructorpublic class BudgetInServiceImpl extends ServiceImpl<BudgetInYearMapper, BudgetInYear> implements IBudgetInService {    public final PerformanceManager performanceManager;    private final BudgetInYearMapper budgetInYearMapper;    private final BudgetInMonthMapper budgetInMonthMapper;    private final PerformanceMapper budgetMapper;    private final ProjectMapper projectMapper;    private final BudgetPerformanceAllocationDataMapper budgetPerformanceAllocationDataMapper;    private final ISysDeptService deptService;    private final int AreaLevel=1;    private final int ProjectLevel=2;    @Override    public PerformanceVO getOrUpdate(Integer level, Long recordId, Integer currYear, PerformanceDTO budgetDTO) {        List<PerformanceTemplate> budgetTemplates = performanceManager.getTemplate(BIZ_BUDGET_IN);        // 年数据        List<BudgetInYear> dataList = this.list(Wrappers.<BudgetInYear>lambdaQuery()                .eq(BudgetInYear::getRecordId, recordId)                .eq(BudgetInYear::getFieldYear, currYear)                .in(BudgetInYear::getFieldKey, budgetTemplates.stream().map(PerformanceTemplate::getFieldKey).collect(Collectors.toList())));        // 月数据        List<BudgetInMonth> monthDatas = budgetInMonthMapper.selectList(Wrappers.<BudgetInMonth>lambdaQuery()                .eq(BudgetInMonth::getRecordId, recordId)                .eq(BudgetInMonth::getFieldYear, currYear)                .in(BudgetInMonth::getFieldKey, budgetTemplates.stream().map(PerformanceTemplate::getFieldKey).collect(Collectors.toList())));        PerformanceBO budgetBO = new PerformanceBO();        budgetBO.setBudgetKey(BIZ_BUDGET_IN);        budgetBO.setYears(Collections.unmodifiableList(dataList));        budgetBO.setMonths(Collections.unmodifiableList(monthDatas));        budgetBO.setYMapper(budgetInYearMapper);        budgetBO.setMMapper(budgetInMonthMapper);        budgetBO.setLevel(level);        budgetBO.setRecordId(recordId);        budgetBO.setCurrYear(currYear);        budgetBO.setBudgetDTO(budgetDTO);        budgetBO.setModelName("BudgetIn");        budgetBO.setBudgetYear(BudgetInYear.class);        budgetBO.setBudgetMonth(BudgetInMonth.class);//        return budgetBO;        return performanceManager.getOrUpdate(budgetBO);    }    @Override    public PerformanceVO groupData(List<Long> ids, Integer currYear, String budgetKey) {        List<PerformanceList> budgetLists = budgetMapper.groupInData(ids, currYear);        return performanceManager.groupData(currYear, budgetKey, budgetLists);    }    @Override    public PerformanceList statisticsInData(List<Long> ids, Integer level, Integer currYear,Integer currMonth, String fieldKey) {        PerformanceList budgetLists = budgetMapper.statisticsInData(ids,level,currYear,currMonth,fieldKey);        return budgetLists;    }    @Override    public Boolean ifCanDelIndicator(String fieldKey) {        // 年数据        List<BudgetInYear> fieldKeyDataList = this.list(Wrappers.<BudgetInYear>lambdaQuery().eq(BudgetInYear::getFieldKey, fieldKey));        // 月数据        List<BudgetInMonth> fieldKeyMonthDatas = budgetInMonthMapper.selectList(Wrappers.<BudgetInMonth>lambdaQuery().eq(BudgetInMonth::getFieldKey, fieldKey));//        return budgetBO;        return fieldKeyDataList.size() > 0 || fieldKeyMonthDatas.size() > 0;    }    /**     * 业绩分配数据：计算统计-单个项目     *     * @param projectId     * @return     */    @Override    public synchronized Boolean calcPerformanceAllocationData( Long projectId){        List<BudgetPerformanceAllocationData> budgetPerformanceAllocationDataList=new ArrayList<>();        //获取所有项目的数据：select contract_Amount,contract_Annual_Amount,contract_Amounts,contract_Annual_Amounts,renewal,is_performance_increment from biz_project where id=  1476 ##contractAmount        //只有业绩确认节点通过的项目        List<Project> projectList=budgetPerformanceAllocationDataMapper.getProject(projectId);        if(CollUtil.isEmpty(projectList)||projectList.size()==0){            //没有数据直接返回            return false;        }        Integer currYear= Objects.nonNull(projectList.get(0).getPerformanceConfirmTime() ) ?DateUtils.year(projectList.get(0).getPerformanceConfirmTime()) : DateUtils.year(new Date());;        List<ProjectAchievement> projectAchievementAllList= budgetPerformanceAllocationDataMapper.getProjectAchievementListByProjectId(projectId) ;        //删除-之前的数据        budgetPerformanceAllocationDataMapper.delete(new LambdaUpdateWrapper<BudgetPerformanceAllocationData>()                .eq(BudgetPerformanceAllocationData::getProjectId,projectId));        projectList.forEach(t->{            BudgetPerformanceAllocationData budgetPerformanceAllocationData=new BudgetPerformanceAllocationData();            budgetPerformanceAllocationData.setProjectId(t.getId());            budgetPerformanceAllocationData.setProjectType(t.getProjectType());            budgetPerformanceAllocationData.setDeleted(0);            budgetPerformanceAllocationData.setCreateTime(new Date());            budgetPerformanceAllocationData.setCreateUserId(SecurityUtils.getUserId());            //根据分配规则计算            if(Objects.isNull(t.getInStock()) || "FOU".equals(t.getInStock())){                budgetPerformanceAllocationData.setIncrementalAmount(t.getContractAmount());                budgetPerformanceAllocationData.setIncrementalAmountYear(t.getContractAnnualAmount());            }            //            3.1、增量拓展数据 业绩确认节点中 是否续签为否，是增量为否；            //            取数：合同信息录入中的 合同总金额，合同年度金额。            //            3.2、存量保盘数据 业绩确认节点中 是否续签为是，是增量为否；            //            取数：合同信息录入中的 合同总金额，合同年度金额。            //            3.3、存量新增数据 业绩确认节点中 是否续签为是，是增量为是；            //            取数：增量业绩确认信息中的 合同总金额，合同年度金额。            if("SHI".equals(t.getInStock())&& (Objects.isNull(t.getIsPerformanceIncrement()) ||"FOU".equals(t.getIsPerformanceIncrement()))){                budgetPerformanceAllocationData.setKeepAmount(t.getContractAmount());                budgetPerformanceAllocationData.setKeepAmountYear(t.getContractAnnualAmount());            }            if("SHI".equals(t.getInStock())&& "SHI".equals(t.getIsPerformanceIncrement())){                budgetPerformanceAllocationData.setKeepAmount(t.getContractAmount());                budgetPerformanceAllocationData.setKeepAmountYear(t.getContractAnnualAmount());                //                budgetPerformanceAllocationData.setAddAmount(t.getContractAmounts());                budgetPerformanceAllocationData.setAddAmountYear(t.getContractAnnualAmounts());            }            //当年转化收入            budgetPerformanceAllocationData.setCurrentConvertIncome(getCalculateAnnualConversion(t));            List<ProjectAchievement> projectAchievementList= projectAchievementAllList.stream().filter(o-> o.getProjectId().equals(t.getId())).collect(Collectors.toList());            if(CollectionUtil.isNotEmpty(projectAchievementList)&&projectAchievementList.size()>0){                budgetPerformanceAllocationDataList.addAll(getBudgetPerformanceAllocationDataList(projectAchievementList,budgetPerformanceAllocationData));            }        });        budgetPerformanceAllocationDataList.forEach(data->{            //保存            //最大不能大于100            if(data.getContractAmountRate().compareTo(BigDecimal.valueOf(100))>0){                data.setContractAmountRate(new BigDecimal(100)) ;            }            if(data.getLeadingExpansionRate().compareTo(BigDecimal.valueOf(100))>0){                data.setLeadingExpansionRate(new BigDecimal(100)) ;            }            data.setFieldYear(currYear);            List< BudgetPerformanceAllocationData> oldList= budgetPerformanceAllocationDataMapper.selectList(Wrappers.<BudgetPerformanceAllocationData>lambdaQuery()//                    .eq(BudgetPerformanceAllocationData::getFieldYear,currYear)                    .eq(BudgetPerformanceAllocationData::getProjectId,projectId)                    .eq(BudgetPerformanceAllocationData::getCompanyId,data.getCompanyId())            );            if(!oldList.isEmpty()){                List<Long> oldIds= oldList.stream().map(a->a.getId()).collect(Collectors.toList());                budgetPerformanceAllocationDataMapper.deleteBatchIds(oldIds);            }            data.setCreateTime(new Date());            data.setCreateUserId(SecurityUtils.getUserId());            budgetPerformanceAllocationDataMapper.insert(data);        });        return false;    }    /**     * 业绩分配数据：计算统计-全部     *     * @param currYear     * @return     */    @Override    public Boolean calcPerformanceAllocationDataAllFromYear( Integer currYear){        List<BudgetPerformanceAllocationData> budgetPerformanceAllocationDataList=new ArrayList<>();        //获取所有项目的数据：select contract_Amount,contract_Annual_Amount,contract_Amounts,contract_Annual_Amounts,renewal,is_performance_increment from biz_project where id=  1476 ##contractAmount        //只有业绩确认节点通过的项目        List<Project> projectList=budgetPerformanceAllocationDataMapper.getProjectList(currYear);        if(CollUtil.isEmpty(projectList)||projectList.size()==0){            //没有数据直接返回            return false;        }//        //组织机构//        LambdaQueryWrapper<SysDept> lambdaQueryWrapper = new LambdaQueryWrapper<>();//        lambdaQueryWrapper.eq(SysDept::getDelFlag, 0)//                .and(wrapper -> wrapper.eq(SysDept::getDeptType, "CENG_JI"))//                .orderByAsc(SysDept::getOrderNum);//        List<SysDept> deptList = deptService.list(lambdaQueryWrapper);        List<ProjectAchievement> projectAchievementAllList= budgetPerformanceAllocationDataMapper.getProjectAchievementList() ;        //获取业绩分配比例：        select * from biz_project_achievement where project_id=1476        projectList.forEach(t->{            BudgetPerformanceAllocationData budgetPerformanceAllocationData=new BudgetPerformanceAllocationData();            budgetPerformanceAllocationData.setProjectId(t.getId());            budgetPerformanceAllocationData.setProjectType(t.getProjectType());            budgetPerformanceAllocationData.setDeleted(0);            budgetPerformanceAllocationData.setCreateTime(new Date());            budgetPerformanceAllocationData.setCreateUserId(SecurityUtils.getUserId());            //根据分配规则计算            if(Objects.isNull(t.getInStock()) || "FOU".equals(t.getInStock())){                budgetPerformanceAllocationData.setIncrementalAmount(t.getContractAmount());                budgetPerformanceAllocationData.setIncrementalAmountYear(t.getContractAnnualAmount());            }            //            3.1、增量拓展数据 业绩确认节点中 是否续签为否，是增量为否；            //            取数：合同信息录入中的 合同总金额，合同年度金额。            //            3.2、存量保盘数据 业绩确认节点中 是否续签为是，是增量为否；            //            取数：合同信息录入中的 合同总金额，合同年度金额。            //            3.3、存量新增数据 业绩确认节点中 是否续签为是，是增量为是；            //            取数：增量业绩确认信息中的 合同总金额，合同年度金额。            if("SHI".equals(t.getInStock())&& (Objects.isNull(t.getIsPerformanceIncrement()) ||"FOU".equals(t.getIsPerformanceIncrement()))){                budgetPerformanceAllocationData.setKeepAmount(t.getContractAmount());                budgetPerformanceAllocationData.setKeepAmountYear(t.getContractAnnualAmount());            }            if("SHI".equals(t.getInStock())&& "SHI".equals(t.getIsPerformanceIncrement())){                budgetPerformanceAllocationData.setKeepAmount(t.getContractAmount());                budgetPerformanceAllocationData.setKeepAmountYear(t.getContractAnnualAmount());                //                budgetPerformanceAllocationData.setAddAmount(t.getContractAmounts());                budgetPerformanceAllocationData.setAddAmountYear(t.getContractAnnualAmounts());            }            //当年转化收入            budgetPerformanceAllocationData.setCurrentConvertIncome(getCalculateAnnualConversion(t));            List<ProjectAchievement> projectAchievementList= projectAchievementAllList.stream().filter(o-> o.getProjectId().equals(t.getId())).collect(Collectors.toList());            if(CollectionUtil.isNotEmpty(projectAchievementList)&&projectAchievementList.size()>0){                budgetPerformanceAllocationDataList.addAll(getBudgetPerformanceAllocationDataList(projectAchievementList,budgetPerformanceAllocationData));            }        });        budgetPerformanceAllocationDataList.forEach(data->{            //保存            //最大不能大于100            if(data.getContractAmountRate().compareTo(BigDecimal.valueOf(100))>0){                data.setContractAmountRate(new BigDecimal(100)) ;            }            if(data.getLeadingExpansionRate().compareTo(BigDecimal.valueOf(100))>0){                data.setLeadingExpansionRate(new BigDecimal(100)) ;            }            data.setFieldYear(currYear);            List< BudgetPerformanceAllocationData> oldList= budgetPerformanceAllocationDataMapper.selectList(Wrappers.<BudgetPerformanceAllocationData>lambdaQuery()                    .eq(BudgetPerformanceAllocationData::getFieldYear,currYear)                    .eq(BudgetPerformanceAllocationData::getProjectId,data.getProjectId())                    .eq(BudgetPerformanceAllocationData::getCompanyId,data.getCompanyId())            );            if(!oldList.isEmpty()){                List<Long> oldIds= oldList.stream().map(a->a.getId()).collect(Collectors.toList());                budgetPerformanceAllocationDataMapper.deleteBatchIds(oldIds);            }            budgetPerformanceAllocationDataMapper.insert(data);        });        return true;    }    @Override    public Boolean calcConversionAllocationData(Long projectId){        List<Project> projectList=budgetPerformanceAllocationDataMapper.getProject(projectId);        if(CollUtil.isEmpty(projectList)||projectList.size()==0){            //没有数据直接返回            return false;        }        projectList.forEach(project->{            project.setAnnualConversionAmount(calculateAnnualConversion(project.getContractAmount(),                    project.getProposedServicePeriod(),                    project.getServiceBeginTime(),                    project.getServiceEndTime(),                    project.getPerformanceConfirmTime()));            project.setAnnualConversionAmounts(calculateAnnualConversion(project.getContractAmounts(),                    project.getProposedServicePeriod(),                    project.getServiceBeginTime(),                    project.getServiceEndTime(),                    project.getPerformanceConfirmTime()));            projectMapper.updateById(project);        });        return true;    }    @Override    public Boolean calcConversionAllocationDataAll( Integer currYear){        List<Project> projectList=budgetPerformanceAllocationDataMapper.getProjectList(currYear);        if(CollUtil.isEmpty(projectList)||projectList.size()==0){            //没有数据直接返回            return false;        }        projectList.forEach(project->{            project.setAnnualConversionAmount(calculateAnnualConversion(project.getContractAmount(),                    project.getProposedServicePeriod(),                    project.getServiceBeginTime(),                    project.getServiceEndTime(),                    project.getPerformanceConfirmTime()));            project.setAnnualConversionAmounts(calculateAnnualConversion(project.getContractAmounts(),                    project.getProposedServicePeriod(),                    project.getServiceBeginTime(),                    project.getServiceEndTime(),                    project.getPerformanceConfirmTime()));            projectMapper.updateById(project);        });        return true;    }    public List<BudgetPerformanceAllocationData> getBudgetPerformanceAllocationDataList(List<ProjectAchievement> projectAchievementList,BudgetPerformanceAllocationData budgetPerformanceAllocationData ){        List<BudgetPerformanceAllocationData> budgetPerformanceAllocationDataList=new ArrayList<>();        //只设一条配置        if(CollectionUtil.isNotEmpty(projectAchievementList)&&projectAchievementList.size()==1){            //拓展公司ID            BigDecimal rate= projectAchievementList.get(0).getAssignmentRate();            Long companyId= projectAchievementList.get(0).getExpandCompanyId();            budgetPerformanceAllocationData.setCompanyId(companyId);            if(100==projectAchievementList.get(0).getParentId() ){                //当是区域公司时                budgetPerformanceAllocationData.setId(null);                budgetPerformanceAllocationData.setContractAmountRate(rate);                budgetPerformanceAllocationData.setLeadingExpansionRate(rate);                budgetPerformanceAllocationDataList.add(budgetPerformanceAllocationData);            }            if(0!=projectAchievementList.get(0).getParentId()&&   100!=projectAchievementList.get(0).getParentId() ){                //当是地区公司时，并找到该上级区域公司插入一条                budgetPerformanceAllocationData.setContractAmountRate(rate );                budgetPerformanceAllocationData.setLeadingExpansionRate(new BigDecimal(0) );                budgetPerformanceAllocationData.setId(null);                budgetPerformanceAllocationDataList.add(budgetPerformanceAllocationData);                //上级区域                BudgetPerformanceAllocationData allocationData=new BudgetPerformanceAllocationData();                BeanUtil.copyProperties(budgetPerformanceAllocationData,allocationData);                budgetPerformanceAllocationData.setCompanyId(projectAchievementList.get(0).getParentId() );                budgetPerformanceAllocationData.setId(null);                budgetPerformanceAllocationDataList.add(allocationData);            }            //总部，不处理            return budgetPerformanceAllocationDataList;        }        //多条时        if(CollectionUtil.isNotEmpty(projectAchievementList)&&projectAchievementList.size()>1){            //List<Long>  companyIds =projectAchievementList.stream().map(ProjectAchievement::getExpandCompanyId).collect(Collectors.toList());            //遍历所有拓展单位,找到父级是否为相同区域（当父级为0是总部，当父级为100当前公司是区域，判断是否为相同区域）            Map<Long,List<ProjectAchievement>> achievementMap=projectAchievementList.stream()                    .collect(Collectors.groupingBy(ProjectAchievement::getParentId));            List<ProjectAchievement> projectAchievements= new ArrayList<>();            List<ProjectAchievement> areaAchievements= new ArrayList<>();            achievementMap.forEach((parent,list)->{                if(0==parent){                    //总部不处理                }else if(100==parent){                    //区域:两个不同的区域                    areaAchievements.addAll(list);                }else{                    //地区公司                    projectAchievements.addAll(list);                }            });            //只有地区公司，没有区域            if(CollectionUtil.isEmpty(areaAchievements)||areaAchievements.size()==0){                projectAchievements.forEach(p->{                    //当是地区公司时，并找到该上级区域公司插入一条                    BudgetPerformanceAllocationData data=new BudgetPerformanceAllocationData();                    BeanUtil.copyProperties(budgetPerformanceAllocationData,data);                    data.setContractAmountRate(p.getAssignmentRate() );                    data.setCompanyId(p.getExpandCompanyId());                    data.setLeadingExpansionRate(new BigDecimal(0) );                    data.setId(null);                    budgetPerformanceAllocationDataList.add(data);                    //上级区域                    BudgetPerformanceAllocationData allocationData=new BudgetPerformanceAllocationData();                    //已存在上级区域-相加，不存在-新增                    List<BudgetPerformanceAllocationData> allocationDatas=  budgetPerformanceAllocationDataList.stream().filter(t->p.getParentId().equals(t.getCompanyId())).collect(Collectors.toList());                    if(CollectionUtil.isNotEmpty(allocationDatas)&&allocationDatas.size()>0){                        BeanUtil.copyProperties(allocationDatas.get(0),allocationData);                        allocationData.setContractAmountRate( allocationDatas.get(0).getContractAmountRate().add(p.getAssignmentRate()) );                    }else{                        BeanUtil.copyProperties(data,allocationData);                    }                    allocationData.setLeadingExpansionRate(new BigDecimal(0));                    allocationData.setCompanyId(p.getParentId());                    allocationData.setId(null);                    budgetPerformanceAllocationDataList.add(allocationData);                });                return budgetPerformanceAllocationDataList;            }            //分配地区公司的区域，和直接分配的区域是否是同一个            boolean isSameArea = true;            //找到地区公司的所有区域            List<Long> itemProjectAchievements = projectAchievements.stream().map(ProjectAchievement::getParentId).collect(Collectors.toList());            for (Long itemAreaId : itemProjectAchievements){                //判断在 区域的业绩分配中是否存在项目所在的区域，如果存在就是统一                List<ProjectAchievement> items = areaAchievements.stream().filter(o->o.getExpandCompanyId().equals(itemAreaId)).collect(Collectors.toList());                if(items.size() == 0){                    isSameArea = false;                }            }            //有区域            List<BudgetPerformanceAllocationData> areaList=new ArrayList<>();            if(  CollectionUtil.isNotEmpty(areaAchievements)&&areaAchievements.size()>0){                boolean finalIsSameArea = isSameArea;                areaAchievements.forEach(p->{                    //区域                    BudgetPerformanceAllocationData allocationData=new BudgetPerformanceAllocationData();                    //已存在-相加，不存在-新增                    List<BudgetPerformanceAllocationData> allocationDatas=  budgetPerformanceAllocationDataList.stream().filter(t->p.getExpandCompanyId().equals(t.getCompanyId())).collect(Collectors.toList());                    if(CollectionUtil.isNotEmpty(allocationDatas)&&allocationDatas.size()>0){                        BeanUtil.copyProperties(allocationDatas.get(0),allocationData);                        if (finalIsSameArea){                            allocationData.setContractAmountRate( allocationDatas.get(0).getContractAmountRate().add(p.getAssignmentRate()) );                        }else {                            allocationData.setContractAmountRate(new BigDecimal(0));                        }                        allocationData.setLeadingExpansionRate( allocationDatas.get(0).getContractAmountRate().add(p.getAssignmentRate()) );                    }else{                        BeanUtil.copyProperties(budgetPerformanceAllocationData,allocationData);                        if (finalIsSameArea) {                            allocationData.setContractAmountRate(p.getAssignmentRate());                        }else {                            allocationData.setContractAmountRate(new BigDecimal(0));                        }                        allocationData.setLeadingExpansionRate(p.getAssignmentRate());                    }                    allocationData.setCompanyId(p.getExpandCompanyId());                    allocationData.setId(null);                    budgetPerformanceAllocationDataList.add(allocationData);                });//                return budgetPerformanceAllocationDataList;            }            //有区域，也有地区公司            if( CollectionUtil.isNotEmpty(projectAchievements)&&projectAchievements.size()>0 && CollectionUtil.isNotEmpty(areaAchievements)&&areaAchievements.size()>0){                projectAchievements.forEach(p->{                    //当是地区公司时，并找到该上级区域公司插入一条                    BudgetPerformanceAllocationData data=new BudgetPerformanceAllocationData();                    BeanUtil.copyProperties(budgetPerformanceAllocationData,data);                    data.setContractAmountRate(p.getAssignmentRate() );                    data.setCompanyId(p.getExpandCompanyId());                    data.setLeadingExpansionRate(new BigDecimal(0) );                    data.setId(null);                    budgetPerformanceAllocationDataList.add(data);                    //上级区域                    BudgetPerformanceAllocationData allocationData=new BudgetPerformanceAllocationData();                    //已存在上级区域-相加，不存在-新增                    List<BudgetPerformanceAllocationData> allocationDatas=  budgetPerformanceAllocationDataList.stream().filter(t->p.getParentId().equals(t.getCompanyId())).collect(Collectors.toList());                    if(CollectionUtil.isNotEmpty(allocationDatas)&&allocationDatas.size()>0){//                        BeanUtil.copyProperties(allocationDatas.get(0),allocationData);                        //                        allocationDatas.get(0).setContractAmountRate( allocationDatas.get(0).getContractAmountRate().add(p.getAssignmentRate()) );                    }else{                        BeanUtil.copyProperties(data,allocationData);                        allocationData.setCompanyId(p.getParentId());                        allocationData.setId(null);                        budgetPerformanceAllocationDataList.add(allocationData);                    }                });            }        }        return budgetPerformanceAllocationDataList;    }    public BigDecimal getCalculateAnnualConversion(Project project) {        //增量        if (ShiFou.SHI.getCode().equals(project.getIsIncrement())) {            return this.calculateAnnualConversion(                    project.getContractAmounts(),                    project.getProposedServicePeriod(),                    project.getServiceBeginTime(),                    project.getServiceEndTime(),                    project.getPerformanceConfirmTime()            );        }        //非增量        return this.calculateAnnualConversion(                project.getContractAmount(),                project.getProposedServicePeriod(),                project.getServiceBeginTime(),                project.getServiceEndTime(),                project.getPerformanceConfirmTime()        );    }    public BigDecimal calculateAnnualConversion(BigDecimal contractAmount, Integer servicePeriod, Date serviceBeginTime, Date serviceEndTime, Date performanceConfirmTime) {        if (contractAmount == null || servicePeriod == null) {            return BigDecimal.ZERO;        }        if (performanceConfirmTime == null) {            return BigDecimal.ZERO;        }        /**         * 公式  金额 / 拟服务日期 *  服务开始日期到年底所剩月份         */        BigDecimal divide = contractAmount.divide(new BigDecimal(servicePeriod), 4, BigDecimal.ROUND_CEILING);        Integer month = DateUtils.getCoveredMonths(serviceBeginTime,serviceEndTime,performanceConfirmTime);        BigDecimal total = divide.multiply(new BigDecimal(month));        total = total.setScale(2, BigDecimal.ROUND_HALF_UP);        if (total.compareTo(contractAmount) > 0) {            total = contractAmount;        }        return total;    }}