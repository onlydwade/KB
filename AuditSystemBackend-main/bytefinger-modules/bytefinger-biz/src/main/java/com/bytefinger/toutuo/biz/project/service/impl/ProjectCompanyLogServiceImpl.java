package com.bytefinger.toutuo.biz.project.service.impl;import cn.hutool.core.bean.BeanUtil;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.bytefinger.common.core.utils.bean.BeanUtils;import com.bytefinger.common.core.web.domain.dto.ChangeDTO;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.security.annotation.DataFill;import com.bytefinger.common.security.utils.SecurityUtils;import com.bytefinger.toutuo.biz.customer.domain.Customer;import com.bytefinger.toutuo.biz.customer.domain.CustomerDelete;import com.bytefinger.toutuo.biz.customer.mapper.CustomerDeleteMapper;import com.bytefinger.toutuo.biz.customer.mapper.CustomerMapper;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectCompanyLog;import com.bytefinger.toutuo.biz.project.domain.ProjectRecodingBak;import com.bytefinger.toutuo.biz.project.mapper.ProjectCompanyLogMapper;import com.bytefinger.toutuo.biz.project.mapper.ProjectMapper;import com.bytefinger.toutuo.biz.project.mapper.ProjectRecodingBakMapper;import com.bytefinger.toutuo.biz.project.service.IProjectCompanyLogService;import lombok.AllArgsConstructor;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Date;/** * <p> * 项目客户操作日志 服务实现类 * </p> * * @author Jone * @since 2024-09-12 */@Service@AllArgsConstructorpublic class ProjectCompanyLogServiceImpl extends ServiceImpl<ProjectCompanyLogMapper, ProjectCompanyLog> implements IProjectCompanyLogService {    private final CustomerDeleteMapper customerDeleteMapper;    private final CustomerMapper customerMapper;    private final ProjectMapper projectMapper;    private final ProjectRecodingBakMapper projectRecodingBakMapper;    @Override    @Transactional(rollbackFor = Exception.class)    public void reset(ChangeDTO changeStatusDTO) {        ProjectCompanyLog byId = this.getById(changeStatusDTO.getId());        if (byId != null) {            if (byId.getRecordType().equals("PROJECT_DELETE")) {                ProjectRecodingBak projectRecodingBak = projectRecodingBakMapper.selectById(byId.getRecordId());                Project project = new Project();               // BeanUtils.copyBeanProp(project,projectRecodingBak);               // projectMapper.insert(project);                BeanUtil.copyProperties(projectRecodingBak,project);                projectMapper.reinsert(project);                projectMapper.updateCreateUserId(projectRecodingBak.getId(),projectRecodingBak.getCreateUserId());                projectMapper.updateTime(projectRecodingBak.getId(),projectRecodingBak.getCreateTime(),projectRecodingBak.getUpdateTime());                projectRecodingBakMapper.deleteById(projectRecodingBak.getId());            } else if (byId.getRecordType().equals("COMPANY_DELETE")) {                //恢复已删除客户数据                Long recordId = byId.getRecordId();                CustomerDelete customerDelete = customerDeleteMapper.selectOne(new LambdaQueryWrapper<CustomerDelete>().eq(CustomerDelete::getCustomerId, recordId)                        .eq(CustomerDelete::getIsRecover,0));                if (customerDelete != null) {                    Customer customerOne = customerMapper.selectById(customerDelete.getCustomerId());                    if (customerOne == null) {                        Customer customer = setValue(customerDelete);                        customerMapper.add(customer);                    }                    //设置该数据为已恢复                    customerDelete.setIsRecover(1);                    customerDeleteMapper.updateById(customerDelete);                }            }else if (byId.getRecordType().equals("PROJECT_RECORDING")){                //todo            }            byId.setIsReset(2);            byId.setUpdateUserId(SecurityUtils.getLoginUser().getUserid());            byId.setUpdateTime(new Date());            this.updateById(byId);        }    }    @Override    @DataFill    public IPage page(QueryPage queryPage) {           return page(queryPage.toPage(), queryPage.getWrapper());    }    private Customer setValue(CustomerDelete customerDelete) {        Customer customer = new Customer();        customer.setId(customerDelete.getCustomerId());        customer.setCustomerName(customerDelete.getCustomerName());        customer.setCustomerNo(customerDelete.getCustomerNo());        customer.setCustomerCompanyNo(customerDelete.getCustomerCompanyNo());        customer.setCustomerType(customerDelete.getCustomerType());        customer.setCooperationType(customerDelete.getCooperationType());        customer.setCustomerIndustry(customerDelete.getCustomerIndustry());        customer.setCustomerLevel(customerDelete.getCustomerLevel());        customer.setProvinceCode(customerDelete.getProvinceCode());        customer.setCityCode(customerDelete.getCityCode());        customer.setAreaCode(customerDelete.getAreaCode());        customer.setAddress(customerDelete.getAddress());        customer.setRemark(customerDelete.getRemark());        customer.setKeywords(customerDelete.getKeywords());        customer.setLegalEntity(customerDelete.getLegalEntity());        customer.setRegisteredCapital(customerDelete.getRegisteredCapital());        customer.setRegisteredAddress(customerDelete.getRegisteredAddress());        customer.setPersonnelSize(customerDelete.getPersonnelSize());        customer.setEstablishmentDate(customerDelete.getEstablishmentDate());        customer.setWebsite(customerDelete.getWebsite());        customer.setCompanyIntroduction(customerDelete.getCompanyIntroduction());        customer.setCreateUserId(customerDelete.getCreateUserId());        customer.setCreateTime(customerDelete.getCreateTime());        customer.setUpdateUserId(SecurityUtils.getLoginUser().getUserid());        customer.setUpdateTime(new Date());        customer.setFollowTime(customerDelete.getFollowTime());        customer.setDeleted(customerDelete.getDeleted());        customer.setFollowUserId(customerDelete.getFollowUserId());        customer.setOwnerUserId(customerDelete.getOwnerUserId());        customer.setMaintenanceUserId(customerDelete.getMaintenanceUserId());        customer.setSource(customerDelete.getSource());        customer.setCompanyType(customerDelete.getCompanyType());        customer.setWorkBrief(customerDelete.getWorkBrief());        return customer;    }}