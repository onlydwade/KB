package com.bytefinger.toutuo.biz.project.controller;import com.baomidou.mybatisplus.core.toolkit.Wrappers;import com.bytefinger.common.core.web.controller.BaseController;import com.bytefinger.common.core.web.domain.vo.AjaxResult;import com.bytefinger.common.das.domain.vo.QueryPage;import com.bytefinger.common.log.annotation.Log;import com.bytefinger.common.log.enums.BusinessType;import com.bytefinger.common.security.annotation.RequiresPermissions;import com.bytefinger.toutuo.biz.project.domain.ProjectTeamOutside;import com.bytefinger.toutuo.biz.project.service.IProjectTeamOutsideService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.*;/** * <p> * 项目团队信息(外部人员) 前端控制器 * </p> * * @author xiao * @since 2023-05-10 */@Slf4j@Api(tags = "项目团队信息(外部人员)")@AllArgsConstructor@RestController@RequestMapping("/projectTeamOutside")public class ProjectTeamOutsideController extends BaseController {    private final IProjectTeamOutsideService projectTeamOutsideService;    @ApiOperation(value = "新增-项目团队信息(外部人员)")    @PutMapping("/add")    @Log(title = "操作日志", businessType = BusinessType.INSERT)    public AjaxResult add(@RequestBody ProjectTeamOutside projectTeamOutside) {        return success(projectTeamOutsideService.save(projectTeamOutside));    }    @ApiOperation(value = "修改-项目团队信息(外部人员)")    @PutMapping("/update")    @Log(title = "操作日志", businessType = BusinessType.UPDATE)    public AjaxResult update(@RequestBody ProjectTeamOutside projectTeamOutside) {        return success(projectTeamOutsideService.updateById(projectTeamOutside));    }    @ApiOperation(value = "删除-项目团队信息(外部人员)")    @DeleteMapping("/delete/{id}")    @Log(title = "操作日志", businessType = BusinessType.DELETE)    public AjaxResult delete(@PathVariable("id") Integer id) {        return success(projectTeamOutsideService.removeById(id));    }    @ApiOperation(value = "详情-项目团队信息(外部人员)")    @GetMapping("/get/{id}")    public AjaxResult get(@PathVariable("id") Integer id) {        return success(projectTeamOutsideService.getById(id));    }    @ApiOperation(value = "列表-项目团队信息(外部人员)")    @GetMapping("/list/{projectId}")    @RequiresPermissions("biz:projectTeam:list")    public AjaxResult listTwo(@PathVariable("projectId") Long projectId) {        return success(projectTeamOutsideService.list(Wrappers.<ProjectTeamOutside>lambdaQuery().eq(ProjectTeamOutside::getRecordId, projectId)                .orderByDesc(ProjectTeamOutside::getCreateTime)));    }    @ApiOperation(value = "分页（带条件）-项目团队信息(外部人员)")    @PostMapping("/page")    public AjaxResult page(@RequestBody QueryPage queryPage) {        return success(projectTeamOutsideService.page(queryPage.toPage(), queryPage.getWrapper()));    }}