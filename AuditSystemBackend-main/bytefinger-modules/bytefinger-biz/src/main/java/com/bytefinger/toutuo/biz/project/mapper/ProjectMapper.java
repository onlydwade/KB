package com.bytefinger.toutuo.biz.project.mapper;import com.baomidou.mybatisplus.core.conditions.Wrapper;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.core.toolkit.Constants;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.bytefinger.toutuo.biz.businessopportunity.domain.BusinessOpportunityArea;import com.bytefinger.toutuo.biz.performance.domain.ActualInMonth;import com.bytefinger.toutuo.biz.performance.domain.BO.ProjectActualBO;import com.bytefinger.toutuo.biz.performance.domain.BO.ProjectMethodConfigBO;import com.bytefinger.toutuo.biz.performance.domain.BudgetInMonth;import com.bytefinger.toutuo.biz.performance.domain.BudgetInYear;import com.bytefinger.toutuo.biz.performance.domain.BudgetIndicatorData;import com.bytefinger.toutuo.biz.performance.domain.dto.ProjectDaoQiDto;import com.bytefinger.toutuo.biz.performance.domain.vo.ProjectListStepVo;import com.bytefinger.toutuo.biz.performance.domain.vo.ProjectOpenMarkExportVo;import com.bytefinger.toutuo.biz.performance.domain.vo.SelectCommonVo;import com.bytefinger.toutuo.biz.project.bo.ProjectAchievementBO;import com.bytefinger.toutuo.biz.project.domain.Project;import com.bytefinger.toutuo.biz.project.domain.ProjectAchievement;import com.bytefinger.toutuo.biz.project.dto.EndProjectNotifyDto;import com.bytefinger.toutuo.biz.project.dto.ProjectNotifyDto;import org.apache.ibatis.annotations.Mapper;import org.apache.ibatis.annotations.Param;import org.apache.ibatis.annotations.Select;import java.util.Date;import java.util.List;import java.util.Map;/** * <p> * 项目管理 Mapper 接口 * </p> * * @author patrick * @since 2023-01-30 */@Mapperpublic interface ProjectMapper extends BaseMapper<Project> {    /**     * 查询列表数据     *     * @param page     * @param wrapper     * @param params     * @return     */    Page<Project> list(IPage<Project> page, @Param(Constants.WRAPPER) Wrapper<Project> wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    Page<Project> listAll(IPage<Project> page, @Param(Constants.WRAPPER) Wrapper<Project> wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 查询列表数据     *     * @param page     * @param wrapper     * @param params     * @return     */    Page<Project> projectPageFromCustomer(IPage<Project> page, @Param(Constants.WRAPPER) Wrapper<Project> wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 获取实际收入数据     *     * @param page     * @param wrapper     * @param params     * @return     */    Page<ProjectActualBO> listByActualIn(IPage page, @Param(Constants.WRAPPER) Wrapper wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 实际签约汇总报表     *     * @param page     * @param wrapper     * @param params     * @return     */    IPage<Project> getActualInSummaryList(IPage page, @Param(Constants.WRAPPER) Wrapper wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 统计项目实际收入     *     * @param months     * @param wrapper     * @param params     * @return     */    Map totalByActualIn(@Param("months") List<String> months, @Param(Constants.WRAPPER) Wrapper wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 统计项目实际收入 带并表收入     *     * @param months     * @param wrapper     * @param params     * @return     *///    Map totalByActualInMonth(@Param("months") List<String> months, @Param(Constants.WRAPPER) Wrapper wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 统计项目实际收入     *     * @param months     * @param wrapper     * @param params     * @return     *///    Map totalByActualInCome(@Param("months") List<String> months, @Param(Constants.WRAPPER) Wrapper wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 统计项目并表收入     *     * @param recordId     * @param months     * @return     */    List<ActualInMonth> listActualInMonth(@Param("recordId") Long recordId, @Param("months") List<String> months);    List<ProjectActualBO> totalByValid(@Param(Constants.WRAPPER) Wrapper wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    List<ProjectActualBO>  listProject(@Param("months") List<String> months, @Param(Constants.WRAPPER) Wrapper wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    List<ProjectAchievement> selectProjectAchievement(@Param("companyIds")List<Long> companyIds);    List<BudgetInMonth> listBudgetInMonth(@Param("recordIds") List<Long> recordIds, @Param("currYear")Integer currYear,@Param("fieldKeyList") List<String> fieldKeyList);    List<ProjectActualBO> listProjectStep(@Param("months") List<String> months,@Param(Constants.WRAPPER)  Wrapper wrapper,@Param(Constants.COLUMN_MAP) Map<String, Object> dbParams);    IPage<ProjectAchievementBO> listTwo(IPage<ProjectAchievementBO> page, @Param(Constants.WRAPPER) Wrapper<ProjectAchievementBO> wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 分页查询项目通告     *     * @param page 分页参数     * @param wrapper 条件     * @param params 参数     * @return     */    IPage<ProjectNotifyDto> pageNotify(IPage<Project> page, @Param(Constants.WRAPPER) Wrapper<Project> wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    List<ProjectNotifyDto> allNotify();    /**     * 分页查询项目丢盘监控     *     * @param page 分页参数     * @param wrapper 条件     * @param params 参数     * @return     */    IPage<EndProjectNotifyDto> pageEndNotify(IPage<Project> page, @Param(Constants.WRAPPER) Wrapper<Project> wrapper, @Param(Constants.COLUMN_MAP) Map<String, Object> params);    /**     * 查询40天未维护（最后更新时间40天没改过），并且项目评审节点未完成或者没有到项目评审这个节点的项目     *     * @return     */    List<Project> expireProjectList();    /**     * 将项目标记为有效     *     * @return     */    void updateProjectValid(@Param("id") Long id);    /**     * 查询所有未发送报销的项目     *     * @return     */    @Select({            "<script>",            "SELECT *  from biz_project where  (Reimbursement is null or Reimbursement!='SHI' )  AND Project_Type ='DAN_YI_TOU_BIAO_XIANG_MU'    AND  id   in ",            "<foreach item='item' index='index' collection='projectIds' open='(' separator=',' close=')'>",            "#{item}",            "</foreach>",            "</script>"    })    List<Project> getNotReimbursementProjectList(@Param("projectIds") List<Long> projectIds );    /**     * 根据已确定过滤条件查询项目     * @param year 年份     * @param recordId 单位ids     * @return     */    List<ProjectActualBO> selectProjectPerformance(@Param("year") String year,@Param("recordId")  Long recordId,@Param("level")  Integer level);    /**     * 根据已确定过滤条件查询项目     * @param year 年份     * @param recordId 单位ids     * @return     */    List<ProjectActualBO> selectProjectPerformanceYx(@Param("year") String year,@Param("recordId")  Long recordId);    /**     * 查看指标配置     * @param year 年份     * @param fieldKey 单位ids     * @return     */    ProjectMethodConfigBO selectProjectMethodConfig(@Param("year") String year,@Param("fieldKey") String fieldKey);    ProjectActualBO selectProjectPerformanceBl(@Param("year") String year,@Param("recordId")  Long recordId);    List<BudgetIndicatorData> selectBudgetIndicatorData(@Param("year") Integer currYear, @Param("recordId")  Long recordId);    List<ProjectDaoQiDto> selectYdqList();    List<SelectCommonVo> getProjectStepMenuList();    List<ProjectListStepVo> getProjectListStep(@Param("ids") List<Long> projectIds);    List<ProjectOpenMarkExportVo> getOpenMarkList(@Param(Constants.COLUMN_MAP) Map<String, Object> params);    void reinsert(Project project);    void updateCreateUserId(@Param("id") Long id,@Param("userId") Long userId);    void updateTime(@Param("id")Long id, @Param("createTime")Date createTime,@Param("updateTime") Date updateTime);}