<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bytefinger.toutuo.biz.user.mapper.SysUserMapper">

    <resultMap type="com.bytefinger.toutuo.api.biz.user.domain.SysUser" id="SysUserResult">
        <id property="userId" column="user_id"/>
        <result property="deptId" column="dept_id"/>
        <result property="deptName" column="dept_name"/>
        <result property="userName" column="user_name"/>
        <result property="nickName" column="nick_name"/>
        <result property="email" column="email"/>
        <result property="phonenumber" column="phonenumber"/>
        <result property="sex" column="sex"/>
        <result property="avatar" column="avatar"/>
        <result property="password" column="password"/>
        <result property="status" column="status"/>
        <result property="delFlag" column="del_flag"/>
        <result property="loginIp" column="login_ip"/>
        <result property="loginDate" column="login_date"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="remark" column="remark"/>
    </resultMap>

    <sql id="selectUserVo">
        select u.user_id,
               u.dept_id,
               (select sd.dept_name from sys_dept sd where sd.dept_id = u.dept_id) as dept_name,
               u.user_name,
               u.nick_name,
               u.email,
               u.avatar,
               u.phonenumber,
               u.password,
               u.sex,
               u.status,
               u.del_flag,
               u.login_ip,
               u.login_date,
               u.create_by,
               u.create_time,
               u.remark,
               d.dept_id,
               d.parent_id,
               d.ancestors,
               d.dept_name,
               d.order_num,
               d.leader,
               d.status as dept_status,
               r.role_id,
               r.role_name,
               r.role_key,
               r.role_sort,
               r.data_scope,
               r.status as role_status
        from sys_user u
    </sql>

    <select id="getRoleUserList" resultType="Long">
        select user_id
        from sys_post_menu spm
                 INNER JOIN sys_user_dept_post sudp ON (spm.post_id = sudp.post_id)
        WHERE spm.menu_id = (select sm.menu_id from sys_menu sm where sm.perms = #{perms})
          AND sudp.dept_id = #{deptId}
    </select>

    <select id="getRoleList" resultType="com.bytefinger.toutuo.api.biz.user.domain.dto.SysUserDeptPostInfoDTO">
        SELECT
        `sd`.`dept_id` AS `dept_id`,
        `sd`.`parent_id` AS `parent_id`,
        `sd`.`ancestors` AS `ancestors`,
        `sd`.`dept_name` AS `dept_name`,
        `sd`.`order_num` AS `order_num`,
        `sd`.`level` AS `LEVEL`,
        `sd`.`status` AS `dept_status`,
        `sd`.`del_flag` AS `del_flag`,
        `sp`.`post_id` AS `post_id`,
        `sp`.`post_code` AS `post_code`,
        `sp`.`post_name` AS `post_name`,
        `sp`.`post_sort` AS `post_sort`,
        `sp`.`status` AS `post_status`,
        `sp`.`remark` AS `remark`,
        `sudp`.`user_id` AS `user_id`,
        `sudp`.`update_time` AS `update_time`
        FROM
        `sys_user_dept_post` `sudp`
        INNER JOIN `sys_dept` `sd` ON ( `sudp`.`dept_id` = `sd`.`dept_id` )
        INNER JOIN `sys_post` `sp` ON ( `sudp`.`post_id` = `sp`.`post_id` )
        INNER JOIN `sys_post_menu` `spm` ON ( `sudp`.`post_id` = `spm`.`post_id` )
        WHERE
        spm.menu_id IN ( SELECT sm.menu_id FROM sys_menu sm WHERE sm.perms = #{perms} AND sudp.dept_id IN
        <foreach collection="deptIds" item="deptId" index="index" open="(" separator="," close=")">
            #{deptId}
        </foreach>
        )
    </select>

    <select id="getPermsUserList" resultType="Long">
        select user_id
        from sys_post_menu spm
                 INNER JOIN sys_user_dept_post sudp ON (spm.post_id = sudp.post_id)
        WHERE spm.menu_id = (select sm.menu_id from sys_menu sm where sm.perms = #{perms})
    </select>

    <select id="checkUserNameUnique" parameterType="String" resultMap="SysUserResult">
        select user_id, user_name
        from sys_user
        where user_name = #{userName}
          and del_flag = '0' limit 1
    </select>

    <select id="checkPhoneUnique" parameterType="String" resultMap="SysUserResult">
        select user_id, phonenumber
        from sys_user
        where phonenumber = #{phonenumber}
          and del_flag = '0' limit 1
    </select>

    <select id="checkEmailUnique" parameterType="String" resultMap="SysUserResult">
        select user_id, email
        from sys_user
        where email = #{email}
          and del_flag = '0' limit 1
    </select>
    <select id="listAllDept" resultType="com.bytefinger.common.core.web.domain.vo.DeptVO">
        SELECT dept_id     as deptId,
               dept_name   as deptName,
               `level`     as `level`,
               ancestors   as ancestors,
               `parent_id` as parentId
        FROM sys_dept
        WHERE del_flag = '0'
        ORDER BY `level`
    </select>

    <select id="selectUserDeptAll" resultType="com.bytefinger.common.core.web.domain.vo.UserVO">
        select user_id   userId,
               dept_id   deptId,
               user_name userName,
               realname
        from sys_user
        where status = '0'
          and del_flag = '0'
    </select>
    <select id="selectUserPostAll" resultType="com.bytefinger.common.core.web.domain.vo.PostUserVO">

        select DISTINCT A.user_id   userId,
                        A.user_name userName,
                        A.realname,
                        C.post_id   postId,
                        C.post_name postName
        from sys_user A,
             sys_user_dept_post B,
             sys_post C
        where A.user_id = B.user_id
          and B.post_id = C.post_id
          and A.status = '0'
          and A.del_flag = '0'
          and C.status = '0'
    </select>

    <insert id="insertUser" parameterType="com.bytefinger.toutuo.api.biz.user.domain.SysUser" useGeneratedKeys="true"
            keyProperty="userId">
        insert into sys_user(
        <if test="userId != null and userId != 0">user_id,</if>
        <if test="deptId != null and deptId != 0">dept_id,</if>
        <if test="userName != null and userName != ''">user_name,</if>
        <if test="realname != null and realname != ''">realname,</if>
        <if test="nickName != null and nickName != ''">nick_name,</if>
        <if test="email != null and email != ''">email,</if>
        <if test="avatar != null and avatar != ''">avatar,</if>
        <if test="phonenumber != null and phonenumber != ''">phonenumber,</if>
        <if test="sex != null and sex != ''">sex,</if>
        <if test="password != null and password != ''">password,</if>
        <if test="status != null and status != ''">status,</if>
        <if test="createBy != null and createBy != ''">create_by,</if>
        <if test="remark != null and remark != ''">remark,</if>
        create_time
        )values(
        <if test="userId != null and userId != ''">#{userId},</if>
        <if test="deptId != null and deptId != ''">#{deptId},</if>
        <if test="userName != null and userName != ''">#{userName},</if>
        <if test="realname != null and realname != ''">#{realname},</if>
        <if test="nickName != null and nickName != ''">#{nickName},</if>
        <if test="email != null and email != ''">#{email},</if>
        <if test="avatar != null and avatar != ''">#{avatar},</if>
        <if test="phonenumber != null and phonenumber != ''">#{phonenumber},</if>
        <if test="sex != null and sex != ''">#{sex},</if>
        <if test="password != null and password != ''">#{password},</if>
        <if test="status != null and status != ''">#{status},</if>
        <if test="createBy != null and createBy != ''">#{createBy},</if>
        <if test="remark != null and remark != ''">#{remark},</if>
        sysdate()
        )
    </insert>

    <update id="updateUser" parameterType="com.bytefinger.toutuo.api.biz.user.domain.SysUser">
        update sys_user
        <set>
            <if test="deptId != null and deptId != 0">dept_id = #{deptId},</if>
            <if test="userName != null and userName != ''">user_name = #{userName},</if>
            <if test="nickName != null and nickName != ''">nick_name = #{nickName},</if>
            <if test="realname != null and realname != ''">realname = #{realname},</if>
            <if test="email != null ">email = #{email},</if>
            <if test="phonenumber != null ">phonenumber = #{phonenumber},</if>
            <if test="sex != null and sex != ''">sex = #{sex},</if>
            <if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
            <if test="status != null and status != ''">status = #{status},</if>
            <if test="loginIp != null and loginIp != ''">login_ip = #{loginIp},</if>
            <if test="loginDate != null">login_date = #{loginDate},</if>
            <if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
            <if test="openId != null and openId != ''">open_id = #{openId},</if>
            <if test="remark != null">remark = #{remark},</if>
            update_time = sysdate()
        </set>
        where user_id = #{userId}
    </update>

    <update id="updateUserAvatar" parameterType="com.bytefinger.toutuo.api.biz.user.domain.SysUser">
        update sys_user
        set avatar = #{avatar}
        where user_name = #{userName}
    </update>

    <update id="resetUserPwd" parameterType="com.bytefinger.toutuo.api.biz.user.domain.SysUser">
        update sys_user
        set password = #{password}
        where user_name = #{userName}
    </update>

    <delete id="deleteUserById" parameterType="Long">
        update sys_user
        set del_flag = '2'
        where user_id = #{userId}
    </delete>

    <delete id="deleteUserByIds" parameterType="Long">
        update sys_user set del_flag = '2' where user_id in
        <foreach collection="array" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>



</mapper> 